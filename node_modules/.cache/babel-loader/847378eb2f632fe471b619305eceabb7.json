{"ast":null,"code":"var util = require('../core').util;\n\nvar typeOf = require('./types').typeOf;\n/**\n * @api private\n */\n\n\nvar memberTypeToSetType = {\n  'String': 'String',\n  'Number': 'Number',\n  'NumberValue': 'Number',\n  'Binary': 'Binary'\n};\n/**\n * @api private\n */\n\nvar DynamoDBSet = util.inherit({\n  constructor: function Set(list, options) {\n    options = options || {};\n    this.wrapperName = 'Set';\n    this.initialize(list, options.validate);\n  },\n  initialize: function initialize(list, validate) {\n    var self = this;\n    self.values = [].concat(list);\n    self.detectType();\n\n    if (validate) {\n      self.validate();\n    }\n  },\n  detectType: function detectType() {\n    this.type = memberTypeToSetType[typeOf(this.values[0])];\n\n    if (!this.type) {\n      throw util.error(new Error(), {\n        code: 'InvalidSetType',\n        message: 'Sets can contain string, number, or binary values'\n      });\n    }\n  },\n  validate: function validate() {\n    var self = this;\n    var length = self.values.length;\n    var values = self.values;\n\n    for (var i = 0; i < length; i++) {\n      if (memberTypeToSetType[typeOf(values[i])] !== self.type) {\n        throw util.error(new Error(), {\n          code: 'InvalidType',\n          message: self.type + ' Set contains ' + typeOf(values[i]) + ' value'\n        });\n      }\n    }\n  },\n\n  /**\n   * Render the underlying values only when converting to JSON.\n   */\n  toJSON: function toJSON() {\n    var self = this;\n    return self.values;\n  }\n});\n/**\n * @api private\n */\n\nmodule.exports = DynamoDBSet;","map":{"version":3,"names":["util","require","typeOf","memberTypeToSetType","DynamoDBSet","inherit","constructor","Set","list","options","wrapperName","initialize","validate","self","values","concat","detectType","type","error","Error","code","message","length","i","toJSON","module","exports"],"sources":["/Users/lazarbogdan/test/medicacasa-frontend/node_modules/aws-sdk/lib/dynamodb/set.js"],"sourcesContent":["var util = require('../core').util;\nvar typeOf = require('./types').typeOf;\n\n/**\n * @api private\n */\nvar memberTypeToSetType = {\n  'String': 'String',\n  'Number': 'Number',\n  'NumberValue': 'Number',\n  'Binary': 'Binary'\n};\n\n/**\n * @api private\n */\nvar DynamoDBSet = util.inherit({\n\n  constructor: function Set(list, options) {\n    options = options || {};\n    this.wrapperName = 'Set';\n    this.initialize(list, options.validate);\n  },\n\n  initialize: function(list, validate) {\n    var self = this;\n    self.values = [].concat(list);\n    self.detectType();\n    if (validate) {\n      self.validate();\n    }\n  },\n\n  detectType: function() {\n    this.type = memberTypeToSetType[typeOf(this.values[0])];\n    if (!this.type) {\n      throw util.error(new Error(), {\n        code: 'InvalidSetType',\n        message: 'Sets can contain string, number, or binary values'\n      });\n    }\n  },\n\n  validate: function() {\n    var self = this;\n    var length = self.values.length;\n    var values = self.values;\n    for (var i = 0; i < length; i++) {\n      if (memberTypeToSetType[typeOf(values[i])] !== self.type) {\n        throw util.error(new Error(), {\n          code: 'InvalidType',\n          message: self.type + ' Set contains ' + typeOf(values[i]) + ' value'\n        });\n      }\n    }\n  },\n\n  /**\n   * Render the underlying values only when converting to JSON.\n   */\n  toJSON: function() {\n    var self = this;\n    return self.values;\n  }\n\n});\n\n/**\n * @api private\n */\nmodule.exports = DynamoDBSet;\n"],"mappings":"AAAA,IAAIA,IAAI,GAAGC,OAAO,CAAC,SAAD,CAAP,CAAmBD,IAA9B;;AACA,IAAIE,MAAM,GAAGD,OAAO,CAAC,SAAD,CAAP,CAAmBC,MAAhC;AAEA;AACA;AACA;;;AACA,IAAIC,mBAAmB,GAAG;EACxB,UAAU,QADc;EAExB,UAAU,QAFc;EAGxB,eAAe,QAHS;EAIxB,UAAU;AAJc,CAA1B;AAOA;AACA;AACA;;AACA,IAAIC,WAAW,GAAGJ,IAAI,CAACK,OAAL,CAAa;EAE7BC,WAAW,EAAE,SAASC,GAAT,CAAaC,IAAb,EAAmBC,OAAnB,EAA4B;IACvCA,OAAO,GAAGA,OAAO,IAAI,EAArB;IACA,KAAKC,WAAL,GAAmB,KAAnB;IACA,KAAKC,UAAL,CAAgBH,IAAhB,EAAsBC,OAAO,CAACG,QAA9B;EACD,CAN4B;EAQ7BD,UAAU,EAAE,oBAASH,IAAT,EAAeI,QAAf,EAAyB;IACnC,IAAIC,IAAI,GAAG,IAAX;IACAA,IAAI,CAACC,MAAL,GAAc,GAAGC,MAAH,CAAUP,IAAV,CAAd;IACAK,IAAI,CAACG,UAAL;;IACA,IAAIJ,QAAJ,EAAc;MACZC,IAAI,CAACD,QAAL;IACD;EACF,CAf4B;EAiB7BI,UAAU,EAAE,sBAAW;IACrB,KAAKC,IAAL,GAAYd,mBAAmB,CAACD,MAAM,CAAC,KAAKY,MAAL,CAAY,CAAZ,CAAD,CAAP,CAA/B;;IACA,IAAI,CAAC,KAAKG,IAAV,EAAgB;MACd,MAAMjB,IAAI,CAACkB,KAAL,CAAW,IAAIC,KAAJ,EAAX,EAAwB;QAC5BC,IAAI,EAAE,gBADsB;QAE5BC,OAAO,EAAE;MAFmB,CAAxB,CAAN;IAID;EACF,CAzB4B;EA2B7BT,QAAQ,EAAE,oBAAW;IACnB,IAAIC,IAAI,GAAG,IAAX;IACA,IAAIS,MAAM,GAAGT,IAAI,CAACC,MAAL,CAAYQ,MAAzB;IACA,IAAIR,MAAM,GAAGD,IAAI,CAACC,MAAlB;;IACA,KAAK,IAAIS,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,MAApB,EAA4BC,CAAC,EAA7B,EAAiC;MAC/B,IAAIpB,mBAAmB,CAACD,MAAM,CAACY,MAAM,CAACS,CAAD,CAAP,CAAP,CAAnB,KAA2CV,IAAI,CAACI,IAApD,EAA0D;QACxD,MAAMjB,IAAI,CAACkB,KAAL,CAAW,IAAIC,KAAJ,EAAX,EAAwB;UAC5BC,IAAI,EAAE,aADsB;UAE5BC,OAAO,EAAER,IAAI,CAACI,IAAL,GAAY,gBAAZ,GAA+Bf,MAAM,CAACY,MAAM,CAACS,CAAD,CAAP,CAArC,GAAmD;QAFhC,CAAxB,CAAN;MAID;IACF;EACF,CAvC4B;;EAyC7B;AACF;AACA;EACEC,MAAM,EAAE,kBAAW;IACjB,IAAIX,IAAI,GAAG,IAAX;IACA,OAAOA,IAAI,CAACC,MAAZ;EACD;AA/C4B,CAAb,CAAlB;AAmDA;AACA;AACA;;AACAW,MAAM,CAACC,OAAP,GAAiBtB,WAAjB"},"metadata":{},"sourceType":"script"}