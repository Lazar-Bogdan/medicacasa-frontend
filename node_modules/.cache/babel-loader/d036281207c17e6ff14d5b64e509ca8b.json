{"ast":null,"code":"import { __spreadArray, __read } from 'tslib';\nimport sync, { flushSync } from 'framesync';\nimport { collectProjectingAncestors, updateLayoutMeasurement } from '../../../render/dom/projection/utils.js';\nimport { batchLayout, flushLayout } from '../../../render/dom/utils/batch-layout.js';\nimport { compareByDepth } from '../../../render/utils/compare-by-depth.js';\nimport { Presence } from '../types.js';\n/**\n * Default handlers for batching VisualElements\n */\n\nvar defaultHandler = {\n  layoutReady: function layoutReady(child) {\n    return child.notifyLayoutReady();\n  }\n};\n/**\n * Create a batcher to process VisualElements\n */\n\nfunction createBatcher() {\n  var queue = new Set();\n  return {\n    add: function add(child) {\n      return queue.add(child);\n    },\n    flush: function flush(_a) {\n      var _b = _a === void 0 ? defaultHandler : _a,\n          layoutReady = _b.layoutReady,\n          parent = _b.parent;\n\n      batchLayout(function (read, write) {\n        var order = Array.from(queue).sort(compareByDepth);\n        var ancestors = parent ? collectProjectingAncestors(parent) : [];\n        write(function () {\n          var allElements = __spreadArray(__spreadArray([], __read(ancestors)), __read(order));\n\n          allElements.forEach(function (element) {\n            return element.resetTransform();\n          });\n        });\n        read(function () {\n          order.forEach(updateLayoutMeasurement);\n        });\n        write(function () {\n          ancestors.forEach(function (element) {\n            return element.restoreTransform();\n          });\n          order.forEach(layoutReady);\n        });\n        read(function () {\n          /**\n           * After all children have started animating, ensure any Entering components are set to Present.\n           * If we add deferred animations (set up all animations and then start them in two loops) this\n           * could be moved to the start loop. But it needs to happen after all the animations configs\n           * are generated in AnimateSharedLayout as this relies on presence data\n           */\n          order.forEach(function (child) {\n            if (child.isPresent) child.presence = Presence.Present;\n          });\n        });\n        write(function () {\n          /**\n           * Starting these animations will have queued jobs on the frame loop. In some situations,\n           * like when removing an element, these will be processed too late after the DOM is manipulated,\n           * leaving a flash of incorrectly-projected content. By manually flushing these jobs\n           * we ensure there's no flash.\n           */\n          flushSync.preRender();\n          flushSync.render();\n        });\n        read(function () {\n          /**\n           * Schedule a callback at the end of the following frame to assign the latest projection\n           * box to the prevViewportBox snapshot. Once global batching is in place this could be run\n           * synchronously. But for now it ensures that if any nested `AnimateSharedLayout` top-level\n           * child attempts to calculate its previous relative position against a prevViewportBox\n           * it will be against its latest projection box instead, as the snapshot is useless beyond this\n           * render.\n           */\n          sync.postRender(function () {\n            return order.forEach(assignProjectionToSnapshot);\n          });\n          queue.clear();\n        });\n      }); // TODO: Need to find a layout-synchronous way of flushing this\n\n      flushLayout();\n    }\n  };\n}\n\nfunction assignProjectionToSnapshot(child) {\n  child.prevViewportBox = child.projection.target;\n}\n\nexport { createBatcher };","map":{"version":3,"names":["__spreadArray","__read","sync","flushSync","collectProjectingAncestors","updateLayoutMeasurement","batchLayout","flushLayout","compareByDepth","Presence","defaultHandler","layoutReady","child","notifyLayoutReady","createBatcher","queue","Set","add","flush","_a","_b","parent","read","write","order","Array","from","sort","ancestors","allElements","forEach","element","resetTransform","restoreTransform","isPresent","presence","Present","preRender","render","postRender","assignProjectionToSnapshot","clear","prevViewportBox","projection","target"],"sources":["/Users/lazarbogdan/test/medicacasa-frontend/node_modules/framer-motion/dist/es/components/AnimateSharedLayout/utils/batcher.js"],"sourcesContent":["import { __spreadArray, __read } from 'tslib';\nimport sync, { flushSync } from 'framesync';\nimport { collectProjectingAncestors, updateLayoutMeasurement } from '../../../render/dom/projection/utils.js';\nimport { batchLayout, flushLayout } from '../../../render/dom/utils/batch-layout.js';\nimport { compareByDepth } from '../../../render/utils/compare-by-depth.js';\nimport { Presence } from '../types.js';\n\n/**\n * Default handlers for batching VisualElements\n */\nvar defaultHandler = {\n    layoutReady: function (child) { return child.notifyLayoutReady(); },\n};\n/**\n * Create a batcher to process VisualElements\n */\nfunction createBatcher() {\n    var queue = new Set();\n    return {\n        add: function (child) { return queue.add(child); },\n        flush: function (_a) {\n            var _b = _a === void 0 ? defaultHandler : _a, layoutReady = _b.layoutReady, parent = _b.parent;\n            batchLayout(function (read, write) {\n                var order = Array.from(queue).sort(compareByDepth);\n                var ancestors = parent\n                    ? collectProjectingAncestors(parent)\n                    : [];\n                write(function () {\n                    var allElements = __spreadArray(__spreadArray([], __read(ancestors)), __read(order));\n                    allElements.forEach(function (element) { return element.resetTransform(); });\n                });\n                read(function () {\n                    order.forEach(updateLayoutMeasurement);\n                });\n                write(function () {\n                    ancestors.forEach(function (element) { return element.restoreTransform(); });\n                    order.forEach(layoutReady);\n                });\n                read(function () {\n                    /**\n                     * After all children have started animating, ensure any Entering components are set to Present.\n                     * If we add deferred animations (set up all animations and then start them in two loops) this\n                     * could be moved to the start loop. But it needs to happen after all the animations configs\n                     * are generated in AnimateSharedLayout as this relies on presence data\n                     */\n                    order.forEach(function (child) {\n                        if (child.isPresent)\n                            child.presence = Presence.Present;\n                    });\n                });\n                write(function () {\n                    /**\n                     * Starting these animations will have queued jobs on the frame loop. In some situations,\n                     * like when removing an element, these will be processed too late after the DOM is manipulated,\n                     * leaving a flash of incorrectly-projected content. By manually flushing these jobs\n                     * we ensure there's no flash.\n                     */\n                    flushSync.preRender();\n                    flushSync.render();\n                });\n                read(function () {\n                    /**\n                     * Schedule a callback at the end of the following frame to assign the latest projection\n                     * box to the prevViewportBox snapshot. Once global batching is in place this could be run\n                     * synchronously. But for now it ensures that if any nested `AnimateSharedLayout` top-level\n                     * child attempts to calculate its previous relative position against a prevViewportBox\n                     * it will be against its latest projection box instead, as the snapshot is useless beyond this\n                     * render.\n                     */\n                    sync.postRender(function () {\n                        return order.forEach(assignProjectionToSnapshot);\n                    });\n                    queue.clear();\n                });\n            });\n            // TODO: Need to find a layout-synchronous way of flushing this\n            flushLayout();\n        },\n    };\n}\nfunction assignProjectionToSnapshot(child) {\n    child.prevViewportBox = child.projection.target;\n}\n\nexport { createBatcher };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}