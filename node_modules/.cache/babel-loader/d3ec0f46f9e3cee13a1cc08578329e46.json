{"ast":null,"code":"var AWS = require('../core');\n\nvar inherit = AWS.util.inherit;\n/**\n * @api private\n */\n\nAWS.Signers.RequestSigner = inherit({\n  constructor: function RequestSigner(request) {\n    this.request = request;\n  },\n  setServiceClientId: function setServiceClientId(id) {\n    this.serviceClientId = id;\n  },\n  getServiceClientId: function getServiceClientId() {\n    return this.serviceClientId;\n  }\n});\n\nAWS.Signers.RequestSigner.getVersion = function getVersion(version) {\n  switch (version) {\n    case 'v2':\n      return AWS.Signers.V2;\n\n    case 'v3':\n      return AWS.Signers.V3;\n\n    case 's3v4':\n      return AWS.Signers.V4;\n\n    case 'v4':\n      return AWS.Signers.V4;\n\n    case 's3':\n      return AWS.Signers.S3;\n\n    case 'v3https':\n      return AWS.Signers.V3Https;\n\n    case 'bearer':\n      return AWS.Signers.Bearer;\n  }\n\n  throw new Error('Unknown signing version ' + version);\n};\n\nrequire('./v2');\n\nrequire('./v3');\n\nrequire('./v3https');\n\nrequire('./v4');\n\nrequire('./s3');\n\nrequire('./presign');\n\nrequire('./bearer');","map":{"version":3,"names":["AWS","require","inherit","util","Signers","RequestSigner","constructor","request","setServiceClientId","id","serviceClientId","getServiceClientId","getVersion","version","V2","V3","V4","S3","V3Https","Bearer","Error"],"sources":["/Users/lazarbogdan/test/medicacasa-frontend/node_modules/aws-sdk/lib/signers/request_signer.js"],"sourcesContent":["var AWS = require('../core');\n\nvar inherit = AWS.util.inherit;\n\n/**\n * @api private\n */\nAWS.Signers.RequestSigner = inherit({\n  constructor: function RequestSigner(request) {\n    this.request = request;\n  },\n\n  setServiceClientId: function setServiceClientId(id) {\n    this.serviceClientId = id;\n  },\n\n  getServiceClientId: function getServiceClientId() {\n    return this.serviceClientId;\n  }\n});\n\nAWS.Signers.RequestSigner.getVersion = function getVersion(version) {\n  switch (version) {\n    case 'v2': return AWS.Signers.V2;\n    case 'v3': return AWS.Signers.V3;\n    case 's3v4': return AWS.Signers.V4;\n    case 'v4': return AWS.Signers.V4;\n    case 's3': return AWS.Signers.S3;\n    case 'v3https': return AWS.Signers.V3Https;\n    case 'bearer': return AWS.Signers.Bearer;\n  }\n  throw new Error('Unknown signing version ' + version);\n};\n\nrequire('./v2');\nrequire('./v3');\nrequire('./v3https');\nrequire('./v4');\nrequire('./s3');\nrequire('./presign');\nrequire('./bearer');\n"],"mappings":"AAAA,IAAIA,GAAG,GAAGC,OAAO,CAAC,SAAD,CAAjB;;AAEA,IAAIC,OAAO,GAAGF,GAAG,CAACG,IAAJ,CAASD,OAAvB;AAEA;AACA;AACA;;AACAF,GAAG,CAACI,OAAJ,CAAYC,aAAZ,GAA4BH,OAAO,CAAC;EAClCI,WAAW,EAAE,SAASD,aAAT,CAAuBE,OAAvB,EAAgC;IAC3C,KAAKA,OAAL,GAAeA,OAAf;EACD,CAHiC;EAKlCC,kBAAkB,EAAE,SAASA,kBAAT,CAA4BC,EAA5B,EAAgC;IAClD,KAAKC,eAAL,GAAuBD,EAAvB;EACD,CAPiC;EASlCE,kBAAkB,EAAE,SAASA,kBAAT,GAA8B;IAChD,OAAO,KAAKD,eAAZ;EACD;AAXiC,CAAD,CAAnC;;AAcAV,GAAG,CAACI,OAAJ,CAAYC,aAAZ,CAA0BO,UAA1B,GAAuC,SAASA,UAAT,CAAoBC,OAApB,EAA6B;EAClE,QAAQA,OAAR;IACE,KAAK,IAAL;MAAW,OAAOb,GAAG,CAACI,OAAJ,CAAYU,EAAnB;;IACX,KAAK,IAAL;MAAW,OAAOd,GAAG,CAACI,OAAJ,CAAYW,EAAnB;;IACX,KAAK,MAAL;MAAa,OAAOf,GAAG,CAACI,OAAJ,CAAYY,EAAnB;;IACb,KAAK,IAAL;MAAW,OAAOhB,GAAG,CAACI,OAAJ,CAAYY,EAAnB;;IACX,KAAK,IAAL;MAAW,OAAOhB,GAAG,CAACI,OAAJ,CAAYa,EAAnB;;IACX,KAAK,SAAL;MAAgB,OAAOjB,GAAG,CAACI,OAAJ,CAAYc,OAAnB;;IAChB,KAAK,QAAL;MAAe,OAAOlB,GAAG,CAACI,OAAJ,CAAYe,MAAnB;EAPjB;;EASA,MAAM,IAAIC,KAAJ,CAAU,6BAA6BP,OAAvC,CAAN;AACD,CAXD;;AAaAZ,OAAO,CAAC,MAAD,CAAP;;AACAA,OAAO,CAAC,MAAD,CAAP;;AACAA,OAAO,CAAC,WAAD,CAAP;;AACAA,OAAO,CAAC,MAAD,CAAP;;AACAA,OAAO,CAAC,MAAD,CAAP;;AACAA,OAAO,CAAC,WAAD,CAAP;;AACAA,OAAO,CAAC,UAAD,CAAP"},"metadata":{},"sourceType":"script"}