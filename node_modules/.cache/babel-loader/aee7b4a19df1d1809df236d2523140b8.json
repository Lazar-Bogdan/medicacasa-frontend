{"ast":null,"code":"import { calcRelativeOffset } from '../../../motion/features/layout/utils.js';\nimport { eachAxis } from '../../../utils/each-axis.js';\nimport { removeBoxTransforms } from '../../../utils/geometry/delta-apply.js';\n/**\n * Returns a boolean stating whether or not we converted the projection\n * to relative projection.\n */\n\nfunction convertToRelativeProjection(visualElement, isLayoutDrag) {\n  if (isLayoutDrag === void 0) {\n    isLayoutDrag = true;\n  }\n\n  var projectionParent = visualElement.getProjectionParent();\n  if (!projectionParent) return false;\n  var offset;\n\n  if (isLayoutDrag) {\n    offset = calcRelativeOffset(projectionParent.projection.target, visualElement.projection.target);\n    removeBoxTransforms(offset, projectionParent.getLatestValues());\n  } else {\n    offset = calcRelativeOffset(projectionParent.getLayoutState().layout, visualElement.getLayoutState().layout);\n  }\n\n  eachAxis(function (axis) {\n    return visualElement.setProjectionTargetAxis(axis, offset[axis].min, offset[axis].max, true);\n  });\n  return true;\n}\n\nexport { convertToRelativeProjection };","map":{"version":3,"names":["calcRelativeOffset","eachAxis","removeBoxTransforms","convertToRelativeProjection","visualElement","isLayoutDrag","projectionParent","getProjectionParent","offset","projection","target","getLatestValues","getLayoutState","layout","axis","setProjectionTargetAxis","min","max"],"sources":["/Users/lazarbogdan/test/medicacasa-frontend/node_modules/framer-motion/dist/es/render/dom/projection/convert-to-relative.js"],"sourcesContent":["import { calcRelativeOffset } from '../../../motion/features/layout/utils.js';\nimport { eachAxis } from '../../../utils/each-axis.js';\nimport { removeBoxTransforms } from '../../../utils/geometry/delta-apply.js';\n\n/**\n * Returns a boolean stating whether or not we converted the projection\n * to relative projection.\n */\nfunction convertToRelativeProjection(visualElement, isLayoutDrag) {\n    if (isLayoutDrag === void 0) { isLayoutDrag = true; }\n    var projectionParent = visualElement.getProjectionParent();\n    if (!projectionParent)\n        return false;\n    var offset;\n    if (isLayoutDrag) {\n        offset = calcRelativeOffset(projectionParent.projection.target, visualElement.projection.target);\n        removeBoxTransforms(offset, projectionParent.getLatestValues());\n    }\n    else {\n        offset = calcRelativeOffset(projectionParent.getLayoutState().layout, visualElement.getLayoutState().layout);\n    }\n    eachAxis(function (axis) {\n        return visualElement.setProjectionTargetAxis(axis, offset[axis].min, offset[axis].max, true);\n    });\n    return true;\n}\n\nexport { convertToRelativeProjection };\n"],"mappings":"AAAA,SAASA,kBAAT,QAAmC,0CAAnC;AACA,SAASC,QAAT,QAAyB,6BAAzB;AACA,SAASC,mBAAT,QAAoC,wCAApC;AAEA;AACA;AACA;AACA;;AACA,SAASC,2BAAT,CAAqCC,aAArC,EAAoDC,YAApD,EAAkE;EAC9D,IAAIA,YAAY,KAAK,KAAK,CAA1B,EAA6B;IAAEA,YAAY,GAAG,IAAf;EAAsB;;EACrD,IAAIC,gBAAgB,GAAGF,aAAa,CAACG,mBAAd,EAAvB;EACA,IAAI,CAACD,gBAAL,EACI,OAAO,KAAP;EACJ,IAAIE,MAAJ;;EACA,IAAIH,YAAJ,EAAkB;IACdG,MAAM,GAAGR,kBAAkB,CAACM,gBAAgB,CAACG,UAAjB,CAA4BC,MAA7B,EAAqCN,aAAa,CAACK,UAAd,CAAyBC,MAA9D,CAA3B;IACAR,mBAAmB,CAACM,MAAD,EAASF,gBAAgB,CAACK,eAAjB,EAAT,CAAnB;EACH,CAHD,MAIK;IACDH,MAAM,GAAGR,kBAAkB,CAACM,gBAAgB,CAACM,cAAjB,GAAkCC,MAAnC,EAA2CT,aAAa,CAACQ,cAAd,GAA+BC,MAA1E,CAA3B;EACH;;EACDZ,QAAQ,CAAC,UAAUa,IAAV,EAAgB;IACrB,OAAOV,aAAa,CAACW,uBAAd,CAAsCD,IAAtC,EAA4CN,MAAM,CAACM,IAAD,CAAN,CAAaE,GAAzD,EAA8DR,MAAM,CAACM,IAAD,CAAN,CAAaG,GAA3E,EAAgF,IAAhF,CAAP;EACH,CAFO,CAAR;EAGA,OAAO,IAAP;AACH;;AAED,SAASd,2BAAT"},"metadata":{},"sourceType":"module"}