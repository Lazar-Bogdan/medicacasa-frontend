{"ast":null,"code":"var AWS = require('./core');\n/**\n * @api private\n * @!method on(eventName, callback)\n *   Registers an event listener callback for the event given by `eventName`.\n *   Parameters passed to the callback function depend on the individual event\n *   being triggered. See the event documentation for those parameters.\n *\n *   @param eventName [String] the event name to register the listener for\n *   @param callback [Function] the listener callback function\n *   @param toHead [Boolean] attach the listener callback to the head of callback array if set to true.\n *     Default to be false.\n *   @return [AWS.SequentialExecutor] the same object for chaining\n */\n\n\nAWS.SequentialExecutor = AWS.util.inherit({\n  constructor: function SequentialExecutor() {\n    this._events = {};\n  },\n\n  /**\n   * @api private\n   */\n  listeners: function listeners(eventName) {\n    return this._events[eventName] ? this._events[eventName].slice(0) : [];\n  },\n  on: function on(eventName, listener, toHead) {\n    if (this._events[eventName]) {\n      toHead ? this._events[eventName].unshift(listener) : this._events[eventName].push(listener);\n    } else {\n      this._events[eventName] = [listener];\n    }\n\n    return this;\n  },\n  onAsync: function onAsync(eventName, listener, toHead) {\n    listener._isAsync = true;\n    return this.on(eventName, listener, toHead);\n  },\n  removeListener: function removeListener(eventName, listener) {\n    var listeners = this._events[eventName];\n\n    if (listeners) {\n      var length = listeners.length;\n      var position = -1;\n\n      for (var i = 0; i < length; ++i) {\n        if (listeners[i] === listener) {\n          position = i;\n        }\n      }\n\n      if (position > -1) {\n        listeners.splice(position, 1);\n      }\n    }\n\n    return this;\n  },\n  removeAllListeners: function removeAllListeners(eventName) {\n    if (eventName) {\n      delete this._events[eventName];\n    } else {\n      this._events = {};\n    }\n\n    return this;\n  },\n\n  /**\n   * @api private\n   */\n  emit: function emit(eventName, eventArgs, doneCallback) {\n    if (!doneCallback) doneCallback = function doneCallback() {};\n    var listeners = this.listeners(eventName);\n    var count = listeners.length;\n    this.callListeners(listeners, eventArgs, doneCallback);\n    return count > 0;\n  },\n\n  /**\n   * @api private\n   */\n  callListeners: function callListeners(listeners, args, doneCallback, prevError) {\n    var self = this;\n    var error = prevError || null;\n\n    function callNextListener(err) {\n      if (err) {\n        error = AWS.util.error(error || new Error(), err);\n\n        if (self._haltHandlersOnError) {\n          return doneCallback.call(self, error);\n        }\n      }\n\n      self.callListeners(listeners, args, doneCallback, error);\n    }\n\n    while (listeners.length > 0) {\n      var listener = listeners.shift();\n\n      if (listener._isAsync) {\n        // asynchronous listener\n        listener.apply(self, args.concat([callNextListener]));\n        return; // stop here, callNextListener will continue\n      } else {\n        // synchronous listener\n        try {\n          listener.apply(self, args);\n        } catch (err) {\n          error = AWS.util.error(error || new Error(), err);\n        }\n\n        if (error && self._haltHandlersOnError) {\n          doneCallback.call(self, error);\n          return;\n        }\n      }\n    }\n\n    doneCallback.call(self, error);\n  },\n\n  /**\n   * Adds or copies a set of listeners from another list of\n   * listeners or SequentialExecutor object.\n   *\n   * @param listeners [map<String,Array<Function>>, AWS.SequentialExecutor]\n   *   a list of events and callbacks, or an event emitter object\n   *   containing listeners to add to this emitter object.\n   * @return [AWS.SequentialExecutor] the emitter object, for chaining.\n   * @example Adding listeners from a map of listeners\n   *   emitter.addListeners({\n   *     event1: [function() { ... }, function() { ... }],\n   *     event2: [function() { ... }]\n   *   });\n   *   emitter.emit('event1'); // emitter has event1\n   *   emitter.emit('event2'); // emitter has event2\n   * @example Adding listeners from another emitter object\n   *   var emitter1 = new AWS.SequentialExecutor();\n   *   emitter1.on('event1', function() { ... });\n   *   emitter1.on('event2', function() { ... });\n   *   var emitter2 = new AWS.SequentialExecutor();\n   *   emitter2.addListeners(emitter1);\n   *   emitter2.emit('event1'); // emitter2 has event1\n   *   emitter2.emit('event2'); // emitter2 has event2\n   */\n  addListeners: function addListeners(listeners) {\n    var self = this; // extract listeners if parameter is an SequentialExecutor object\n\n    if (listeners._events) listeners = listeners._events;\n    AWS.util.each(listeners, function (event, callbacks) {\n      if (typeof callbacks === 'function') callbacks = [callbacks];\n      AWS.util.arrayEach(callbacks, function (callback) {\n        self.on(event, callback);\n      });\n    });\n    return self;\n  },\n\n  /**\n   * Registers an event with {on} and saves the callback handle function\n   * as a property on the emitter object using a given `name`.\n   *\n   * @param name [String] the property name to set on this object containing\n   *   the callback function handle so that the listener can be removed in\n   *   the future.\n   * @param (see on)\n   * @return (see on)\n   * @example Adding a named listener DATA_CALLBACK\n   *   var listener = function() { doSomething(); };\n   *   emitter.addNamedListener('DATA_CALLBACK', 'data', listener);\n   *\n   *   // the following prints: true\n   *   console.log(emitter.DATA_CALLBACK == listener);\n   */\n  addNamedListener: function addNamedListener(name, eventName, callback, toHead) {\n    this[name] = callback;\n    this.addListener(eventName, callback, toHead);\n    return this;\n  },\n\n  /**\n   * @api private\n   */\n  addNamedAsyncListener: function addNamedAsyncListener(name, eventName, callback, toHead) {\n    callback._isAsync = true;\n    return this.addNamedListener(name, eventName, callback, toHead);\n  },\n\n  /**\n   * Helper method to add a set of named listeners using\n   * {addNamedListener}. The callback contains a parameter\n   * with a handle to the `addNamedListener` method.\n   *\n   * @callback callback function(add)\n   *   The callback function is called immediately in order to provide\n   *   the `add` function to the block. This simplifies the addition of\n   *   a large group of named listeners.\n   *   @param add [Function] the {addNamedListener} function to call\n   *     when registering listeners.\n   * @example Adding a set of named listeners\n   *   emitter.addNamedListeners(function(add) {\n   *     add('DATA_CALLBACK', 'data', function() { ... });\n   *     add('OTHER', 'otherEvent', function() { ... });\n   *     add('LAST', 'lastEvent', function() { ... });\n   *   });\n   *\n   *   // these properties are now set:\n   *   emitter.DATA_CALLBACK;\n   *   emitter.OTHER;\n   *   emitter.LAST;\n   */\n  addNamedListeners: function addNamedListeners(callback) {\n    var self = this;\n    callback(function () {\n      self.addNamedListener.apply(self, arguments);\n    }, function () {\n      self.addNamedAsyncListener.apply(self, arguments);\n    });\n    return this;\n  }\n});\n/**\n * {on} is the prefered method.\n * @api private\n */\n\nAWS.SequentialExecutor.prototype.addListener = AWS.SequentialExecutor.prototype.on;\n/**\n * @api private\n */\n\nmodule.exports = AWS.SequentialExecutor;","map":{"version":3,"names":["AWS","require","SequentialExecutor","util","inherit","constructor","_events","listeners","eventName","slice","on","listener","toHead","unshift","push","onAsync","_isAsync","removeListener","length","position","i","splice","removeAllListeners","emit","eventArgs","doneCallback","count","callListeners","args","prevError","self","error","callNextListener","err","Error","_haltHandlersOnError","call","shift","apply","concat","addListeners","each","event","callbacks","arrayEach","callback","addNamedListener","name","addListener","addNamedAsyncListener","addNamedListeners","arguments","prototype","module","exports"],"sources":["/Users/lazarbogdan/test/medicacasa-frontend/node_modules/aws-sdk/lib/sequential_executor.js"],"sourcesContent":["var AWS = require('./core');\n\n/**\n * @api private\n * @!method on(eventName, callback)\n *   Registers an event listener callback for the event given by `eventName`.\n *   Parameters passed to the callback function depend on the individual event\n *   being triggered. See the event documentation for those parameters.\n *\n *   @param eventName [String] the event name to register the listener for\n *   @param callback [Function] the listener callback function\n *   @param toHead [Boolean] attach the listener callback to the head of callback array if set to true.\n *     Default to be false.\n *   @return [AWS.SequentialExecutor] the same object for chaining\n */\nAWS.SequentialExecutor = AWS.util.inherit({\n\n  constructor: function SequentialExecutor() {\n    this._events = {};\n  },\n\n  /**\n   * @api private\n   */\n  listeners: function listeners(eventName) {\n    return this._events[eventName] ? this._events[eventName].slice(0) : [];\n  },\n\n  on: function on(eventName, listener, toHead) {\n    if (this._events[eventName]) {\n      toHead ?\n        this._events[eventName].unshift(listener) :\n        this._events[eventName].push(listener);\n    } else {\n      this._events[eventName] = [listener];\n    }\n    return this;\n  },\n\n  onAsync: function onAsync(eventName, listener, toHead) {\n    listener._isAsync = true;\n    return this.on(eventName, listener, toHead);\n  },\n\n  removeListener: function removeListener(eventName, listener) {\n    var listeners = this._events[eventName];\n    if (listeners) {\n      var length = listeners.length;\n      var position = -1;\n      for (var i = 0; i < length; ++i) {\n        if (listeners[i] === listener) {\n          position = i;\n        }\n      }\n      if (position > -1) {\n        listeners.splice(position, 1);\n      }\n    }\n    return this;\n  },\n\n  removeAllListeners: function removeAllListeners(eventName) {\n    if (eventName) {\n      delete this._events[eventName];\n    } else {\n      this._events = {};\n    }\n    return this;\n  },\n\n  /**\n   * @api private\n   */\n  emit: function emit(eventName, eventArgs, doneCallback) {\n    if (!doneCallback) doneCallback = function() { };\n    var listeners = this.listeners(eventName);\n    var count = listeners.length;\n    this.callListeners(listeners, eventArgs, doneCallback);\n    return count > 0;\n  },\n\n  /**\n   * @api private\n   */\n  callListeners: function callListeners(listeners, args, doneCallback, prevError) {\n    var self = this;\n    var error = prevError || null;\n\n    function callNextListener(err) {\n      if (err) {\n        error = AWS.util.error(error || new Error(), err);\n        if (self._haltHandlersOnError) {\n          return doneCallback.call(self, error);\n        }\n      }\n      self.callListeners(listeners, args, doneCallback, error);\n    }\n\n    while (listeners.length > 0) {\n      var listener = listeners.shift();\n      if (listener._isAsync) { // asynchronous listener\n        listener.apply(self, args.concat([callNextListener]));\n        return; // stop here, callNextListener will continue\n      } else { // synchronous listener\n        try {\n          listener.apply(self, args);\n        } catch (err) {\n          error = AWS.util.error(error || new Error(), err);\n        }\n        if (error && self._haltHandlersOnError) {\n          doneCallback.call(self, error);\n          return;\n        }\n      }\n    }\n    doneCallback.call(self, error);\n  },\n\n  /**\n   * Adds or copies a set of listeners from another list of\n   * listeners or SequentialExecutor object.\n   *\n   * @param listeners [map<String,Array<Function>>, AWS.SequentialExecutor]\n   *   a list of events and callbacks, or an event emitter object\n   *   containing listeners to add to this emitter object.\n   * @return [AWS.SequentialExecutor] the emitter object, for chaining.\n   * @example Adding listeners from a map of listeners\n   *   emitter.addListeners({\n   *     event1: [function() { ... }, function() { ... }],\n   *     event2: [function() { ... }]\n   *   });\n   *   emitter.emit('event1'); // emitter has event1\n   *   emitter.emit('event2'); // emitter has event2\n   * @example Adding listeners from another emitter object\n   *   var emitter1 = new AWS.SequentialExecutor();\n   *   emitter1.on('event1', function() { ... });\n   *   emitter1.on('event2', function() { ... });\n   *   var emitter2 = new AWS.SequentialExecutor();\n   *   emitter2.addListeners(emitter1);\n   *   emitter2.emit('event1'); // emitter2 has event1\n   *   emitter2.emit('event2'); // emitter2 has event2\n   */\n  addListeners: function addListeners(listeners) {\n    var self = this;\n\n    // extract listeners if parameter is an SequentialExecutor object\n    if (listeners._events) listeners = listeners._events;\n\n    AWS.util.each(listeners, function(event, callbacks) {\n      if (typeof callbacks === 'function') callbacks = [callbacks];\n      AWS.util.arrayEach(callbacks, function(callback) {\n        self.on(event, callback);\n      });\n    });\n\n    return self;\n  },\n\n  /**\n   * Registers an event with {on} and saves the callback handle function\n   * as a property on the emitter object using a given `name`.\n   *\n   * @param name [String] the property name to set on this object containing\n   *   the callback function handle so that the listener can be removed in\n   *   the future.\n   * @param (see on)\n   * @return (see on)\n   * @example Adding a named listener DATA_CALLBACK\n   *   var listener = function() { doSomething(); };\n   *   emitter.addNamedListener('DATA_CALLBACK', 'data', listener);\n   *\n   *   // the following prints: true\n   *   console.log(emitter.DATA_CALLBACK == listener);\n   */\n  addNamedListener: function addNamedListener(name, eventName, callback, toHead) {\n    this[name] = callback;\n    this.addListener(eventName, callback, toHead);\n    return this;\n  },\n\n  /**\n   * @api private\n   */\n  addNamedAsyncListener: function addNamedAsyncListener(name, eventName, callback, toHead) {\n    callback._isAsync = true;\n    return this.addNamedListener(name, eventName, callback, toHead);\n  },\n\n  /**\n   * Helper method to add a set of named listeners using\n   * {addNamedListener}. The callback contains a parameter\n   * with a handle to the `addNamedListener` method.\n   *\n   * @callback callback function(add)\n   *   The callback function is called immediately in order to provide\n   *   the `add` function to the block. This simplifies the addition of\n   *   a large group of named listeners.\n   *   @param add [Function] the {addNamedListener} function to call\n   *     when registering listeners.\n   * @example Adding a set of named listeners\n   *   emitter.addNamedListeners(function(add) {\n   *     add('DATA_CALLBACK', 'data', function() { ... });\n   *     add('OTHER', 'otherEvent', function() { ... });\n   *     add('LAST', 'lastEvent', function() { ... });\n   *   });\n   *\n   *   // these properties are now set:\n   *   emitter.DATA_CALLBACK;\n   *   emitter.OTHER;\n   *   emitter.LAST;\n   */\n  addNamedListeners: function addNamedListeners(callback) {\n    var self = this;\n    callback(\n      function() {\n        self.addNamedListener.apply(self, arguments);\n      },\n      function() {\n        self.addNamedAsyncListener.apply(self, arguments);\n      }\n    );\n    return this;\n  }\n});\n\n/**\n * {on} is the prefered method.\n * @api private\n */\nAWS.SequentialExecutor.prototype.addListener = AWS.SequentialExecutor.prototype.on;\n\n/**\n * @api private\n */\nmodule.exports = AWS.SequentialExecutor;\n"],"mappings":"AAAA,IAAIA,GAAG,GAAGC,OAAO,CAAC,QAAD,CAAjB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAD,GAAG,CAACE,kBAAJ,GAAyBF,GAAG,CAACG,IAAJ,CAASC,OAAT,CAAiB;EAExCC,WAAW,EAAE,SAASH,kBAAT,GAA8B;IACzC,KAAKI,OAAL,GAAe,EAAf;EACD,CAJuC;;EAMxC;AACF;AACA;EACEC,SAAS,EAAE,SAASA,SAAT,CAAmBC,SAAnB,EAA8B;IACvC,OAAO,KAAKF,OAAL,CAAaE,SAAb,IAA0B,KAAKF,OAAL,CAAaE,SAAb,EAAwBC,KAAxB,CAA8B,CAA9B,CAA1B,GAA6D,EAApE;EACD,CAXuC;EAaxCC,EAAE,EAAE,SAASA,EAAT,CAAYF,SAAZ,EAAuBG,QAAvB,EAAiCC,MAAjC,EAAyC;IAC3C,IAAI,KAAKN,OAAL,CAAaE,SAAb,CAAJ,EAA6B;MAC3BI,MAAM,GACJ,KAAKN,OAAL,CAAaE,SAAb,EAAwBK,OAAxB,CAAgCF,QAAhC,CADI,GAEJ,KAAKL,OAAL,CAAaE,SAAb,EAAwBM,IAAxB,CAA6BH,QAA7B,CAFF;IAGD,CAJD,MAIO;MACL,KAAKL,OAAL,CAAaE,SAAb,IAA0B,CAACG,QAAD,CAA1B;IACD;;IACD,OAAO,IAAP;EACD,CAtBuC;EAwBxCI,OAAO,EAAE,SAASA,OAAT,CAAiBP,SAAjB,EAA4BG,QAA5B,EAAsCC,MAAtC,EAA8C;IACrDD,QAAQ,CAACK,QAAT,GAAoB,IAApB;IACA,OAAO,KAAKN,EAAL,CAAQF,SAAR,EAAmBG,QAAnB,EAA6BC,MAA7B,CAAP;EACD,CA3BuC;EA6BxCK,cAAc,EAAE,SAASA,cAAT,CAAwBT,SAAxB,EAAmCG,QAAnC,EAA6C;IAC3D,IAAIJ,SAAS,GAAG,KAAKD,OAAL,CAAaE,SAAb,CAAhB;;IACA,IAAID,SAAJ,EAAe;MACb,IAAIW,MAAM,GAAGX,SAAS,CAACW,MAAvB;MACA,IAAIC,QAAQ,GAAG,CAAC,CAAhB;;MACA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,MAApB,EAA4B,EAAEE,CAA9B,EAAiC;QAC/B,IAAIb,SAAS,CAACa,CAAD,CAAT,KAAiBT,QAArB,EAA+B;UAC7BQ,QAAQ,GAAGC,CAAX;QACD;MACF;;MACD,IAAID,QAAQ,GAAG,CAAC,CAAhB,EAAmB;QACjBZ,SAAS,CAACc,MAAV,CAAiBF,QAAjB,EAA2B,CAA3B;MACD;IACF;;IACD,OAAO,IAAP;EACD,CA5CuC;EA8CxCG,kBAAkB,EAAE,SAASA,kBAAT,CAA4Bd,SAA5B,EAAuC;IACzD,IAAIA,SAAJ,EAAe;MACb,OAAO,KAAKF,OAAL,CAAaE,SAAb,CAAP;IACD,CAFD,MAEO;MACL,KAAKF,OAAL,GAAe,EAAf;IACD;;IACD,OAAO,IAAP;EACD,CArDuC;;EAuDxC;AACF;AACA;EACEiB,IAAI,EAAE,SAASA,IAAT,CAAcf,SAAd,EAAyBgB,SAAzB,EAAoCC,YAApC,EAAkD;IACtD,IAAI,CAACA,YAAL,EAAmBA,YAAY,GAAG,wBAAW,CAAG,CAA7B;IACnB,IAAIlB,SAAS,GAAG,KAAKA,SAAL,CAAeC,SAAf,CAAhB;IACA,IAAIkB,KAAK,GAAGnB,SAAS,CAACW,MAAtB;IACA,KAAKS,aAAL,CAAmBpB,SAAnB,EAA8BiB,SAA9B,EAAyCC,YAAzC;IACA,OAAOC,KAAK,GAAG,CAAf;EACD,CAhEuC;;EAkExC;AACF;AACA;EACEC,aAAa,EAAE,SAASA,aAAT,CAAuBpB,SAAvB,EAAkCqB,IAAlC,EAAwCH,YAAxC,EAAsDI,SAAtD,EAAiE;IAC9E,IAAIC,IAAI,GAAG,IAAX;IACA,IAAIC,KAAK,GAAGF,SAAS,IAAI,IAAzB;;IAEA,SAASG,gBAAT,CAA0BC,GAA1B,EAA+B;MAC7B,IAAIA,GAAJ,EAAS;QACPF,KAAK,GAAG/B,GAAG,CAACG,IAAJ,CAAS4B,KAAT,CAAeA,KAAK,IAAI,IAAIG,KAAJ,EAAxB,EAAqCD,GAArC,CAAR;;QACA,IAAIH,IAAI,CAACK,oBAAT,EAA+B;UAC7B,OAAOV,YAAY,CAACW,IAAb,CAAkBN,IAAlB,EAAwBC,KAAxB,CAAP;QACD;MACF;;MACDD,IAAI,CAACH,aAAL,CAAmBpB,SAAnB,EAA8BqB,IAA9B,EAAoCH,YAApC,EAAkDM,KAAlD;IACD;;IAED,OAAOxB,SAAS,CAACW,MAAV,GAAmB,CAA1B,EAA6B;MAC3B,IAAIP,QAAQ,GAAGJ,SAAS,CAAC8B,KAAV,EAAf;;MACA,IAAI1B,QAAQ,CAACK,QAAb,EAAuB;QAAE;QACvBL,QAAQ,CAAC2B,KAAT,CAAeR,IAAf,EAAqBF,IAAI,CAACW,MAAL,CAAY,CAACP,gBAAD,CAAZ,CAArB;QACA,OAFqB,CAEb;MACT,CAHD,MAGO;QAAE;QACP,IAAI;UACFrB,QAAQ,CAAC2B,KAAT,CAAeR,IAAf,EAAqBF,IAArB;QACD,CAFD,CAEE,OAAOK,GAAP,EAAY;UACZF,KAAK,GAAG/B,GAAG,CAACG,IAAJ,CAAS4B,KAAT,CAAeA,KAAK,IAAI,IAAIG,KAAJ,EAAxB,EAAqCD,GAArC,CAAR;QACD;;QACD,IAAIF,KAAK,IAAID,IAAI,CAACK,oBAAlB,EAAwC;UACtCV,YAAY,CAACW,IAAb,CAAkBN,IAAlB,EAAwBC,KAAxB;UACA;QACD;MACF;IACF;;IACDN,YAAY,CAACW,IAAb,CAAkBN,IAAlB,EAAwBC,KAAxB;EACD,CArGuC;;EAuGxC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACES,YAAY,EAAE,SAASA,YAAT,CAAsBjC,SAAtB,EAAiC;IAC7C,IAAIuB,IAAI,GAAG,IAAX,CAD6C,CAG7C;;IACA,IAAIvB,SAAS,CAACD,OAAd,EAAuBC,SAAS,GAAGA,SAAS,CAACD,OAAtB;IAEvBN,GAAG,CAACG,IAAJ,CAASsC,IAAT,CAAclC,SAAd,EAAyB,UAASmC,KAAT,EAAgBC,SAAhB,EAA2B;MAClD,IAAI,OAAOA,SAAP,KAAqB,UAAzB,EAAqCA,SAAS,GAAG,CAACA,SAAD,CAAZ;MACrC3C,GAAG,CAACG,IAAJ,CAASyC,SAAT,CAAmBD,SAAnB,EAA8B,UAASE,QAAT,EAAmB;QAC/Cf,IAAI,CAACpB,EAAL,CAAQgC,KAAR,EAAeG,QAAf;MACD,CAFD;IAGD,CALD;IAOA,OAAOf,IAAP;EACD,CA7IuC;;EA+IxC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEgB,gBAAgB,EAAE,SAASA,gBAAT,CAA0BC,IAA1B,EAAgCvC,SAAhC,EAA2CqC,QAA3C,EAAqDjC,MAArD,EAA6D;IAC7E,KAAKmC,IAAL,IAAaF,QAAb;IACA,KAAKG,WAAL,CAAiBxC,SAAjB,EAA4BqC,QAA5B,EAAsCjC,MAAtC;IACA,OAAO,IAAP;EACD,CAnKuC;;EAqKxC;AACF;AACA;EACEqC,qBAAqB,EAAE,SAASA,qBAAT,CAA+BF,IAA/B,EAAqCvC,SAArC,EAAgDqC,QAAhD,EAA0DjC,MAA1D,EAAkE;IACvFiC,QAAQ,CAAC7B,QAAT,GAAoB,IAApB;IACA,OAAO,KAAK8B,gBAAL,CAAsBC,IAAtB,EAA4BvC,SAA5B,EAAuCqC,QAAvC,EAAiDjC,MAAjD,CAAP;EACD,CA3KuC;;EA6KxC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEsC,iBAAiB,EAAE,SAASA,iBAAT,CAA2BL,QAA3B,EAAqC;IACtD,IAAIf,IAAI,GAAG,IAAX;IACAe,QAAQ,CACN,YAAW;MACTf,IAAI,CAACgB,gBAAL,CAAsBR,KAAtB,CAA4BR,IAA5B,EAAkCqB,SAAlC;IACD,CAHK,EAIN,YAAW;MACTrB,IAAI,CAACmB,qBAAL,CAA2BX,KAA3B,CAAiCR,IAAjC,EAAuCqB,SAAvC;IACD,CANK,CAAR;IAQA,OAAO,IAAP;EACD;AA/MuC,CAAjB,CAAzB;AAkNA;AACA;AACA;AACA;;AACAnD,GAAG,CAACE,kBAAJ,CAAuBkD,SAAvB,CAAiCJ,WAAjC,GAA+ChD,GAAG,CAACE,kBAAJ,CAAuBkD,SAAvB,CAAiC1C,EAAhF;AAEA;AACA;AACA;;AACA2C,MAAM,CAACC,OAAP,GAAiBtD,GAAG,CAACE,kBAArB"},"metadata":{},"sourceType":"script"}