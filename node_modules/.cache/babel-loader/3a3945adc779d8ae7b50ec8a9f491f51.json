{"ast":null,"code":"var Hmac = require('./browserHmac');\n\nvar Md5 = require('./browserMd5');\n\nvar Sha1 = require('./browserSha1');\n\nvar Sha256 = require('./browserSha256');\n/**\n * @api private\n */\n\n\nmodule.exports = exports = {\n  createHash: function createHash(alg) {\n    alg = alg.toLowerCase();\n\n    if (alg === 'md5') {\n      return new Md5();\n    } else if (alg === 'sha256') {\n      return new Sha256();\n    } else if (alg === 'sha1') {\n      return new Sha1();\n    }\n\n    throw new Error('Hash algorithm ' + alg + ' is not supported in the browser SDK');\n  },\n  createHmac: function createHmac(alg, key) {\n    alg = alg.toLowerCase();\n\n    if (alg === 'md5') {\n      return new Hmac(Md5, key);\n    } else if (alg === 'sha256') {\n      return new Hmac(Sha256, key);\n    } else if (alg === 'sha1') {\n      return new Hmac(Sha1, key);\n    }\n\n    throw new Error('HMAC algorithm ' + alg + ' is not supported in the browser SDK');\n  },\n  createSign: function createSign() {\n    throw new Error('createSign is not implemented in the browser');\n  }\n};","map":{"version":3,"names":["Hmac","require","Md5","Sha1","Sha256","module","exports","createHash","alg","toLowerCase","Error","createHmac","key","createSign"],"sources":["/Users/lazarbogdan/test/medicacasa-frontend/node_modules/aws-sdk/lib/browserCryptoLib.js"],"sourcesContent":["var Hmac = require('./browserHmac');\nvar Md5 = require('./browserMd5');\nvar Sha1 = require('./browserSha1');\nvar Sha256 = require('./browserSha256');\n\n/**\n * @api private\n */\nmodule.exports = exports = {\n    createHash: function createHash(alg) {\n      alg = alg.toLowerCase();\n      if (alg === 'md5') {\n        return new Md5();\n      } else if (alg === 'sha256') {\n        return new Sha256();\n      } else if (alg === 'sha1') {\n        return new Sha1();\n      }\n\n      throw new Error('Hash algorithm ' + alg + ' is not supported in the browser SDK');\n    },\n    createHmac: function createHmac(alg, key) {\n      alg = alg.toLowerCase();\n      if (alg === 'md5') {\n        return new Hmac(Md5, key);\n      } else if (alg === 'sha256') {\n        return new Hmac(Sha256, key);\n      } else if (alg === 'sha1') {\n        return new Hmac(Sha1, key);\n      }\n\n      throw new Error('HMAC algorithm ' + alg + ' is not supported in the browser SDK');\n    },\n    createSign: function() {\n      throw new Error('createSign is not implemented in the browser');\n    }\n  };\n"],"mappings":"AAAA,IAAIA,IAAI,GAAGC,OAAO,CAAC,eAAD,CAAlB;;AACA,IAAIC,GAAG,GAAGD,OAAO,CAAC,cAAD,CAAjB;;AACA,IAAIE,IAAI,GAAGF,OAAO,CAAC,eAAD,CAAlB;;AACA,IAAIG,MAAM,GAAGH,OAAO,CAAC,iBAAD,CAApB;AAEA;AACA;AACA;;;AACAI,MAAM,CAACC,OAAP,GAAiBA,OAAO,GAAG;EACvBC,UAAU,EAAE,SAASA,UAAT,CAAoBC,GAApB,EAAyB;IACnCA,GAAG,GAAGA,GAAG,CAACC,WAAJ,EAAN;;IACA,IAAID,GAAG,KAAK,KAAZ,EAAmB;MACjB,OAAO,IAAIN,GAAJ,EAAP;IACD,CAFD,MAEO,IAAIM,GAAG,KAAK,QAAZ,EAAsB;MAC3B,OAAO,IAAIJ,MAAJ,EAAP;IACD,CAFM,MAEA,IAAII,GAAG,KAAK,MAAZ,EAAoB;MACzB,OAAO,IAAIL,IAAJ,EAAP;IACD;;IAED,MAAM,IAAIO,KAAJ,CAAU,oBAAoBF,GAApB,GAA0B,sCAApC,CAAN;EACD,CAZsB;EAavBG,UAAU,EAAE,SAASA,UAAT,CAAoBH,GAApB,EAAyBI,GAAzB,EAA8B;IACxCJ,GAAG,GAAGA,GAAG,CAACC,WAAJ,EAAN;;IACA,IAAID,GAAG,KAAK,KAAZ,EAAmB;MACjB,OAAO,IAAIR,IAAJ,CAASE,GAAT,EAAcU,GAAd,CAAP;IACD,CAFD,MAEO,IAAIJ,GAAG,KAAK,QAAZ,EAAsB;MAC3B,OAAO,IAAIR,IAAJ,CAASI,MAAT,EAAiBQ,GAAjB,CAAP;IACD,CAFM,MAEA,IAAIJ,GAAG,KAAK,MAAZ,EAAoB;MACzB,OAAO,IAAIR,IAAJ,CAASG,IAAT,EAAeS,GAAf,CAAP;IACD;;IAED,MAAM,IAAIF,KAAJ,CAAU,oBAAoBF,GAApB,GAA0B,sCAApC,CAAN;EACD,CAxBsB;EAyBvBK,UAAU,EAAE,sBAAW;IACrB,MAAM,IAAIH,KAAJ,CAAU,8CAAV,CAAN;EACD;AA3BsB,CAA3B"},"metadata":{},"sourceType":"script"}