{"ast":null,"code":"import axios from \"axios\";\nimport CookieService from \"./CookieService\";\nimport URL from \"./BackEndURL\";\n\nclass AuthService {\n  async doUserLogin(email, password) {\n    // try{\n    //     // de hardcodat link ul\n    //     const response = await axios.post(URL + \"auth/login\", {email: email, password:password});\n    //     return response.data;\n    // }catch(err){\n    //     //console.error(\"Error\", err.response);\n    //     return false;\n    // }\n    let x;\n    await fetch(URL + \"auth/login\", {\n      method: 'POST',\n      headers: {\n        email: email,\n        password: password\n      },\n      body: JSON.stringify({\n        email: email,\n        password: password\n      })\n    }).then(response => response.json()).then(response => {\n      x = response;\n    }).catch(err => {\n      x = err;\n      console.error(err);\n    });\n    return x;\n  }\n\n  async doLoginFacebookGoogle(email) {\n    // try{\n    //     // de hardcodat link ul\n    //     const response = await axios.post(URL + \"auth/loginFacebookGoogle\", {email: email});\n    //     return response.data;\n    // }catch(err){\n    //     //console.error(\"Error\", err.response);\n    //     return false;\n    // }\n    let x;\n    await fetch(URL + \"auth/loginFacebookGoogle\", {\n      method: 'POST',\n      headers: {\n        email: email\n      },\n      body: {\n        email: email\n      }\n    }).then(response => response.json()).then(response => {\n      x = response;\n    }).catch(err => {\n      x = err;\n      console.error(err);\n    });\n    return x;\n  }\n\n  async doDoctorLogin(email, password) {\n    // try{\n    //     const response = await axios.post(URL + \"auth/doctorLogin\", {email: email, password:password});\n    //     return response.data;\n    // }catch(err){\n    //     //console.error(\"Error\", err.response);\n    //     return false;\n    // }\n    let x;\n    await fetch(URL + \"auth/doctorLogin\", {\n      method: 'POST',\n      headers: {\n        email: email,\n        password: password\n      },\n      body: {\n        email: email,\n        password: password\n      }\n    }).then(response => response.json()).then(response => {\n      x = response;\n    }).catch(err => {\n      x = err;\n      console.error(err);\n    });\n    return x;\n  }\n\n  handleLoginSucces(id, role, uid) {\n    console.log(id);\n    const options = {\n      path: \"/\"\n    };\n    CookieService.set(\"id\", id, options);\n    CookieService.set(\"login\", true, options);\n    CookieService.set(\"role\", role, options);\n    CookieService.set(\"uid\", uid, options);\n    return true;\n  }\n\n  handleGetLoginStatus() {\n    return CookieService.get(\"login\");\n  }\n\n  handleGetRole() {\n    return CookieService.get(\"role\");\n  }\n\n  handleGetUid() {\n    return CookieService.get(\"uid\");\n  }\n\n  handleLogOut() {\n    CookieService.remove(\"id\");\n    CookieService.remove(\"role\");\n    CookieService.set(\"login\", false);\n  }\n\n  async registerUser(username, email, password, role, age, img, uid) {\n    // try{\n    //     // de hardcodat link ul\n    //     const response = await axios.post(URL + \"auth/register\", {username:username, email:email, password:password, role:role, age:age, img:img, uid:uid});\n    //     return response;\n    // }catch(err){\n    //     console.error(\"Error\", err.response);\n    //     return false;\n    // }\n    let x;\n    await fetch(URL + \"auth/register\", {\n      method: 'POST',\n      headers: {\n        username: username,\n        email: email,\n        password: password,\n        role: role,\n        age: age,\n        img: img,\n        uid: uid\n      },\n      body: {\n        username: username,\n        email: email,\n        password: password,\n        role: role,\n        age: age,\n        img: img,\n        uid: uid\n      }\n    }).then(response => response.json()).then(response => {\n      x = response;\n    }).catch(err => {\n      x = err;\n      console.error(err);\n    });\n    return x;\n  }\n\n}\n\nexport default new AuthService();","map":{"version":3,"names":["axios","CookieService","URL","AuthService","doUserLogin","email","password","x","fetch","method","headers","body","JSON","stringify","then","response","json","catch","err","console","error","doLoginFacebookGoogle","doDoctorLogin","handleLoginSucces","id","role","uid","log","options","path","set","handleGetLoginStatus","get","handleGetRole","handleGetUid","handleLogOut","remove","registerUser","username","age","img"],"sources":["/Users/lazarbogdan/test/medicacasa-frontend/src/services/AuthService.js"],"sourcesContent":["import axios from \"axios\";\nimport CookieService from \"./CookieService\";\nimport URL from \"./BackEndURL\";\n\nclass AuthService {\n    async doUserLogin(email,password){\n        // try{\n        //     // de hardcodat link ul\n        //     const response = await axios.post(URL + \"auth/login\", {email: email, password:password});\n        //     return response.data;\n        // }catch(err){\n        //     //console.error(\"Error\", err.response);\n        //     return false;\n        // }\n        let x;\n        await fetch(URL + \"auth/login\", {\n            method: 'POST',\n            headers: {\n                email: email,\n                password:password\n            },\n            body: JSON.stringify({\n                email: email,\n                password:password\n            })\n        })\n        .then(response => response.json())\n        .then(response => { x = response; })\n        .catch(err => { x = err; console.error(err)});\n        return x;\n    }\n\n    async doLoginFacebookGoogle(email){\n        // try{\n        //     // de hardcodat link ul\n        //     const response = await axios.post(URL + \"auth/loginFacebookGoogle\", {email: email});\n        //     return response.data;\n        // }catch(err){\n        //     //console.error(\"Error\", err.response);\n        //     return false;\n        // }\n        let x;\n        await fetch(URL + \"auth/loginFacebookGoogle\", {\n            method: 'POST',\n            headers: {\n                email:email\n            },\n            body: {\n                email: email,\n            }\n        })\n        .then(response => response.json())\n        .then(response => { x = response; })\n        .catch(err => { x = err; console.error(err)});\n        return x;\n    }\n\n    async doDoctorLogin(email,password){\n        // try{\n        //     const response = await axios.post(URL + \"auth/doctorLogin\", {email: email, password:password});\n        //     return response.data;\n        // }catch(err){\n        //     //console.error(\"Error\", err.response);\n        //     return false;\n        // }\n        let x;\n        await fetch(URL + \"auth/doctorLogin\", {\n            method: 'POST',\n            headers: {\n                email: email,\n                password:password\n            },\n            body: {\n                email: email,\n                password:password\n            }\n        })\n        .then(response => response.json())\n        .then(response => { x = response; })\n        .catch(err => { x = err; console.error(err)});\n        return x;\n    }\n\n    handleLoginSucces(id,role,uid){\n        console.log(id);\n        const options = {path :\"/\"};\n        CookieService.set(\"id\", id,options);\n        CookieService.set(\"login\",true,options);\n        CookieService.set(\"role\",role,options);\n        CookieService.set(\"uid\",uid,options);\n        return true;\n    }\n\n\n    handleGetLoginStatus(){\n        return CookieService.get(\"login\");\n    }\n\n    handleGetRole(){\n        return CookieService.get(\"role\");\n    }\n\n    handleGetUid(){\n        return CookieService.get(\"uid\");\n    }\n\n    handleLogOut(){\n        CookieService.remove(\"id\");\n        CookieService.remove(\"role\");\n        CookieService.set(\"login\",false);\n    }\n\n    async registerUser(username,email,password,role,age,img,uid){\n        // try{\n        //     // de hardcodat link ul\n        //     const response = await axios.post(URL + \"auth/register\", {username:username, email:email, password:password, role:role, age:age, img:img, uid:uid});\n        //     return response;\n        // }catch(err){\n        //     console.error(\"Error\", err.response);\n        //     return false;\n        // }\n        let x;\n        await fetch(URL + \"auth/register\", {\n            method: 'POST',\n            headers: {\n                username:username, \n                email:email, \n                password:password, \n                role:role, \n                age:age, \n                img:img, \n                uid:uid\n            },\n            body: {\n                username:username, \n                email:email, \n                password:password, \n                role:role, \n                age:age, \n                img:img, \n                uid:uid\n            }\n        })\n        .then(response => response.json())\n        .then(response => { x = response; })\n        .catch(err => { x = err; console.error(err)});\n        return x;\n    }\n}\n\nexport default new AuthService();"],"mappings":"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"},"metadata":{},"sourceType":"module"}