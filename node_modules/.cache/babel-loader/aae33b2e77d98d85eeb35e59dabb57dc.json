{"ast":null,"code":"var AWS = require('./core');\n\nvar inherit = AWS.util.inherit;\n/**\n * The endpoint that a service will talk to, for example,\n * `'https://ec2.ap-southeast-1.amazonaws.com'`. If\n * you need to override an endpoint for a service, you can\n * set the endpoint on a service by passing the endpoint\n * object with the `endpoint` option key:\n *\n * ```javascript\n * var ep = new AWS.Endpoint('awsproxy.example.com');\n * var s3 = new AWS.S3({endpoint: ep});\n * s3.service.endpoint.hostname == 'awsproxy.example.com'\n * ```\n *\n * Note that if you do not specify a protocol, the protocol will\n * be selected based on your current {AWS.config} configuration.\n *\n * @!attribute protocol\n *   @return [String] the protocol (http or https) of the endpoint\n *     URL\n * @!attribute hostname\n *   @return [String] the host portion of the endpoint, e.g.,\n *     example.com\n * @!attribute host\n *   @return [String] the host portion of the endpoint including\n *     the port, e.g., example.com:80\n * @!attribute port\n *   @return [Integer] the port of the endpoint\n * @!attribute href\n *   @return [String] the full URL of the endpoint\n */\n\nAWS.Endpoint = inherit({\n  /**\n   * @overload Endpoint(endpoint)\n   *   Constructs a new endpoint given an endpoint URL. If the\n   *   URL omits a protocol (http or https), the default protocol\n   *   set in the global {AWS.config} will be used.\n   *   @param endpoint [String] the URL to construct an endpoint from\n   */\n  constructor: function Endpoint(endpoint, config) {\n    AWS.util.hideProperties(this, ['slashes', 'auth', 'hash', 'search', 'query']);\n\n    if (typeof endpoint === 'undefined' || endpoint === null) {\n      throw new Error('Invalid endpoint: ' + endpoint);\n    } else if (typeof endpoint !== 'string') {\n      return AWS.util.copy(endpoint);\n    }\n\n    if (!endpoint.match(/^http/)) {\n      var useSSL = config && config.sslEnabled !== undefined ? config.sslEnabled : AWS.config.sslEnabled;\n      endpoint = (useSSL ? 'https' : 'http') + '://' + endpoint;\n    }\n\n    AWS.util.update(this, AWS.util.urlParse(endpoint)); // Ensure the port property is set as an integer\n\n    if (this.port) {\n      this.port = parseInt(this.port, 10);\n    } else {\n      this.port = this.protocol === 'https:' ? 443 : 80;\n    }\n  }\n});\n/**\n * The low level HTTP request object, encapsulating all HTTP header\n * and body data sent by a service request.\n *\n * @!attribute method\n *   @return [String] the HTTP method of the request\n * @!attribute path\n *   @return [String] the path portion of the URI, e.g.,\n *     \"/list/?start=5&num=10\"\n * @!attribute headers\n *   @return [map<String,String>]\n *     a map of header keys and their respective values\n * @!attribute body\n *   @return [String] the request body payload\n * @!attribute endpoint\n *   @return [AWS.Endpoint] the endpoint for the request\n * @!attribute region\n *   @api private\n *   @return [String] the region, for signing purposes only.\n */\n\nAWS.HttpRequest = inherit({\n  /**\n   * @api private\n   */\n  constructor: function HttpRequest(endpoint, region) {\n    endpoint = new AWS.Endpoint(endpoint);\n    this.method = 'POST';\n    this.path = endpoint.path || '/';\n    this.headers = {};\n    this.body = '';\n    this.endpoint = endpoint;\n    this.region = region;\n    this._userAgent = '';\n    this.setUserAgent();\n  },\n\n  /**\n   * @api private\n   */\n  setUserAgent: function setUserAgent() {\n    this._userAgent = this.headers[this.getUserAgentHeaderName()] = AWS.util.userAgent();\n  },\n  getUserAgentHeaderName: function getUserAgentHeaderName() {\n    var prefix = AWS.util.isBrowser() ? 'X-Amz-' : '';\n    return prefix + 'User-Agent';\n  },\n\n  /**\n   * @api private\n   */\n  appendToUserAgent: function appendToUserAgent(agentPartial) {\n    if (typeof agentPartial === 'string' && agentPartial) {\n      this._userAgent += ' ' + agentPartial;\n    }\n\n    this.headers[this.getUserAgentHeaderName()] = this._userAgent;\n  },\n\n  /**\n   * @api private\n   */\n  getUserAgent: function getUserAgent() {\n    return this._userAgent;\n  },\n\n  /**\n   * @return [String] the part of the {path} excluding the\n   *   query string\n   */\n  pathname: function pathname() {\n    return this.path.split('?', 1)[0];\n  },\n\n  /**\n   * @return [String] the query string portion of the {path}\n   */\n  search: function search() {\n    var query = this.path.split('?', 2)[1];\n\n    if (query) {\n      query = AWS.util.queryStringParse(query);\n      return AWS.util.queryParamsToString(query);\n    }\n\n    return '';\n  },\n\n  /**\n   * @api private\n   * update httpRequest endpoint with endpoint string\n   */\n  updateEndpoint: function updateEndpoint(endpointStr) {\n    var newEndpoint = new AWS.Endpoint(endpointStr);\n    this.endpoint = newEndpoint;\n    this.path = newEndpoint.path || '/';\n\n    if (this.headers['Host']) {\n      this.headers['Host'] = newEndpoint.host;\n    }\n  }\n});\n/**\n * The low level HTTP response object, encapsulating all HTTP header\n * and body data returned from the request.\n *\n * @!attribute statusCode\n *   @return [Integer] the HTTP status code of the response (e.g., 200, 404)\n * @!attribute headers\n *   @return [map<String,String>]\n *      a map of response header keys and their respective values\n * @!attribute body\n *   @return [String] the response body payload\n * @!attribute [r] streaming\n *   @return [Boolean] whether this response is being streamed at a low-level.\n *     Defaults to `false` (buffered reads). Do not modify this manually, use\n *     {createUnbufferedStream} to convert the stream to unbuffered mode\n *     instead.\n */\n\nAWS.HttpResponse = inherit({\n  /**\n   * @api private\n   */\n  constructor: function HttpResponse() {\n    this.statusCode = undefined;\n    this.headers = {};\n    this.body = undefined;\n    this.streaming = false;\n    this.stream = null;\n  },\n\n  /**\n   * Disables buffering on the HTTP response and returns the stream for reading.\n   * @return [Stream, XMLHttpRequest, null] the underlying stream object.\n   *   Use this object to directly read data off of the stream.\n   * @note This object is only available after the {AWS.Request~httpHeaders}\n   *   event has fired. This method must be called prior to\n   *   {AWS.Request~httpData}.\n   * @example Taking control of a stream\n   *   request.on('httpHeaders', function(statusCode, headers) {\n   *     if (statusCode < 300) {\n   *       if (headers.etag === 'xyz') {\n   *         // pipe the stream, disabling buffering\n   *         var stream = this.response.httpResponse.createUnbufferedStream();\n   *         stream.pipe(process.stdout);\n   *       } else { // abort this request and set a better error message\n   *         this.abort();\n   *         this.response.error = new Error('Invalid ETag');\n   *       }\n   *     }\n   *   }).send(console.log);\n   */\n  createUnbufferedStream: function createUnbufferedStream() {\n    this.streaming = true;\n    return this.stream;\n  }\n});\nAWS.HttpClient = inherit({});\n/**\n * @api private\n */\n\nAWS.HttpClient.getInstance = function getInstance() {\n  if (this.singleton === undefined) {\n    this.singleton = new this();\n  }\n\n  return this.singleton;\n};","map":{"version":3,"names":["AWS","require","inherit","util","Endpoint","constructor","endpoint","config","hideProperties","Error","copy","match","useSSL","sslEnabled","undefined","update","urlParse","port","parseInt","protocol","HttpRequest","region","method","path","headers","body","_userAgent","setUserAgent","getUserAgentHeaderName","userAgent","prefix","isBrowser","appendToUserAgent","agentPartial","getUserAgent","pathname","split","search","query","queryStringParse","queryParamsToString","updateEndpoint","endpointStr","newEndpoint","host","HttpResponse","statusCode","streaming","stream","createUnbufferedStream","HttpClient","getInstance","singleton"],"sources":["/Users/lazarbogdan/test/medicacasa-frontend/node_modules/aws-sdk/lib/http.js"],"sourcesContent":["var AWS = require('./core');\nvar inherit = AWS.util.inherit;\n\n/**\n * The endpoint that a service will talk to, for example,\n * `'https://ec2.ap-southeast-1.amazonaws.com'`. If\n * you need to override an endpoint for a service, you can\n * set the endpoint on a service by passing the endpoint\n * object with the `endpoint` option key:\n *\n * ```javascript\n * var ep = new AWS.Endpoint('awsproxy.example.com');\n * var s3 = new AWS.S3({endpoint: ep});\n * s3.service.endpoint.hostname == 'awsproxy.example.com'\n * ```\n *\n * Note that if you do not specify a protocol, the protocol will\n * be selected based on your current {AWS.config} configuration.\n *\n * @!attribute protocol\n *   @return [String] the protocol (http or https) of the endpoint\n *     URL\n * @!attribute hostname\n *   @return [String] the host portion of the endpoint, e.g.,\n *     example.com\n * @!attribute host\n *   @return [String] the host portion of the endpoint including\n *     the port, e.g., example.com:80\n * @!attribute port\n *   @return [Integer] the port of the endpoint\n * @!attribute href\n *   @return [String] the full URL of the endpoint\n */\nAWS.Endpoint = inherit({\n\n  /**\n   * @overload Endpoint(endpoint)\n   *   Constructs a new endpoint given an endpoint URL. If the\n   *   URL omits a protocol (http or https), the default protocol\n   *   set in the global {AWS.config} will be used.\n   *   @param endpoint [String] the URL to construct an endpoint from\n   */\n  constructor: function Endpoint(endpoint, config) {\n    AWS.util.hideProperties(this, ['slashes', 'auth', 'hash', 'search', 'query']);\n\n    if (typeof endpoint === 'undefined' || endpoint === null) {\n      throw new Error('Invalid endpoint: ' + endpoint);\n    } else if (typeof endpoint !== 'string') {\n      return AWS.util.copy(endpoint);\n    }\n\n    if (!endpoint.match(/^http/)) {\n      var useSSL = config && config.sslEnabled !== undefined ?\n        config.sslEnabled : AWS.config.sslEnabled;\n      endpoint = (useSSL ? 'https' : 'http') + '://' + endpoint;\n    }\n\n    AWS.util.update(this, AWS.util.urlParse(endpoint));\n\n    // Ensure the port property is set as an integer\n    if (this.port) {\n      this.port = parseInt(this.port, 10);\n    } else {\n      this.port = this.protocol === 'https:' ? 443 : 80;\n    }\n  }\n\n});\n\n/**\n * The low level HTTP request object, encapsulating all HTTP header\n * and body data sent by a service request.\n *\n * @!attribute method\n *   @return [String] the HTTP method of the request\n * @!attribute path\n *   @return [String] the path portion of the URI, e.g.,\n *     \"/list/?start=5&num=10\"\n * @!attribute headers\n *   @return [map<String,String>]\n *     a map of header keys and their respective values\n * @!attribute body\n *   @return [String] the request body payload\n * @!attribute endpoint\n *   @return [AWS.Endpoint] the endpoint for the request\n * @!attribute region\n *   @api private\n *   @return [String] the region, for signing purposes only.\n */\nAWS.HttpRequest = inherit({\n\n  /**\n   * @api private\n   */\n  constructor: function HttpRequest(endpoint, region) {\n    endpoint = new AWS.Endpoint(endpoint);\n    this.method = 'POST';\n    this.path = endpoint.path || '/';\n    this.headers = {};\n    this.body = '';\n    this.endpoint = endpoint;\n    this.region = region;\n    this._userAgent = '';\n    this.setUserAgent();\n  },\n\n  /**\n   * @api private\n   */\n  setUserAgent: function setUserAgent() {\n    this._userAgent = this.headers[this.getUserAgentHeaderName()] = AWS.util.userAgent();\n  },\n\n  getUserAgentHeaderName: function getUserAgentHeaderName() {\n    var prefix = AWS.util.isBrowser() ? 'X-Amz-' : '';\n    return prefix + 'User-Agent';\n  },\n\n  /**\n   * @api private\n   */\n  appendToUserAgent: function appendToUserAgent(agentPartial) {\n    if (typeof agentPartial === 'string' && agentPartial) {\n      this._userAgent += ' ' + agentPartial;\n    }\n    this.headers[this.getUserAgentHeaderName()] = this._userAgent;\n  },\n\n  /**\n   * @api private\n   */\n  getUserAgent: function getUserAgent() {\n    return this._userAgent;\n  },\n\n  /**\n   * @return [String] the part of the {path} excluding the\n   *   query string\n   */\n  pathname: function pathname() {\n    return this.path.split('?', 1)[0];\n  },\n\n  /**\n   * @return [String] the query string portion of the {path}\n   */\n  search: function search() {\n    var query = this.path.split('?', 2)[1];\n    if (query) {\n      query = AWS.util.queryStringParse(query);\n      return AWS.util.queryParamsToString(query);\n    }\n    return '';\n  },\n\n  /**\n   * @api private\n   * update httpRequest endpoint with endpoint string\n   */\n  updateEndpoint: function updateEndpoint(endpointStr) {\n    var newEndpoint = new AWS.Endpoint(endpointStr);\n    this.endpoint = newEndpoint;\n    this.path = newEndpoint.path || '/';\n    if (this.headers['Host']) {\n      this.headers['Host'] = newEndpoint.host;\n    }\n  }\n});\n\n/**\n * The low level HTTP response object, encapsulating all HTTP header\n * and body data returned from the request.\n *\n * @!attribute statusCode\n *   @return [Integer] the HTTP status code of the response (e.g., 200, 404)\n * @!attribute headers\n *   @return [map<String,String>]\n *      a map of response header keys and their respective values\n * @!attribute body\n *   @return [String] the response body payload\n * @!attribute [r] streaming\n *   @return [Boolean] whether this response is being streamed at a low-level.\n *     Defaults to `false` (buffered reads). Do not modify this manually, use\n *     {createUnbufferedStream} to convert the stream to unbuffered mode\n *     instead.\n */\nAWS.HttpResponse = inherit({\n\n  /**\n   * @api private\n   */\n  constructor: function HttpResponse() {\n    this.statusCode = undefined;\n    this.headers = {};\n    this.body = undefined;\n    this.streaming = false;\n    this.stream = null;\n  },\n\n  /**\n   * Disables buffering on the HTTP response and returns the stream for reading.\n   * @return [Stream, XMLHttpRequest, null] the underlying stream object.\n   *   Use this object to directly read data off of the stream.\n   * @note This object is only available after the {AWS.Request~httpHeaders}\n   *   event has fired. This method must be called prior to\n   *   {AWS.Request~httpData}.\n   * @example Taking control of a stream\n   *   request.on('httpHeaders', function(statusCode, headers) {\n   *     if (statusCode < 300) {\n   *       if (headers.etag === 'xyz') {\n   *         // pipe the stream, disabling buffering\n   *         var stream = this.response.httpResponse.createUnbufferedStream();\n   *         stream.pipe(process.stdout);\n   *       } else { // abort this request and set a better error message\n   *         this.abort();\n   *         this.response.error = new Error('Invalid ETag');\n   *       }\n   *     }\n   *   }).send(console.log);\n   */\n  createUnbufferedStream: function createUnbufferedStream() {\n    this.streaming = true;\n    return this.stream;\n  }\n});\n\n\nAWS.HttpClient = inherit({});\n\n/**\n * @api private\n */\nAWS.HttpClient.getInstance = function getInstance() {\n  if (this.singleton === undefined) {\n    this.singleton = new this();\n  }\n  return this.singleton;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}