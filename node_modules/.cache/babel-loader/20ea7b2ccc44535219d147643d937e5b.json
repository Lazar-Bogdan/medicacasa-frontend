{"ast":null,"code":"var AWS = require('../core');\n\nAWS.util.update(AWS.SQS.prototype, {\n  /**\n   * @api private\n   */\n  setupRequestListeners: function setupRequestListeners(request) {\n    request.addListener('build', this.buildEndpoint);\n\n    if (request.service.config.computeChecksums) {\n      if (request.operation === 'sendMessage') {\n        request.addListener('extractData', this.verifySendMessageChecksum);\n      } else if (request.operation === 'sendMessageBatch') {\n        request.addListener('extractData', this.verifySendMessageBatchChecksum);\n      } else if (request.operation === 'receiveMessage') {\n        request.addListener('extractData', this.verifyReceiveMessageChecksum);\n      }\n    }\n  },\n\n  /**\n   * @api private\n   */\n  verifySendMessageChecksum: function verifySendMessageChecksum(response) {\n    if (!response.data) return;\n    var md5 = response.data.MD5OfMessageBody;\n    var body = this.params.MessageBody;\n    var calculatedMd5 = this.service.calculateChecksum(body);\n\n    if (calculatedMd5 !== md5) {\n      var msg = 'Got \"' + response.data.MD5OfMessageBody + '\", expecting \"' + calculatedMd5 + '\".';\n      this.service.throwInvalidChecksumError(response, [response.data.MessageId], msg);\n    }\n  },\n\n  /**\n   * @api private\n   */\n  verifySendMessageBatchChecksum: function verifySendMessageBatchChecksum(response) {\n    if (!response.data) return;\n    var service = this.service;\n    var entries = {};\n    var errors = [];\n    var messageIds = [];\n    AWS.util.arrayEach(response.data.Successful, function (entry) {\n      entries[entry.Id] = entry;\n    });\n    AWS.util.arrayEach(this.params.Entries, function (entry) {\n      if (entries[entry.Id]) {\n        var md5 = entries[entry.Id].MD5OfMessageBody;\n        var body = entry.MessageBody;\n\n        if (!service.isChecksumValid(md5, body)) {\n          errors.push(entry.Id);\n          messageIds.push(entries[entry.Id].MessageId);\n        }\n      }\n    });\n\n    if (errors.length > 0) {\n      service.throwInvalidChecksumError(response, messageIds, 'Invalid messages: ' + errors.join(', '));\n    }\n  },\n\n  /**\n   * @api private\n   */\n  verifyReceiveMessageChecksum: function verifyReceiveMessageChecksum(response) {\n    if (!response.data) return;\n    var service = this.service;\n    var messageIds = [];\n    AWS.util.arrayEach(response.data.Messages, function (message) {\n      var md5 = message.MD5OfBody;\n      var body = message.Body;\n\n      if (!service.isChecksumValid(md5, body)) {\n        messageIds.push(message.MessageId);\n      }\n    });\n\n    if (messageIds.length > 0) {\n      service.throwInvalidChecksumError(response, messageIds, 'Invalid messages: ' + messageIds.join(', '));\n    }\n  },\n\n  /**\n   * @api private\n   */\n  throwInvalidChecksumError: function throwInvalidChecksumError(response, ids, message) {\n    response.error = AWS.util.error(new Error(), {\n      retryable: true,\n      code: 'InvalidChecksum',\n      messageIds: ids,\n      message: response.request.operation + ' returned an invalid MD5 response. ' + message\n    });\n  },\n\n  /**\n   * @api private\n   */\n  isChecksumValid: function isChecksumValid(checksum, data) {\n    return this.calculateChecksum(data) === checksum;\n  },\n\n  /**\n   * @api private\n   */\n  calculateChecksum: function calculateChecksum(data) {\n    return AWS.util.crypto.md5(data, 'hex');\n  },\n\n  /**\n   * @api private\n   */\n  buildEndpoint: function buildEndpoint(request) {\n    var url = request.httpRequest.params.QueueUrl;\n\n    if (url) {\n      request.httpRequest.endpoint = new AWS.Endpoint(url); // signature version 4 requires the region name to be set,\n      // sqs queue urls contain the region name\n\n      var matches = request.httpRequest.endpoint.host.match(/^sqs\\.(.+?)\\./);\n      if (matches) request.httpRequest.region = matches[1];\n    }\n  }\n});","map":{"version":3,"names":["AWS","require","util","update","SQS","prototype","setupRequestListeners","request","addListener","buildEndpoint","service","config","computeChecksums","operation","verifySendMessageChecksum","verifySendMessageBatchChecksum","verifyReceiveMessageChecksum","response","data","md5","MD5OfMessageBody","body","params","MessageBody","calculatedMd5","calculateChecksum","msg","throwInvalidChecksumError","MessageId","entries","errors","messageIds","arrayEach","Successful","entry","Id","Entries","isChecksumValid","push","length","join","Messages","message","MD5OfBody","Body","ids","error","Error","retryable","code","checksum","crypto","url","httpRequest","QueueUrl","endpoint","Endpoint","matches","host","match","region"],"sources":["/Users/lazarbogdan/test/medicacasa-frontend/medicacasa-frontend/node_modules/aws-sdk/lib/services/sqs.js"],"sourcesContent":["var AWS = require('../core');\n\nAWS.util.update(AWS.SQS.prototype, {\n  /**\n   * @api private\n   */\n  setupRequestListeners: function setupRequestListeners(request) {\n    request.addListener('build', this.buildEndpoint);\n\n    if (request.service.config.computeChecksums) {\n      if (request.operation === 'sendMessage') {\n        request.addListener('extractData', this.verifySendMessageChecksum);\n      } else if (request.operation === 'sendMessageBatch') {\n        request.addListener('extractData', this.verifySendMessageBatchChecksum);\n      } else if (request.operation === 'receiveMessage') {\n        request.addListener('extractData', this.verifyReceiveMessageChecksum);\n      }\n    }\n  },\n\n  /**\n   * @api private\n   */\n  verifySendMessageChecksum: function verifySendMessageChecksum(response) {\n    if (!response.data) return;\n\n    var md5 = response.data.MD5OfMessageBody;\n    var body = this.params.MessageBody;\n    var calculatedMd5 = this.service.calculateChecksum(body);\n    if (calculatedMd5 !== md5) {\n      var msg = 'Got \"' + response.data.MD5OfMessageBody +\n        '\", expecting \"' + calculatedMd5 + '\".';\n      this.service.throwInvalidChecksumError(response,\n        [response.data.MessageId], msg);\n    }\n  },\n\n  /**\n   * @api private\n   */\n  verifySendMessageBatchChecksum: function verifySendMessageBatchChecksum(response) {\n    if (!response.data) return;\n\n    var service = this.service;\n    var entries = {};\n    var errors = [];\n    var messageIds = [];\n    AWS.util.arrayEach(response.data.Successful, function (entry) {\n      entries[entry.Id] = entry;\n    });\n    AWS.util.arrayEach(this.params.Entries, function (entry) {\n      if (entries[entry.Id]) {\n        var md5 = entries[entry.Id].MD5OfMessageBody;\n        var body = entry.MessageBody;\n        if (!service.isChecksumValid(md5, body)) {\n          errors.push(entry.Id);\n          messageIds.push(entries[entry.Id].MessageId);\n        }\n      }\n    });\n\n    if (errors.length > 0) {\n      service.throwInvalidChecksumError(response, messageIds,\n        'Invalid messages: ' + errors.join(', '));\n    }\n  },\n\n  /**\n   * @api private\n   */\n  verifyReceiveMessageChecksum: function verifyReceiveMessageChecksum(response) {\n    if (!response.data) return;\n\n    var service = this.service;\n    var messageIds = [];\n    AWS.util.arrayEach(response.data.Messages, function(message) {\n      var md5 = message.MD5OfBody;\n      var body = message.Body;\n      if (!service.isChecksumValid(md5, body)) {\n        messageIds.push(message.MessageId);\n      }\n    });\n\n    if (messageIds.length > 0) {\n      service.throwInvalidChecksumError(response, messageIds,\n        'Invalid messages: ' + messageIds.join(', '));\n    }\n  },\n\n  /**\n   * @api private\n   */\n  throwInvalidChecksumError: function throwInvalidChecksumError(response, ids, message) {\n    response.error = AWS.util.error(new Error(), {\n      retryable: true,\n      code: 'InvalidChecksum',\n      messageIds: ids,\n      message: response.request.operation +\n               ' returned an invalid MD5 response. ' + message\n    });\n  },\n\n  /**\n   * @api private\n   */\n  isChecksumValid: function isChecksumValid(checksum, data) {\n    return this.calculateChecksum(data) === checksum;\n  },\n\n  /**\n   * @api private\n   */\n  calculateChecksum: function calculateChecksum(data) {\n    return AWS.util.crypto.md5(data, 'hex');\n  },\n\n  /**\n   * @api private\n   */\n  buildEndpoint: function buildEndpoint(request) {\n    var url = request.httpRequest.params.QueueUrl;\n    if (url) {\n      request.httpRequest.endpoint = new AWS.Endpoint(url);\n\n      // signature version 4 requires the region name to be set,\n      // sqs queue urls contain the region name\n      var matches = request.httpRequest.endpoint.host.match(/^sqs\\.(.+?)\\./);\n      if (matches) request.httpRequest.region = matches[1];\n    }\n  }\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}