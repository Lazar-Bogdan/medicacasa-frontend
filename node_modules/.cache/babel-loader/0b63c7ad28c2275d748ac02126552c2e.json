{"ast":null,"code":"var AWS = require('../core');\n\nvar STS = require('../../clients/sts');\n/**\n * Represents credentials retrieved from STS SAML support.\n *\n * By default this provider gets credentials using the\n * {AWS.STS.assumeRoleWithSAML} service operation. This operation\n * requires a `RoleArn` containing the ARN of the IAM trust policy for the\n * application for which credentials will be given, as well as a `PrincipalArn`\n * representing the ARN for the SAML identity provider. In addition, the\n * `SAMLAssertion` must be set to the token provided by the identity\n * provider. See {constructor} for an example on creating a credentials\n * object with proper `RoleArn`, `PrincipalArn`, and `SAMLAssertion` values.\n *\n * ## Refreshing Credentials from Identity Service\n *\n * In addition to AWS credentials expiring after a given amount of time, the\n * login token from the identity provider will also expire. Once this token\n * expires, it will not be usable to refresh AWS credentials, and another\n * token will be needed. The SDK does not manage refreshing of the token value,\n * but this can be done through a \"refresh token\" supported by most identity\n * providers. Consult the documentation for the identity provider for refreshing\n * tokens. Once the refreshed token is acquired, you should make sure to update\n * this new token in the credentials object's {params} property. The following\n * code will update the SAMLAssertion, assuming you have retrieved an updated\n * token from the identity provider:\n *\n * ```javascript\n * AWS.config.credentials.params.SAMLAssertion = updatedToken;\n * ```\n *\n * Future calls to `credentials.refresh()` will now use the new token.\n *\n * @!attribute params\n *   @return [map] the map of params passed to\n *     {AWS.STS.assumeRoleWithSAML}. To update the token, set the\n *     `params.SAMLAssertion` property.\n */\n\n\nAWS.SAMLCredentials = AWS.util.inherit(AWS.Credentials, {\n  /**\n   * Creates a new credentials object.\n   * @param (see AWS.STS.assumeRoleWithSAML)\n   * @example Creating a new credentials object\n   *   AWS.config.credentials = new AWS.SAMLCredentials({\n   *     RoleArn: 'arn:aws:iam::1234567890:role/SAMLRole',\n   *     PrincipalArn: 'arn:aws:iam::1234567890:role/SAMLPrincipal',\n   *     SAMLAssertion: 'base64-token', // base64-encoded token from IdP\n   *   });\n   * @see AWS.STS.assumeRoleWithSAML\n   */\n  constructor: function SAMLCredentials(params) {\n    AWS.Credentials.call(this);\n    this.expired = true;\n    this.params = params;\n  },\n\n  /**\n   * Refreshes credentials using {AWS.STS.assumeRoleWithSAML}\n   *\n   * @callback callback function(err)\n   *   Called when the STS service responds (or fails). When\n   *   this callback is called with no error, it means that the credentials\n   *   information has been loaded into the object (as the `accessKeyId`,\n   *   `secretAccessKey`, and `sessionToken` properties).\n   *   @param err [Error] if an error occurred, this value will be filled\n   * @see get\n   */\n  refresh: function refresh(callback) {\n    this.coalesceRefresh(callback || AWS.util.fn.callback);\n  },\n\n  /**\n   * @api private\n   */\n  load: function load(callback) {\n    var self = this;\n    self.createClients();\n    self.service.assumeRoleWithSAML(function (err, data) {\n      if (!err) {\n        self.service.credentialsFrom(data, self);\n      }\n\n      callback(err);\n    });\n  },\n\n  /**\n   * @api private\n   */\n  createClients: function createClients() {\n    this.service = this.service || new STS({\n      params: this.params\n    });\n  }\n});","map":{"version":3,"names":["AWS","require","STS","SAMLCredentials","util","inherit","Credentials","constructor","params","call","expired","refresh","callback","coalesceRefresh","fn","load","self","createClients","service","assumeRoleWithSAML","err","data","credentialsFrom"],"sources":["/Users/lazarbogdan/test/medicacasa-frontend/medicacasa-frontend/node_modules/aws-sdk/lib/credentials/saml_credentials.js"],"sourcesContent":["var AWS = require('../core');\nvar STS = require('../../clients/sts');\n\n/**\n * Represents credentials retrieved from STS SAML support.\n *\n * By default this provider gets credentials using the\n * {AWS.STS.assumeRoleWithSAML} service operation. This operation\n * requires a `RoleArn` containing the ARN of the IAM trust policy for the\n * application for which credentials will be given, as well as a `PrincipalArn`\n * representing the ARN for the SAML identity provider. In addition, the\n * `SAMLAssertion` must be set to the token provided by the identity\n * provider. See {constructor} for an example on creating a credentials\n * object with proper `RoleArn`, `PrincipalArn`, and `SAMLAssertion` values.\n *\n * ## Refreshing Credentials from Identity Service\n *\n * In addition to AWS credentials expiring after a given amount of time, the\n * login token from the identity provider will also expire. Once this token\n * expires, it will not be usable to refresh AWS credentials, and another\n * token will be needed. The SDK does not manage refreshing of the token value,\n * but this can be done through a \"refresh token\" supported by most identity\n * providers. Consult the documentation for the identity provider for refreshing\n * tokens. Once the refreshed token is acquired, you should make sure to update\n * this new token in the credentials object's {params} property. The following\n * code will update the SAMLAssertion, assuming you have retrieved an updated\n * token from the identity provider:\n *\n * ```javascript\n * AWS.config.credentials.params.SAMLAssertion = updatedToken;\n * ```\n *\n * Future calls to `credentials.refresh()` will now use the new token.\n *\n * @!attribute params\n *   @return [map] the map of params passed to\n *     {AWS.STS.assumeRoleWithSAML}. To update the token, set the\n *     `params.SAMLAssertion` property.\n */\nAWS.SAMLCredentials = AWS.util.inherit(AWS.Credentials, {\n  /**\n   * Creates a new credentials object.\n   * @param (see AWS.STS.assumeRoleWithSAML)\n   * @example Creating a new credentials object\n   *   AWS.config.credentials = new AWS.SAMLCredentials({\n   *     RoleArn: 'arn:aws:iam::1234567890:role/SAMLRole',\n   *     PrincipalArn: 'arn:aws:iam::1234567890:role/SAMLPrincipal',\n   *     SAMLAssertion: 'base64-token', // base64-encoded token from IdP\n   *   });\n   * @see AWS.STS.assumeRoleWithSAML\n   */\n  constructor: function SAMLCredentials(params) {\n    AWS.Credentials.call(this);\n    this.expired = true;\n    this.params = params;\n  },\n\n  /**\n   * Refreshes credentials using {AWS.STS.assumeRoleWithSAML}\n   *\n   * @callback callback function(err)\n   *   Called when the STS service responds (or fails). When\n   *   this callback is called with no error, it means that the credentials\n   *   information has been loaded into the object (as the `accessKeyId`,\n   *   `secretAccessKey`, and `sessionToken` properties).\n   *   @param err [Error] if an error occurred, this value will be filled\n   * @see get\n   */\n  refresh: function refresh(callback) {\n    this.coalesceRefresh(callback || AWS.util.fn.callback);\n  },\n\n  /**\n   * @api private\n   */\n  load: function load(callback) {\n    var self = this;\n    self.createClients();\n    self.service.assumeRoleWithSAML(function (err, data) {\n      if (!err) {\n        self.service.credentialsFrom(data, self);\n      }\n      callback(err);\n    });\n  },\n\n  /**\n   * @api private\n   */\n  createClients: function() {\n    this.service = this.service || new STS({params: this.params});\n  }\n\n});\n"],"mappings":"AAAA,IAAIA,GAAG,GAAGC,OAAO,CAAC,SAAD,CAAjB;;AACA,IAAIC,GAAG,GAAGD,OAAO,CAAC,mBAAD,CAAjB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAD,GAAG,CAACG,eAAJ,GAAsBH,GAAG,CAACI,IAAJ,CAASC,OAAT,CAAiBL,GAAG,CAACM,WAArB,EAAkC;EACtD;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEC,WAAW,EAAE,SAASJ,eAAT,CAAyBK,MAAzB,EAAiC;IAC5CR,GAAG,CAACM,WAAJ,CAAgBG,IAAhB,CAAqB,IAArB;IACA,KAAKC,OAAL,GAAe,IAAf;IACA,KAAKF,MAAL,GAAcA,MAAd;EACD,CAhBqD;;EAkBtD;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEG,OAAO,EAAE,SAASA,OAAT,CAAiBC,QAAjB,EAA2B;IAClC,KAAKC,eAAL,CAAqBD,QAAQ,IAAIZ,GAAG,CAACI,IAAJ,CAASU,EAAT,CAAYF,QAA7C;EACD,CA/BqD;;EAiCtD;AACF;AACA;EACEG,IAAI,EAAE,SAASA,IAAT,CAAcH,QAAd,EAAwB;IAC5B,IAAII,IAAI,GAAG,IAAX;IACAA,IAAI,CAACC,aAAL;IACAD,IAAI,CAACE,OAAL,CAAaC,kBAAb,CAAgC,UAAUC,GAAV,EAAeC,IAAf,EAAqB;MACnD,IAAI,CAACD,GAAL,EAAU;QACRJ,IAAI,CAACE,OAAL,CAAaI,eAAb,CAA6BD,IAA7B,EAAmCL,IAAnC;MACD;;MACDJ,QAAQ,CAACQ,GAAD,CAAR;IACD,CALD;EAMD,CA7CqD;;EA+CtD;AACF;AACA;EACEH,aAAa,EAAE,yBAAW;IACxB,KAAKC,OAAL,GAAe,KAAKA,OAAL,IAAgB,IAAIhB,GAAJ,CAAQ;MAACM,MAAM,EAAE,KAAKA;IAAd,CAAR,CAA/B;EACD;AApDqD,CAAlC,CAAtB"},"metadata":{},"sourceType":"script"}