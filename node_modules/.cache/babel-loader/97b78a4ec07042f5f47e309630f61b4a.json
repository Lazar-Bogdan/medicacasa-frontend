{"ast":null,"code":"import { U } from \"@quarkly/widgets/build/cjs/prod\";\nimport axios from \"axios\";\nimport URL from \"./BackEndURL\";\n\nclass DoctorService {\n  async getAllDoctors() {\n    // try{\n    //     const response = await axios.get(URL + \"doctor/getAllDoctors\");\n    //     return response.data;\n    // }catch(err){\n    //     console.log(\"err\",err.response);\n    //     return false;\n    // }\n    let x;\n    await fetch(URL + \"doctor/getAllDoctors\", {\n      method: 'GET'\n    }).then(response => response.json()).then(response => {\n      x = response;\n    }).catch(err => {\n      x = err;\n      console.error(err);\n    });\n    return x;\n  }\n\n  async getDoctorUidAfterId(id) {\n    // try{\n    //     const response = await axios.get(URL + \"doctor/getDoctorUnderId\", {headers:{_id:id}});\n    //     return response.data;\n    // }catch(err){\n    //     console.log(\"err\",err.response);\n    //     return false;\n    // }\n    let x;\n    await fetch(URL + \"doctor/getDoctorUnderId\", {\n      method: 'GET',\n      headers: {\n        _id: id\n      }\n    }).then(response => response.json()).then(response => {\n      x = response;\n    }).catch(err => {\n      x = err;\n      console.error(err);\n    });\n    return x;\n  }\n\n  async addDoctor(username, email, password, role, age, img, FirstDesc, SecondDesc) {\n    // try{\n    //     const response = await axios.post(URL + \"doctor/addDoctor\", {username:username,email:email,password:password,role:role,age:age,img:img, doctorFirstDescription:FirstDesc, doctorSecondDescription:SecondDesc})\n    //     return response.data;\n    // }catch(err){\n    //     console.log(\"err\",err.response);\n    //     return false;\n    // }\n    let x;\n    await fetch(URL + \"doctor/addDoctor\", {\n      method: 'POST',\n      headers: {\n        username: username,\n        email: email,\n        password: password,\n        role: role,\n        age: age,\n        img: img,\n        doctorFirstDescription: FirstDesc,\n        doctorSecondDescription: SecondDesc\n      },\n      body: {\n        username: username,\n        email: email,\n        password: password,\n        role: role,\n        age: age,\n        img: img,\n        doctorFirstDescription: FirstDesc,\n        doctorSecondDescription: SecondDesc\n      }\n    }).then(response => response.json()).then(response => {\n      x = response;\n    }).catch(err => {\n      x = err;\n      console.error(err);\n    });\n    return x;\n  }\n\n  async deleteDoctor(id) {\n    // try{\n    //     const response = await axios.delete(URL + \"doctor/deleteDoctor\", {headers:{_id:id}})\n    //     return response.data;\n    // }catch(err){\n    //     console.log(\"err\",err.response);\n    //     return false;\n    // }\n    let x;\n    await fetch(URL + \"doctor/deleteDoctor\", {\n      method: 'DELETE',\n      headers: {\n        _id: id\n      },\n      body: {}\n    }).then(response => response.json()).then(response => {\n      x = response;\n    }).catch(err => {\n      x = err;\n      console.error(err);\n    });\n    return x;\n  }\n\n  async getDoctor(id) {\n    // try{\n    //     const response = await axios.get(URL + \"doctor/getDoctor\",{headers:{_id:id}})\n    //     return response.data;\n    // }catch(err){\n    //     console.log(\"err\",err.response);\n    //     return false;\n    // }\n    let x;\n    await fetch(URL + \"doctor/getDoctor\", {\n      method: 'GET',\n      headers: {\n        _id: id\n      }\n    }).then(response => response.json()).then(response => {\n      x = response;\n    }).catch(err => {\n      x = err;\n      console.error(err);\n    });\n    return x;\n  }\n\n  async editDoctor(id, username, email, password, role, age, img, FirstDesc, SecondDesc) {\n    // try{\n    //     const response = await axios.put(URL + \"doctor/editDoctor\", {_id:id,username:username,email:email,password:password,role:role,age:age,img:img, doctorFirstDescription:FirstDesc, doctorSecondDescription:SecondDesc});\n    //     return response.data;\n    // }catch(err){\n    //     console.log(\"err\",err.response);\n    //     return false;\n    // }\n    let x;\n    await fetch(URL + \"doctor/editDoctor\", {\n      method: 'PUT',\n      headers: {\n        _id: id,\n        username: username,\n        email: email,\n        password: password,\n        role: role,\n        age: age,\n        img: img,\n        doctorFirstDescription: FirstDesc,\n        doctorSecondDescription: SecondDesc\n      },\n      body: {\n        _id: id,\n        username: username,\n        email: email,\n        password: password,\n        role: role,\n        age: age,\n        img: img,\n        doctorFirstDescription: FirstDesc,\n        doctorSecondDescription: SecondDesc\n      }\n    }).then(response => response.json()).then(response => {\n      x = response;\n    }).catch(err => {\n      x = err;\n      console.error(err);\n    });\n    return x;\n  }\n\n  async getDoctorUid(email) {\n    // try{\n    //     const response = await axios.get(URL + \"doctor/getDoctorUid\", {headers: {email:email}});\n    //     return response.data;\n    // }catch(err){\n    //     console.log(\"err\",err.response);\n    //     return false;\n    // }\n    let x;\n    await fetch(URL + \"doctor/getDoctorUid\", {\n      method: 'GET',\n      headers: {\n        email: email\n      }\n    }).then(response => response.json()).then(response => {\n      x = response;\n    }).catch(err => {\n      x = err;\n      console.error(err);\n    });\n    return x;\n  }\n\n  async getUsername(email) {\n    let x;\n    await fetch(URL + \"doctor/getUsername\", {\n      method: 'GET',\n      headers: {\n        email: email\n      }\n    }).then(response => response.json()).then(response => {\n      x = response;\n    }).catch(err => {\n      x = err;\n      console.error(err);\n    });\n    return x;\n  }\n\n}\n\nexport default new DoctorService();","map":{"version":3,"names":["U","axios","URL","DoctorService","getAllDoctors","x","fetch","method","then","response","json","catch","err","console","error","getDoctorUidAfterId","id","headers","_id","addDoctor","username","email","password","role","age","img","FirstDesc","SecondDesc","doctorFirstDescription","doctorSecondDescription","body","deleteDoctor","getDoctor","editDoctor","getDoctorUid","getUsername"],"sources":["/Users/lazarbogdan/test/medicacasa-frontend/medicacasa-frontend/src/services/DoctorService.js"],"sourcesContent":["import { U } from \"@quarkly/widgets/build/cjs/prod\";\nimport axios from \"axios\";\nimport URL from \"./BackEndURL\";\n\nclass DoctorService{\n    async getAllDoctors(){\n        // try{\n        //     const response = await axios.get(URL + \"doctor/getAllDoctors\");\n        //     return response.data;\n        // }catch(err){\n        //     console.log(\"err\",err.response);\n        //     return false;\n        // }\n        let x;\n        await fetch(URL + \"doctor/getAllDoctors\", {\n            method: 'GET'\n        })\n        .then(response => response.json())\n        .then(response => { x = response; })\n        .catch(err => { x = err; console.error(err)});\n        return x;\n    }\n\n    async getDoctorUidAfterId(id){\n        // try{\n        //     const response = await axios.get(URL + \"doctor/getDoctorUnderId\", {headers:{_id:id}});\n        //     return response.data;\n        // }catch(err){\n        //     console.log(\"err\",err.response);\n        //     return false;\n        // }\n        let x;\n        await fetch(URL + \"doctor/getDoctorUnderId\", {\n            method: 'GET',\n            headers: {\n                _id:id\n            }\n        })\n        .then(response => response.json())\n        .then(response => { x = response; })\n        .catch(err => { x = err; console.error(err)});\n        return x;\n    }\n\n    async addDoctor(username,email,password,role,age,img,FirstDesc,SecondDesc){\n        // try{\n        //     const response = await axios.post(URL + \"doctor/addDoctor\", {username:username,email:email,password:password,role:role,age:age,img:img, doctorFirstDescription:FirstDesc, doctorSecondDescription:SecondDesc})\n        //     return response.data;\n        // }catch(err){\n        //     console.log(\"err\",err.response);\n        //     return false;\n        // }\n        let x;\n        await fetch(URL + \"doctor/addDoctor\", {\n            method: 'POST',\n            headers: {\n                username:username,\n                email:email,\n                password:password,\n                role:role,\n                age:age,\n                img:img, \n                doctorFirstDescription:FirstDesc, \n                doctorSecondDescription:SecondDesc\n            },\n            body: {\n                username:username,\n                email:email,\n                password:password,\n                role:role,\n                age:age,\n                img:img, \n                doctorFirstDescription:FirstDesc, \n                doctorSecondDescription:SecondDesc\n            }\n        })\n        .then(response => response.json())\n        .then(response => { x = response; })\n        .catch(err => { x = err; console.error(err)});\n        return x;\n    }\n\n    async deleteDoctor(id){\n        // try{\n        //     const response = await axios.delete(URL + \"doctor/deleteDoctor\", {headers:{_id:id}})\n        //     return response.data;\n        // }catch(err){\n        //     console.log(\"err\",err.response);\n        //     return false;\n        // }\n        let x;\n        await fetch(URL + \"doctor/deleteDoctor\", {\n            method: 'DELETE',\n            headers: {\n                _id:id\n            },\n            body: {\n\n            }\n        })\n        .then(response => response.json())\n        .then(response => { x = response; })\n        .catch(err => { x = err; console.error(err)});\n        return x;\n    }\n\n    async getDoctor(id){\n        // try{\n        //     const response = await axios.get(URL + \"doctor/getDoctor\",{headers:{_id:id}})\n        //     return response.data;\n        // }catch(err){\n        //     console.log(\"err\",err.response);\n        //     return false;\n        // }\n        let x;\n        await fetch(URL + \"doctor/getDoctor\", {\n            method: 'GET',\n            headers: {\n                _id:id\n            }\n        })\n        .then(response => response.json())\n        .then(response => { x = response; })\n        .catch(err => { x = err; console.error(err)});\n        return x;\n    }\n\n    async editDoctor(id,username,email,password,role,age,img,FirstDesc,SecondDesc){\n        // try{\n        //     const response = await axios.put(URL + \"doctor/editDoctor\", {_id:id,username:username,email:email,password:password,role:role,age:age,img:img, doctorFirstDescription:FirstDesc, doctorSecondDescription:SecondDesc});\n        //     return response.data;\n        // }catch(err){\n        //     console.log(\"err\",err.response);\n        //     return false;\n        // }\n        let x;\n        await fetch(URL + \"doctor/editDoctor\", {\n            method: 'PUT',\n            headers: {\n                _id:id,username:username,\n                email:email,\n                password:password,\n                role:role,\n                age:age,\n                img:img, \n                doctorFirstDescription:FirstDesc, \n                doctorSecondDescription:SecondDesc\n            },\n            body: {\n                _id:id,username:username,\n                email:email,\n                password:password,\n                role:role,\n                age:age,\n                img:img, \n                doctorFirstDescription:FirstDesc, \n                doctorSecondDescription:SecondDesc\n            }\n        })\n        .then(response => response.json())\n        .then(response => { x = response; })\n        .catch(err => { x = err; console.error(err)});\n        return x;\n    }\n\n    async getDoctorUid(email){\n        // try{\n        //     const response = await axios.get(URL + \"doctor/getDoctorUid\", {headers: {email:email}});\n        //     return response.data;\n        // }catch(err){\n        //     console.log(\"err\",err.response);\n        //     return false;\n        // }\n        let x;\n        await fetch(URL + \"doctor/getDoctorUid\", {\n            method: 'GET',\n            headers: {\n                email:email\n            }\n        })\n        .then(response => response.json())\n        .then(response => { x = response; })\n        .catch(err => { x = err; console.error(err)});\n        return x;\n    }\n\n    async getUsername(email)\n    {\n        let x;\n        await fetch(URL + \"doctor/getUsername\", {\n            method: 'GET',\n            headers: {\n                email:email\n            }\n        })\n        .then(response => response.json())\n        .then(response => { x = response; })\n        .catch(err => { x = err; console.error(err)});\n        return x;\n    }\n}\n\nexport default new DoctorService"],"mappings":"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"},"metadata":{},"sourceType":"module"}