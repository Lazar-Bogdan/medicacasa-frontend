{"ast":null,"code":"/**\n * Copyright 2012-2013 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You\n * may not use this file except in compliance with the License. A copy of\n * the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is\n * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF\n * ANY KIND, either express or implied. See the License for the specific\n * language governing permissions and limitations under the License.\n */\nvar AWS = require('./core');\n\nvar inherit = AWS.util.inherit;\n\nvar jmespath = require('jmespath');\n/**\n * @api private\n */\n\n\nfunction CHECK_ACCEPTORS(resp) {\n  var waiter = resp.request._waiter;\n  var acceptors = waiter.config.acceptors;\n  var acceptorMatched = false;\n  var state = 'retry';\n  acceptors.forEach(function (acceptor) {\n    if (!acceptorMatched) {\n      var matcher = waiter.matchers[acceptor.matcher];\n\n      if (matcher && matcher(resp, acceptor.expected, acceptor.argument)) {\n        acceptorMatched = true;\n        state = acceptor.state;\n      }\n    }\n  });\n  if (!acceptorMatched && resp.error) state = 'failure';\n\n  if (state === 'success') {\n    waiter.setSuccess(resp);\n  } else {\n    waiter.setError(resp, state === 'retry');\n  }\n}\n/**\n * @api private\n */\n\n\nAWS.ResourceWaiter = inherit({\n  /**\n   * Waits for a given state on a service object\n   * @param service [Service] the service object to wait on\n   * @param state [String] the state (defined in waiter configuration) to wait\n   *   for.\n   * @example Create a waiter for running EC2 instances\n   *   var ec2 = new AWS.EC2;\n   *   var waiter = new AWS.ResourceWaiter(ec2, 'instanceRunning');\n   */\n  constructor: function constructor(service, state) {\n    this.service = service;\n    this.state = state;\n    this.loadWaiterConfig(this.state);\n  },\n  service: null,\n  state: null,\n  config: null,\n  matchers: {\n    path: function (resp, expected, argument) {\n      try {\n        var result = jmespath.search(resp.data, argument);\n      } catch (err) {\n        return false;\n      }\n\n      return jmespath.strictDeepEqual(result, expected);\n    },\n    pathAll: function (resp, expected, argument) {\n      try {\n        var results = jmespath.search(resp.data, argument);\n      } catch (err) {\n        return false;\n      }\n\n      if (!Array.isArray(results)) results = [results];\n      var numResults = results.length;\n      if (!numResults) return false;\n\n      for (var ind = 0; ind < numResults; ind++) {\n        if (!jmespath.strictDeepEqual(results[ind], expected)) {\n          return false;\n        }\n      }\n\n      return true;\n    },\n    pathAny: function (resp, expected, argument) {\n      try {\n        var results = jmespath.search(resp.data, argument);\n      } catch (err) {\n        return false;\n      }\n\n      if (!Array.isArray(results)) results = [results];\n      var numResults = results.length;\n\n      for (var ind = 0; ind < numResults; ind++) {\n        if (jmespath.strictDeepEqual(results[ind], expected)) {\n          return true;\n        }\n      }\n\n      return false;\n    },\n    status: function (resp, expected) {\n      var statusCode = resp.httpResponse.statusCode;\n      return typeof statusCode === 'number' && statusCode === expected;\n    },\n    error: function (resp, expected) {\n      if (typeof expected === 'string' && resp.error) {\n        return expected === resp.error.code;\n      } // if expected is not string, can be boolean indicating presence of error\n\n\n      return expected === !!resp.error;\n    }\n  },\n  listeners: new AWS.SequentialExecutor().addNamedListeners(function (add) {\n    add('RETRY_CHECK', 'retry', function (resp) {\n      var waiter = resp.request._waiter;\n\n      if (resp.error && resp.error.code === 'ResourceNotReady') {\n        resp.error.retryDelay = (waiter.config.delay || 0) * 1000;\n      }\n    });\n    add('CHECK_OUTPUT', 'extractData', CHECK_ACCEPTORS);\n    add('CHECK_ERROR', 'extractError', CHECK_ACCEPTORS);\n  }),\n\n  /**\n   * @return [AWS.Request]\n   */\n  wait: function wait(params, callback) {\n    if (typeof params === 'function') {\n      callback = params;\n      params = undefined;\n    }\n\n    if (params && params.$waiter) {\n      params = AWS.util.copy(params);\n\n      if (typeof params.$waiter.delay === 'number') {\n        this.config.delay = params.$waiter.delay;\n      }\n\n      if (typeof params.$waiter.maxAttempts === 'number') {\n        this.config.maxAttempts = params.$waiter.maxAttempts;\n      }\n\n      delete params.$waiter;\n    }\n\n    var request = this.service.makeRequest(this.config.operation, params);\n    request._waiter = this;\n    request.response.maxRetries = this.config.maxAttempts;\n    request.addListeners(this.listeners);\n    if (callback) request.send(callback);\n    return request;\n  },\n  setSuccess: function setSuccess(resp) {\n    resp.error = null;\n    resp.data = resp.data || {};\n    resp.request.removeAllListeners('extractData');\n  },\n  setError: function setError(resp, retryable) {\n    resp.data = null;\n    resp.error = AWS.util.error(resp.error || new Error(), {\n      code: 'ResourceNotReady',\n      message: 'Resource is not in the state ' + this.state,\n      retryable: retryable\n    });\n  },\n\n  /**\n   * Loads waiter configuration from API configuration\n   *\n   * @api private\n   */\n  loadWaiterConfig: function loadWaiterConfig(state) {\n    if (!this.service.api.waiters[state]) {\n      throw new AWS.util.error(new Error(), {\n        code: 'StateNotFoundError',\n        message: 'State ' + state + ' not found.'\n      });\n    }\n\n    this.config = AWS.util.copy(this.service.api.waiters[state]);\n  }\n});","map":{"version":3,"names":["AWS","require","inherit","util","jmespath","CHECK_ACCEPTORS","resp","waiter","request","_waiter","acceptors","config","acceptorMatched","state","forEach","acceptor","matcher","matchers","expected","argument","error","setSuccess","setError","ResourceWaiter","constructor","service","loadWaiterConfig","path","result","search","data","err","strictDeepEqual","pathAll","results","Array","isArray","numResults","length","ind","pathAny","status","statusCode","httpResponse","code","listeners","SequentialExecutor","addNamedListeners","add","retryDelay","delay","wait","params","callback","undefined","$waiter","copy","maxAttempts","makeRequest","operation","response","maxRetries","addListeners","send","removeAllListeners","retryable","Error","message","api","waiters"],"sources":["/Users/lazarbogdan/test/medicacasa-frontend/medicacasa-frontend/node_modules/aws-sdk/lib/resource_waiter.js"],"sourcesContent":["/**\n * Copyright 2012-2013 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You\n * may not use this file except in compliance with the License. A copy of\n * the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is\n * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF\n * ANY KIND, either express or implied. See the License for the specific\n * language governing permissions and limitations under the License.\n */\n\nvar AWS = require('./core');\nvar inherit = AWS.util.inherit;\nvar jmespath = require('jmespath');\n\n/**\n * @api private\n */\nfunction CHECK_ACCEPTORS(resp) {\n  var waiter = resp.request._waiter;\n  var acceptors = waiter.config.acceptors;\n  var acceptorMatched = false;\n  var state = 'retry';\n\n  acceptors.forEach(function(acceptor) {\n    if (!acceptorMatched) {\n      var matcher = waiter.matchers[acceptor.matcher];\n      if (matcher && matcher(resp, acceptor.expected, acceptor.argument)) {\n        acceptorMatched = true;\n        state = acceptor.state;\n      }\n    }\n  });\n\n  if (!acceptorMatched && resp.error) state = 'failure';\n\n  if (state === 'success') {\n    waiter.setSuccess(resp);\n  } else {\n    waiter.setError(resp, state === 'retry');\n  }\n}\n\n/**\n * @api private\n */\nAWS.ResourceWaiter = inherit({\n  /**\n   * Waits for a given state on a service object\n   * @param service [Service] the service object to wait on\n   * @param state [String] the state (defined in waiter configuration) to wait\n   *   for.\n   * @example Create a waiter for running EC2 instances\n   *   var ec2 = new AWS.EC2;\n   *   var waiter = new AWS.ResourceWaiter(ec2, 'instanceRunning');\n   */\n  constructor: function constructor(service, state) {\n    this.service = service;\n    this.state = state;\n    this.loadWaiterConfig(this.state);\n  },\n\n  service: null,\n\n  state: null,\n\n  config: null,\n\n  matchers: {\n    path: function(resp, expected, argument) {\n      try {\n        var result = jmespath.search(resp.data, argument);\n      } catch (err) {\n        return false;\n      }\n\n      return jmespath.strictDeepEqual(result,expected);\n    },\n\n    pathAll: function(resp, expected, argument) {\n      try {\n        var results = jmespath.search(resp.data, argument);\n      } catch (err) {\n        return false;\n      }\n\n      if (!Array.isArray(results)) results = [results];\n      var numResults = results.length;\n      if (!numResults) return false;\n      for (var ind = 0 ; ind < numResults; ind++) {\n        if (!jmespath.strictDeepEqual(results[ind], expected)) {\n          return false;\n        }\n      }\n      return true;\n    },\n\n    pathAny: function(resp, expected, argument) {\n      try {\n        var results = jmespath.search(resp.data, argument);\n      } catch (err) {\n        return false;\n      }\n\n      if (!Array.isArray(results)) results = [results];\n      var numResults = results.length;\n      for (var ind = 0 ; ind < numResults; ind++) {\n        if (jmespath.strictDeepEqual(results[ind], expected)) {\n          return true;\n        }\n      }\n      return false;\n    },\n\n    status: function(resp, expected) {\n      var statusCode = resp.httpResponse.statusCode;\n      return (typeof statusCode === 'number') && (statusCode === expected);\n    },\n\n    error: function(resp, expected) {\n      if (typeof expected === 'string' && resp.error) {\n        return expected === resp.error.code;\n      }\n      // if expected is not string, can be boolean indicating presence of error\n      return expected === !!resp.error;\n    }\n  },\n\n  listeners: new AWS.SequentialExecutor().addNamedListeners(function(add) {\n    add('RETRY_CHECK', 'retry', function(resp) {\n      var waiter = resp.request._waiter;\n      if (resp.error && resp.error.code === 'ResourceNotReady') {\n        resp.error.retryDelay = (waiter.config.delay || 0) * 1000;\n      }\n    });\n\n    add('CHECK_OUTPUT', 'extractData', CHECK_ACCEPTORS);\n\n    add('CHECK_ERROR', 'extractError', CHECK_ACCEPTORS);\n  }),\n\n  /**\n   * @return [AWS.Request]\n   */\n  wait: function wait(params, callback) {\n    if (typeof params === 'function') {\n      callback = params; params = undefined;\n    }\n\n    if (params && params.$waiter) {\n      params = AWS.util.copy(params);\n      if (typeof params.$waiter.delay === 'number') {\n        this.config.delay = params.$waiter.delay;\n      }\n      if (typeof params.$waiter.maxAttempts === 'number') {\n        this.config.maxAttempts = params.$waiter.maxAttempts;\n      }\n      delete params.$waiter;\n    }\n\n    var request = this.service.makeRequest(this.config.operation, params);\n    request._waiter = this;\n    request.response.maxRetries = this.config.maxAttempts;\n    request.addListeners(this.listeners);\n\n    if (callback) request.send(callback);\n    return request;\n  },\n\n  setSuccess: function setSuccess(resp) {\n    resp.error = null;\n    resp.data = resp.data || {};\n    resp.request.removeAllListeners('extractData');\n  },\n\n  setError: function setError(resp, retryable) {\n    resp.data = null;\n    resp.error = AWS.util.error(resp.error || new Error(), {\n      code: 'ResourceNotReady',\n      message: 'Resource is not in the state ' + this.state,\n      retryable: retryable\n    });\n  },\n\n  /**\n   * Loads waiter configuration from API configuration\n   *\n   * @api private\n   */\n  loadWaiterConfig: function loadWaiterConfig(state) {\n    if (!this.service.api.waiters[state]) {\n      throw new AWS.util.error(new Error(), {\n        code: 'StateNotFoundError',\n        message: 'State ' + state + ' not found.'\n      });\n    }\n\n    this.config = AWS.util.copy(this.service.api.waiters[state]);\n  }\n});\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,IAAIA,GAAG,GAAGC,OAAO,CAAC,QAAD,CAAjB;;AACA,IAAIC,OAAO,GAAGF,GAAG,CAACG,IAAJ,CAASD,OAAvB;;AACA,IAAIE,QAAQ,GAAGH,OAAO,CAAC,UAAD,CAAtB;AAEA;AACA;AACA;;;AACA,SAASI,eAAT,CAAyBC,IAAzB,EAA+B;EAC7B,IAAIC,MAAM,GAAGD,IAAI,CAACE,OAAL,CAAaC,OAA1B;EACA,IAAIC,SAAS,GAAGH,MAAM,CAACI,MAAP,CAAcD,SAA9B;EACA,IAAIE,eAAe,GAAG,KAAtB;EACA,IAAIC,KAAK,GAAG,OAAZ;EAEAH,SAAS,CAACI,OAAV,CAAkB,UAASC,QAAT,EAAmB;IACnC,IAAI,CAACH,eAAL,EAAsB;MACpB,IAAII,OAAO,GAAGT,MAAM,CAACU,QAAP,CAAgBF,QAAQ,CAACC,OAAzB,CAAd;;MACA,IAAIA,OAAO,IAAIA,OAAO,CAACV,IAAD,EAAOS,QAAQ,CAACG,QAAhB,EAA0BH,QAAQ,CAACI,QAAnC,CAAtB,EAAoE;QAClEP,eAAe,GAAG,IAAlB;QACAC,KAAK,GAAGE,QAAQ,CAACF,KAAjB;MACD;IACF;EACF,CARD;EAUA,IAAI,CAACD,eAAD,IAAoBN,IAAI,CAACc,KAA7B,EAAoCP,KAAK,GAAG,SAAR;;EAEpC,IAAIA,KAAK,KAAK,SAAd,EAAyB;IACvBN,MAAM,CAACc,UAAP,CAAkBf,IAAlB;EACD,CAFD,MAEO;IACLC,MAAM,CAACe,QAAP,CAAgBhB,IAAhB,EAAsBO,KAAK,KAAK,OAAhC;EACD;AACF;AAED;AACA;AACA;;;AACAb,GAAG,CAACuB,cAAJ,GAAqBrB,OAAO,CAAC;EAC3B;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEsB,WAAW,EAAE,SAASA,WAAT,CAAqBC,OAArB,EAA8BZ,KAA9B,EAAqC;IAChD,KAAKY,OAAL,GAAeA,OAAf;IACA,KAAKZ,KAAL,GAAaA,KAAb;IACA,KAAKa,gBAAL,CAAsB,KAAKb,KAA3B;EACD,CAd0B;EAgB3BY,OAAO,EAAE,IAhBkB;EAkB3BZ,KAAK,EAAE,IAlBoB;EAoB3BF,MAAM,EAAE,IApBmB;EAsB3BM,QAAQ,EAAE;IACRU,IAAI,EAAE,UAASrB,IAAT,EAAeY,QAAf,EAAyBC,QAAzB,EAAmC;MACvC,IAAI;QACF,IAAIS,MAAM,GAAGxB,QAAQ,CAACyB,MAAT,CAAgBvB,IAAI,CAACwB,IAArB,EAA2BX,QAA3B,CAAb;MACD,CAFD,CAEE,OAAOY,GAAP,EAAY;QACZ,OAAO,KAAP;MACD;;MAED,OAAO3B,QAAQ,CAAC4B,eAAT,CAAyBJ,MAAzB,EAAgCV,QAAhC,CAAP;IACD,CATO;IAWRe,OAAO,EAAE,UAAS3B,IAAT,EAAeY,QAAf,EAAyBC,QAAzB,EAAmC;MAC1C,IAAI;QACF,IAAIe,OAAO,GAAG9B,QAAQ,CAACyB,MAAT,CAAgBvB,IAAI,CAACwB,IAArB,EAA2BX,QAA3B,CAAd;MACD,CAFD,CAEE,OAAOY,GAAP,EAAY;QACZ,OAAO,KAAP;MACD;;MAED,IAAI,CAACI,KAAK,CAACC,OAAN,CAAcF,OAAd,CAAL,EAA6BA,OAAO,GAAG,CAACA,OAAD,CAAV;MAC7B,IAAIG,UAAU,GAAGH,OAAO,CAACI,MAAzB;MACA,IAAI,CAACD,UAAL,EAAiB,OAAO,KAAP;;MACjB,KAAK,IAAIE,GAAG,GAAG,CAAf,EAAmBA,GAAG,GAAGF,UAAzB,EAAqCE,GAAG,EAAxC,EAA4C;QAC1C,IAAI,CAACnC,QAAQ,CAAC4B,eAAT,CAAyBE,OAAO,CAACK,GAAD,CAAhC,EAAuCrB,QAAvC,CAAL,EAAuD;UACrD,OAAO,KAAP;QACD;MACF;;MACD,OAAO,IAAP;IACD,CA3BO;IA6BRsB,OAAO,EAAE,UAASlC,IAAT,EAAeY,QAAf,EAAyBC,QAAzB,EAAmC;MAC1C,IAAI;QACF,IAAIe,OAAO,GAAG9B,QAAQ,CAACyB,MAAT,CAAgBvB,IAAI,CAACwB,IAArB,EAA2BX,QAA3B,CAAd;MACD,CAFD,CAEE,OAAOY,GAAP,EAAY;QACZ,OAAO,KAAP;MACD;;MAED,IAAI,CAACI,KAAK,CAACC,OAAN,CAAcF,OAAd,CAAL,EAA6BA,OAAO,GAAG,CAACA,OAAD,CAAV;MAC7B,IAAIG,UAAU,GAAGH,OAAO,CAACI,MAAzB;;MACA,KAAK,IAAIC,GAAG,GAAG,CAAf,EAAmBA,GAAG,GAAGF,UAAzB,EAAqCE,GAAG,EAAxC,EAA4C;QAC1C,IAAInC,QAAQ,CAAC4B,eAAT,CAAyBE,OAAO,CAACK,GAAD,CAAhC,EAAuCrB,QAAvC,CAAJ,EAAsD;UACpD,OAAO,IAAP;QACD;MACF;;MACD,OAAO,KAAP;IACD,CA5CO;IA8CRuB,MAAM,EAAE,UAASnC,IAAT,EAAeY,QAAf,EAAyB;MAC/B,IAAIwB,UAAU,GAAGpC,IAAI,CAACqC,YAAL,CAAkBD,UAAnC;MACA,OAAQ,OAAOA,UAAP,KAAsB,QAAvB,IAAqCA,UAAU,KAAKxB,QAA3D;IACD,CAjDO;IAmDRE,KAAK,EAAE,UAASd,IAAT,EAAeY,QAAf,EAAyB;MAC9B,IAAI,OAAOA,QAAP,KAAoB,QAApB,IAAgCZ,IAAI,CAACc,KAAzC,EAAgD;QAC9C,OAAOF,QAAQ,KAAKZ,IAAI,CAACc,KAAL,CAAWwB,IAA/B;MACD,CAH6B,CAI9B;;;MACA,OAAO1B,QAAQ,KAAK,CAAC,CAACZ,IAAI,CAACc,KAA3B;IACD;EAzDO,CAtBiB;EAkF3ByB,SAAS,EAAE,IAAI7C,GAAG,CAAC8C,kBAAR,GAA6BC,iBAA7B,CAA+C,UAASC,GAAT,EAAc;IACtEA,GAAG,CAAC,aAAD,EAAgB,OAAhB,EAAyB,UAAS1C,IAAT,EAAe;MACzC,IAAIC,MAAM,GAAGD,IAAI,CAACE,OAAL,CAAaC,OAA1B;;MACA,IAAIH,IAAI,CAACc,KAAL,IAAcd,IAAI,CAACc,KAAL,CAAWwB,IAAX,KAAoB,kBAAtC,EAA0D;QACxDtC,IAAI,CAACc,KAAL,CAAW6B,UAAX,GAAwB,CAAC1C,MAAM,CAACI,MAAP,CAAcuC,KAAd,IAAuB,CAAxB,IAA6B,IAArD;MACD;IACF,CALE,CAAH;IAOAF,GAAG,CAAC,cAAD,EAAiB,aAAjB,EAAgC3C,eAAhC,CAAH;IAEA2C,GAAG,CAAC,aAAD,EAAgB,cAAhB,EAAgC3C,eAAhC,CAAH;EACD,CAXU,CAlFgB;;EA+F3B;AACF;AACA;EACE8C,IAAI,EAAE,SAASA,IAAT,CAAcC,MAAd,EAAsBC,QAAtB,EAAgC;IACpC,IAAI,OAAOD,MAAP,KAAkB,UAAtB,EAAkC;MAChCC,QAAQ,GAAGD,MAAX;MAAmBA,MAAM,GAAGE,SAAT;IACpB;;IAED,IAAIF,MAAM,IAAIA,MAAM,CAACG,OAArB,EAA8B;MAC5BH,MAAM,GAAGpD,GAAG,CAACG,IAAJ,CAASqD,IAAT,CAAcJ,MAAd,CAAT;;MACA,IAAI,OAAOA,MAAM,CAACG,OAAP,CAAeL,KAAtB,KAAgC,QAApC,EAA8C;QAC5C,KAAKvC,MAAL,CAAYuC,KAAZ,GAAoBE,MAAM,CAACG,OAAP,CAAeL,KAAnC;MACD;;MACD,IAAI,OAAOE,MAAM,CAACG,OAAP,CAAeE,WAAtB,KAAsC,QAA1C,EAAoD;QAClD,KAAK9C,MAAL,CAAY8C,WAAZ,GAA0BL,MAAM,CAACG,OAAP,CAAeE,WAAzC;MACD;;MACD,OAAOL,MAAM,CAACG,OAAd;IACD;;IAED,IAAI/C,OAAO,GAAG,KAAKiB,OAAL,CAAaiC,WAAb,CAAyB,KAAK/C,MAAL,CAAYgD,SAArC,EAAgDP,MAAhD,CAAd;IACA5C,OAAO,CAACC,OAAR,GAAkB,IAAlB;IACAD,OAAO,CAACoD,QAAR,CAAiBC,UAAjB,GAA8B,KAAKlD,MAAL,CAAY8C,WAA1C;IACAjD,OAAO,CAACsD,YAAR,CAAqB,KAAKjB,SAA1B;IAEA,IAAIQ,QAAJ,EAAc7C,OAAO,CAACuD,IAAR,CAAaV,QAAb;IACd,OAAO7C,OAAP;EACD,CAzH0B;EA2H3Ba,UAAU,EAAE,SAASA,UAAT,CAAoBf,IAApB,EAA0B;IACpCA,IAAI,CAACc,KAAL,GAAa,IAAb;IACAd,IAAI,CAACwB,IAAL,GAAYxB,IAAI,CAACwB,IAAL,IAAa,EAAzB;IACAxB,IAAI,CAACE,OAAL,CAAawD,kBAAb,CAAgC,aAAhC;EACD,CA/H0B;EAiI3B1C,QAAQ,EAAE,SAASA,QAAT,CAAkBhB,IAAlB,EAAwB2D,SAAxB,EAAmC;IAC3C3D,IAAI,CAACwB,IAAL,GAAY,IAAZ;IACAxB,IAAI,CAACc,KAAL,GAAapB,GAAG,CAACG,IAAJ,CAASiB,KAAT,CAAed,IAAI,CAACc,KAAL,IAAc,IAAI8C,KAAJ,EAA7B,EAA0C;MACrDtB,IAAI,EAAE,kBAD+C;MAErDuB,OAAO,EAAE,kCAAkC,KAAKtD,KAFK;MAGrDoD,SAAS,EAAEA;IAH0C,CAA1C,CAAb;EAKD,CAxI0B;;EA0I3B;AACF;AACA;AACA;AACA;EACEvC,gBAAgB,EAAE,SAASA,gBAAT,CAA0Bb,KAA1B,EAAiC;IACjD,IAAI,CAAC,KAAKY,OAAL,CAAa2C,GAAb,CAAiBC,OAAjB,CAAyBxD,KAAzB,CAAL,EAAsC;MACpC,MAAM,IAAIb,GAAG,CAACG,IAAJ,CAASiB,KAAb,CAAmB,IAAI8C,KAAJ,EAAnB,EAAgC;QACpCtB,IAAI,EAAE,oBAD8B;QAEpCuB,OAAO,EAAE,WAAWtD,KAAX,GAAmB;MAFQ,CAAhC,CAAN;IAID;;IAED,KAAKF,MAAL,GAAcX,GAAG,CAACG,IAAJ,CAASqD,IAAT,CAAc,KAAK/B,OAAL,CAAa2C,GAAb,CAAiBC,OAAjB,CAAyBxD,KAAzB,CAAd,CAAd;EACD;AAxJ0B,CAAD,CAA5B"},"metadata":{},"sourceType":"script"}