{"ast":null,"code":"var unresolvedJobs = new Set();\n\nfunction pushJob(stack, job, pointer) {\n  if (!stack[pointer]) stack[pointer] = [];\n  stack[pointer].push(job);\n}\n\nfunction batchLayout(callback) {\n  unresolvedJobs.add(callback);\n  return function () {\n    return unresolvedJobs.delete(callback);\n  };\n}\n\nfunction flushLayout() {\n  if (!unresolvedJobs.size) return;\n  var pointer = 0;\n  var reads = [[]];\n  var writes = [];\n\n  var setRead = function (job) {\n    return pushJob(reads, job, pointer);\n  };\n\n  var setWrite = function (job) {\n    pushJob(writes, job, pointer);\n    pointer++;\n  };\n  /**\n   * Resolve jobs into their array stacks\n   */\n\n\n  unresolvedJobs.forEach(function (callback) {\n    callback(setRead, setWrite);\n    pointer = 0;\n  });\n  unresolvedJobs.clear();\n  /**\n   * Execute jobs\n   */\n\n  var numStacks = writes.length;\n\n  for (var i = 0; i <= numStacks; i++) {\n    reads[i] && reads[i].forEach(executeJob);\n    writes[i] && writes[i].forEach(executeJob);\n  }\n}\n\nvar executeJob = function (job) {\n  return job();\n};\n\nexport { batchLayout, flushLayout };","map":{"version":3,"names":["unresolvedJobs","Set","pushJob","stack","job","pointer","push","batchLayout","callback","add","delete","flushLayout","size","reads","writes","setRead","setWrite","forEach","clear","numStacks","length","i","executeJob"],"sources":["/Users/lazarbogdan/test/medicacasa-frontend/node_modules/framer-motion/dist/es/render/dom/utils/batch-layout.js"],"sourcesContent":["var unresolvedJobs = new Set();\nfunction pushJob(stack, job, pointer) {\n    if (!stack[pointer])\n        stack[pointer] = [];\n    stack[pointer].push(job);\n}\nfunction batchLayout(callback) {\n    unresolvedJobs.add(callback);\n    return function () { return unresolvedJobs.delete(callback); };\n}\nfunction flushLayout() {\n    if (!unresolvedJobs.size)\n        return;\n    var pointer = 0;\n    var reads = [[]];\n    var writes = [];\n    var setRead = function (job) { return pushJob(reads, job, pointer); };\n    var setWrite = function (job) {\n        pushJob(writes, job, pointer);\n        pointer++;\n    };\n    /**\n     * Resolve jobs into their array stacks\n     */\n    unresolvedJobs.forEach(function (callback) {\n        callback(setRead, setWrite);\n        pointer = 0;\n    });\n    unresolvedJobs.clear();\n    /**\n     * Execute jobs\n     */\n    var numStacks = writes.length;\n    for (var i = 0; i <= numStacks; i++) {\n        reads[i] && reads[i].forEach(executeJob);\n        writes[i] && writes[i].forEach(executeJob);\n    }\n}\nvar executeJob = function (job) { return job(); };\n\nexport { batchLayout, flushLayout };\n"],"mappings":"AAAA,IAAIA,cAAc,GAAG,IAAIC,GAAJ,EAArB;;AACA,SAASC,OAAT,CAAiBC,KAAjB,EAAwBC,GAAxB,EAA6BC,OAA7B,EAAsC;EAClC,IAAI,CAACF,KAAK,CAACE,OAAD,CAAV,EACIF,KAAK,CAACE,OAAD,CAAL,GAAiB,EAAjB;EACJF,KAAK,CAACE,OAAD,CAAL,CAAeC,IAAf,CAAoBF,GAApB;AACH;;AACD,SAASG,WAAT,CAAqBC,QAArB,EAA+B;EAC3BR,cAAc,CAACS,GAAf,CAAmBD,QAAnB;EACA,OAAO,YAAY;IAAE,OAAOR,cAAc,CAACU,MAAf,CAAsBF,QAAtB,CAAP;EAAyC,CAA9D;AACH;;AACD,SAASG,WAAT,GAAuB;EACnB,IAAI,CAACX,cAAc,CAACY,IAApB,EACI;EACJ,IAAIP,OAAO,GAAG,CAAd;EACA,IAAIQ,KAAK,GAAG,CAAC,EAAD,CAAZ;EACA,IAAIC,MAAM,GAAG,EAAb;;EACA,IAAIC,OAAO,GAAG,UAAUX,GAAV,EAAe;IAAE,OAAOF,OAAO,CAACW,KAAD,EAAQT,GAAR,EAAaC,OAAb,CAAd;EAAsC,CAArE;;EACA,IAAIW,QAAQ,GAAG,UAAUZ,GAAV,EAAe;IAC1BF,OAAO,CAACY,MAAD,EAASV,GAAT,EAAcC,OAAd,CAAP;IACAA,OAAO;EACV,CAHD;EAIA;AACJ;AACA;;;EACIL,cAAc,CAACiB,OAAf,CAAuB,UAAUT,QAAV,EAAoB;IACvCA,QAAQ,CAACO,OAAD,EAAUC,QAAV,CAAR;IACAX,OAAO,GAAG,CAAV;EACH,CAHD;EAIAL,cAAc,CAACkB,KAAf;EACA;AACJ;AACA;;EACI,IAAIC,SAAS,GAAGL,MAAM,CAACM,MAAvB;;EACA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAIF,SAArB,EAAgCE,CAAC,EAAjC,EAAqC;IACjCR,KAAK,CAACQ,CAAD,CAAL,IAAYR,KAAK,CAACQ,CAAD,CAAL,CAASJ,OAAT,CAAiBK,UAAjB,CAAZ;IACAR,MAAM,CAACO,CAAD,CAAN,IAAaP,MAAM,CAACO,CAAD,CAAN,CAAUJ,OAAV,CAAkBK,UAAlB,CAAb;EACH;AACJ;;AACD,IAAIA,UAAU,GAAG,UAAUlB,GAAV,EAAe;EAAE,OAAOA,GAAG,EAAV;AAAe,CAAjD;;AAEA,SAASG,WAAT,EAAsBI,WAAtB"},"metadata":{},"sourceType":"module"}