{"ast":null,"code":"var AWS = require('../core');\n\nvar regionUtil = require('../region_config');\n\nvar s3util = {\n  /**\n   * @api private\n   */\n  isArnInParam: function isArnInParam(req, paramName) {\n    var inputShape = (req.service.api.operations[req.operation] || {}).input || {};\n    var inputMembers = inputShape.members || {};\n    if (!req.params[paramName] || !inputMembers[paramName]) return false;\n    return AWS.util.ARN.validate(req.params[paramName]);\n  },\n\n  /**\n   * Validate service component from ARN supplied in Bucket parameter\n   */\n  validateArnService: function validateArnService(req) {\n    var parsedArn = req._parsedArn;\n\n    if (parsedArn.service !== 's3' && parsedArn.service !== 's3-outposts' && parsedArn.service !== 's3-object-lambda') {\n      throw AWS.util.error(new Error(), {\n        code: 'InvalidARN',\n        message: 'expect \\'s3\\' or \\'s3-outposts\\' or \\'s3-object-lambda\\' in ARN service component'\n      });\n    }\n  },\n\n  /**\n   * Validate account ID from ARN supplied in Bucket parameter is a valid account\n   */\n  validateArnAccount: function validateArnAccount(req) {\n    var parsedArn = req._parsedArn;\n\n    if (!/[0-9]{12}/.exec(parsedArn.accountId)) {\n      throw AWS.util.error(new Error(), {\n        code: 'InvalidARN',\n        message: 'ARN accountID does not match regex \"[0-9]{12}\"'\n      });\n    }\n  },\n\n  /**\n   * Validate ARN supplied in Bucket parameter is a valid access point ARN\n   */\n  validateS3AccessPointArn: function validateS3AccessPointArn(req) {\n    var parsedArn = req._parsedArn; //can be ':' or '/'\n\n    var delimiter = parsedArn.resource['accesspoint'.length];\n\n    if (parsedArn.resource.split(delimiter).length !== 2) {\n      throw AWS.util.error(new Error(), {\n        code: 'InvalidARN',\n        message: 'Access Point ARN should have one resource accesspoint/{accesspointName}'\n      });\n    }\n\n    var accessPoint = parsedArn.resource.split(delimiter)[1];\n    var accessPointPrefix = accessPoint + '-' + parsedArn.accountId;\n\n    if (!s3util.dnsCompatibleBucketName(accessPointPrefix) || accessPointPrefix.match(/\\./)) {\n      throw AWS.util.error(new Error(), {\n        code: 'InvalidARN',\n        message: 'Access point resource in ARN is not DNS compatible. Got ' + accessPoint\n      });\n    } //set parsed valid access point\n\n\n    req._parsedArn.accessPoint = accessPoint;\n  },\n\n  /**\n   * Validate Outposts ARN supplied in Bucket parameter is a valid outposts ARN\n   */\n  validateOutpostsArn: function validateOutpostsArn(req) {\n    var parsedArn = req._parsedArn;\n\n    if (parsedArn.resource.indexOf('outpost:') !== 0 && parsedArn.resource.indexOf('outpost/') !== 0) {\n      throw AWS.util.error(new Error(), {\n        code: 'InvalidARN',\n        message: 'ARN resource should begin with \\'outpost/\\''\n      });\n    } //can be ':' or '/'\n\n\n    var delimiter = parsedArn.resource['outpost'.length];\n    var outpostId = parsedArn.resource.split(delimiter)[1];\n    var dnsHostRegex = new RegExp(/^([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9-]{0,61}[a-zA-Z0-9])$/);\n\n    if (!dnsHostRegex.test(outpostId)) {\n      throw AWS.util.error(new Error(), {\n        code: 'InvalidARN',\n        message: 'Outpost resource in ARN is not DNS compatible. Got ' + outpostId\n      });\n    }\n\n    req._parsedArn.outpostId = outpostId;\n  },\n\n  /**\n   * Validate Outposts ARN supplied in Bucket parameter is a valid outposts ARN\n   */\n  validateOutpostsAccessPointArn: function validateOutpostsAccessPointArn(req) {\n    var parsedArn = req._parsedArn; //can be ':' or '/'\n\n    var delimiter = parsedArn.resource['outpost'.length];\n\n    if (parsedArn.resource.split(delimiter).length !== 4) {\n      throw AWS.util.error(new Error(), {\n        code: 'InvalidARN',\n        message: 'Outposts ARN should have two resources outpost/{outpostId}/accesspoint/{accesspointName}'\n      });\n    }\n\n    var accessPoint = parsedArn.resource.split(delimiter)[3];\n    var accessPointPrefix = accessPoint + '-' + parsedArn.accountId;\n\n    if (!s3util.dnsCompatibleBucketName(accessPointPrefix) || accessPointPrefix.match(/\\./)) {\n      throw AWS.util.error(new Error(), {\n        code: 'InvalidARN',\n        message: 'Access point resource in ARN is not DNS compatible. Got ' + accessPoint\n      });\n    } //set parsed valid access point\n\n\n    req._parsedArn.accessPoint = accessPoint;\n  },\n\n  /**\n   * Validate region field in ARN supplied in Bucket parameter is a valid region\n   */\n  validateArnRegion: function validateArnRegion(req, options) {\n    if (options === undefined) {\n      options = {};\n    }\n\n    var useArnRegion = s3util.loadUseArnRegionConfig(req);\n    var regionFromArn = req._parsedArn.region;\n    var clientRegion = req.service.config.region;\n    var useFipsEndpoint = req.service.config.useFipsEndpoint;\n    var allowFipsEndpoint = options.allowFipsEndpoint || false;\n\n    if (!regionFromArn) {\n      var message = 'ARN region is empty';\n\n      if (req._parsedArn.service === 's3') {\n        message = message + '\\nYou may want to use multi-regional ARN. The feature is not supported in current SDK. ' + 'You should consider switching to V3(https://github.com/aws/aws-sdk-js-v3).';\n      }\n\n      throw AWS.util.error(new Error(), {\n        code: 'InvalidARN',\n        message: message\n      });\n    }\n\n    if (useFipsEndpoint && !allowFipsEndpoint) {\n      throw AWS.util.error(new Error(), {\n        code: 'InvalidConfiguration',\n        message: 'ARN endpoint is not compatible with FIPS region'\n      });\n    }\n\n    if (regionFromArn.indexOf('fips') >= 0) {\n      throw AWS.util.error(new Error(), {\n        code: 'InvalidConfiguration',\n        message: 'FIPS region not allowed in ARN'\n      });\n    }\n\n    if (!useArnRegion && regionFromArn !== clientRegion) {\n      throw AWS.util.error(new Error(), {\n        code: 'InvalidConfiguration',\n        message: 'Configured region conflicts with access point region'\n      });\n    } else if (useArnRegion && regionUtil.getEndpointSuffix(regionFromArn) !== regionUtil.getEndpointSuffix(clientRegion)) {\n      throw AWS.util.error(new Error(), {\n        code: 'InvalidConfiguration',\n        message: 'Configured region and access point region not in same partition'\n      });\n    }\n\n    if (req.service.config.useAccelerateEndpoint) {\n      throw AWS.util.error(new Error(), {\n        code: 'InvalidConfiguration',\n        message: 'useAccelerateEndpoint config is not supported with access point ARN'\n      });\n    }\n\n    if (req._parsedArn.service === 's3-outposts' && req.service.config.useDualstackEndpoint) {\n      throw AWS.util.error(new Error(), {\n        code: 'InvalidConfiguration',\n        message: 'Dualstack is not supported with outposts access point ARN'\n      });\n    }\n  },\n  loadUseArnRegionConfig: function loadUseArnRegionConfig(req) {\n    var envName = 'AWS_S3_USE_ARN_REGION';\n    var configName = 's3_use_arn_region';\n    var useArnRegion = true;\n    var originalConfig = req.service._originalConfig || {};\n\n    if (req.service.config.s3UseArnRegion !== undefined) {\n      return req.service.config.s3UseArnRegion;\n    } else if (originalConfig.s3UseArnRegion !== undefined) {\n      useArnRegion = originalConfig.s3UseArnRegion === true;\n    } else if (AWS.util.isNode()) {\n      //load from environmental variable AWS_USE_ARN_REGION\n      if (process.env[envName]) {\n        var value = process.env[envName].trim().toLowerCase();\n\n        if (['false', 'true'].indexOf(value) < 0) {\n          throw AWS.util.error(new Error(), {\n            code: 'InvalidConfiguration',\n            message: envName + ' only accepts true or false. Got ' + process.env[envName],\n            retryable: false\n          });\n        }\n\n        useArnRegion = value === 'true';\n      } else {\n        //load from shared config property use_arn_region\n        var profiles = {};\n        var profile = {};\n\n        try {\n          profiles = AWS.util.getProfilesFromSharedConfig(AWS.util.iniLoader);\n          profile = profiles[process.env.AWS_PROFILE || AWS.util.defaultProfile];\n        } catch (e) {}\n\n        if (profile[configName]) {\n          if (['false', 'true'].indexOf(profile[configName].trim().toLowerCase()) < 0) {\n            throw AWS.util.error(new Error(), {\n              code: 'InvalidConfiguration',\n              message: configName + ' only accepts true or false. Got ' + profile[configName],\n              retryable: false\n            });\n          }\n\n          useArnRegion = profile[configName].trim().toLowerCase() === 'true';\n        }\n      }\n    }\n\n    req.service.config.s3UseArnRegion = useArnRegion;\n    return useArnRegion;\n  },\n\n  /**\n   * Validations before URI can be populated\n   */\n  validatePopulateUriFromArn: function validatePopulateUriFromArn(req) {\n    if (req.service._originalConfig && req.service._originalConfig.endpoint) {\n      throw AWS.util.error(new Error(), {\n        code: 'InvalidConfiguration',\n        message: 'Custom endpoint is not compatible with access point ARN'\n      });\n    }\n\n    if (req.service.config.s3ForcePathStyle) {\n      throw AWS.util.error(new Error(), {\n        code: 'InvalidConfiguration',\n        message: 'Cannot construct path-style endpoint with access point'\n      });\n    }\n  },\n\n  /**\n   * Returns true if the bucket name is DNS compatible.  Buckets created\n   * outside of the classic region MUST be DNS compatible.\n   *\n   * @api private\n   */\n  dnsCompatibleBucketName: function dnsCompatibleBucketName(bucketName) {\n    var b = bucketName;\n    var domain = new RegExp(/^[a-z0-9][a-z0-9\\.\\-]{1,61}[a-z0-9]$/);\n    var ipAddress = new RegExp(/(\\d+\\.){3}\\d+/);\n    var dots = new RegExp(/\\.\\./);\n    return b.match(domain) && !b.match(ipAddress) && !b.match(dots) ? true : false;\n  }\n};\n/**\n * @api private\n */\n\nmodule.exports = s3util;","map":{"version":3,"names":["AWS","require","regionUtil","s3util","isArnInParam","req","paramName","inputShape","service","api","operations","operation","input","inputMembers","members","params","util","ARN","validate","validateArnService","parsedArn","_parsedArn","error","Error","code","message","validateArnAccount","exec","accountId","validateS3AccessPointArn","delimiter","resource","length","split","accessPoint","accessPointPrefix","dnsCompatibleBucketName","match","validateOutpostsArn","indexOf","outpostId","dnsHostRegex","RegExp","test","validateOutpostsAccessPointArn","validateArnRegion","options","undefined","useArnRegion","loadUseArnRegionConfig","regionFromArn","region","clientRegion","config","useFipsEndpoint","allowFipsEndpoint","getEndpointSuffix","useAccelerateEndpoint","useDualstackEndpoint","envName","configName","originalConfig","_originalConfig","s3UseArnRegion","isNode","process","env","value","trim","toLowerCase","retryable","profiles","profile","getProfilesFromSharedConfig","iniLoader","AWS_PROFILE","defaultProfile","e","validatePopulateUriFromArn","endpoint","s3ForcePathStyle","bucketName","b","domain","ipAddress","dots","module","exports"],"sources":["/Users/lazarbogdan/test/medicacasa-frontend/node_modules/aws-sdk/lib/services/s3util.js"],"sourcesContent":["var AWS = require('../core');\nvar regionUtil = require('../region_config');\n\nvar s3util = {\n  /**\n   * @api private\n   */\n  isArnInParam: function isArnInParam(req, paramName) {\n    var inputShape = (req.service.api.operations[req.operation] || {}).input || {};\n    var inputMembers = inputShape.members || {};\n    if (!req.params[paramName] || !inputMembers[paramName]) return false;\n    return AWS.util.ARN.validate(req.params[paramName]);\n  },\n\n  /**\n   * Validate service component from ARN supplied in Bucket parameter\n   */\n  validateArnService: function validateArnService(req) {\n    var parsedArn = req._parsedArn;\n\n    if (parsedArn.service !== 's3'\n      && parsedArn.service !== 's3-outposts'\n      && parsedArn.service !== 's3-object-lambda') {\n      throw AWS.util.error(new Error(), {\n        code: 'InvalidARN',\n        message: 'expect \\'s3\\' or \\'s3-outposts\\' or \\'s3-object-lambda\\' in ARN service component'\n      });\n    }\n  },\n\n  /**\n   * Validate account ID from ARN supplied in Bucket parameter is a valid account\n   */\n  validateArnAccount: function validateArnAccount(req) {\n    var parsedArn = req._parsedArn;\n\n    if (!/[0-9]{12}/.exec(parsedArn.accountId)) {\n      throw AWS.util.error(new Error(), {\n        code: 'InvalidARN',\n        message: 'ARN accountID does not match regex \"[0-9]{12}\"'\n      });\n    }\n  },\n\n  /**\n   * Validate ARN supplied in Bucket parameter is a valid access point ARN\n   */\n  validateS3AccessPointArn: function validateS3AccessPointArn(req) {\n    var parsedArn = req._parsedArn;\n\n    //can be ':' or '/'\n    var delimiter = parsedArn.resource['accesspoint'.length];\n\n    if (parsedArn.resource.split(delimiter).length !== 2) {\n      throw AWS.util.error(new Error(), {\n        code: 'InvalidARN',\n        message: 'Access Point ARN should have one resource accesspoint/{accesspointName}'\n      });\n    }\n\n    var accessPoint = parsedArn.resource.split(delimiter)[1];\n    var accessPointPrefix = accessPoint + '-' + parsedArn.accountId;\n    if (!s3util.dnsCompatibleBucketName(accessPointPrefix) || accessPointPrefix.match(/\\./)) {\n      throw AWS.util.error(new Error(), {\n        code: 'InvalidARN',\n        message: 'Access point resource in ARN is not DNS compatible. Got ' + accessPoint\n      });\n    }\n\n    //set parsed valid access point\n    req._parsedArn.accessPoint = accessPoint;\n  },\n\n  /**\n   * Validate Outposts ARN supplied in Bucket parameter is a valid outposts ARN\n   */\n  validateOutpostsArn: function validateOutpostsArn(req) {\n    var parsedArn = req._parsedArn;\n\n    if (\n      parsedArn.resource.indexOf('outpost:') !== 0 &&\n      parsedArn.resource.indexOf('outpost/') !== 0\n    ) {\n      throw AWS.util.error(new Error(), {\n        code: 'InvalidARN',\n        message: 'ARN resource should begin with \\'outpost/\\''\n      });\n    }\n\n    //can be ':' or '/'\n    var delimiter = parsedArn.resource['outpost'.length];\n    var outpostId = parsedArn.resource.split(delimiter)[1];\n    var dnsHostRegex = new RegExp(/^([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9-]{0,61}[a-zA-Z0-9])$/);\n    if (!dnsHostRegex.test(outpostId)) {\n      throw AWS.util.error(new Error(), {\n        code: 'InvalidARN',\n        message: 'Outpost resource in ARN is not DNS compatible. Got ' + outpostId\n      });\n    }\n    req._parsedArn.outpostId = outpostId;\n  },\n\n  /**\n   * Validate Outposts ARN supplied in Bucket parameter is a valid outposts ARN\n   */\n  validateOutpostsAccessPointArn: function validateOutpostsAccessPointArn(req) {\n    var parsedArn = req._parsedArn;\n\n    //can be ':' or '/'\n    var delimiter = parsedArn.resource['outpost'.length];\n\n    if (parsedArn.resource.split(delimiter).length !== 4) {\n      throw AWS.util.error(new Error(), {\n        code: 'InvalidARN',\n        message: 'Outposts ARN should have two resources outpost/{outpostId}/accesspoint/{accesspointName}'\n      });\n    }\n\n    var accessPoint = parsedArn.resource.split(delimiter)[3];\n    var accessPointPrefix = accessPoint + '-' + parsedArn.accountId;\n    if (!s3util.dnsCompatibleBucketName(accessPointPrefix) || accessPointPrefix.match(/\\./)) {\n      throw AWS.util.error(new Error(), {\n        code: 'InvalidARN',\n        message: 'Access point resource in ARN is not DNS compatible. Got ' + accessPoint\n      });\n    }\n\n    //set parsed valid access point\n    req._parsedArn.accessPoint = accessPoint;\n  },\n\n  /**\n   * Validate region field in ARN supplied in Bucket parameter is a valid region\n   */\n  validateArnRegion: function validateArnRegion(req, options) {\n    if (options === undefined) {\n      options = {};\n    }\n\n    var useArnRegion = s3util.loadUseArnRegionConfig(req);\n    var regionFromArn = req._parsedArn.region;\n    var clientRegion = req.service.config.region;\n    var useFipsEndpoint = req.service.config.useFipsEndpoint;\n    var allowFipsEndpoint = options.allowFipsEndpoint || false;\n\n    if (!regionFromArn) {\n      var message = 'ARN region is empty';\n      if (req._parsedArn.service === 's3') {\n        message = message + '\\nYou may want to use multi-regional ARN. The feature is not supported in current SDK. ' +\n        'You should consider switching to V3(https://github.com/aws/aws-sdk-js-v3).';\n      }\n      throw AWS.util.error(new Error(), {\n        code: 'InvalidARN',\n        message: message\n      });\n    }\n\n    if (useFipsEndpoint && !allowFipsEndpoint) {\n      throw AWS.util.error(new Error(), {\n        code: 'InvalidConfiguration',\n        message: 'ARN endpoint is not compatible with FIPS region'\n      });\n    }\n\n    if (regionFromArn.indexOf('fips') >= 0) {\n      throw AWS.util.error(new Error(), {\n        code: 'InvalidConfiguration',\n        message: 'FIPS region not allowed in ARN'\n      });\n    }\n\n    if (!useArnRegion && regionFromArn !== clientRegion) {\n      throw AWS.util.error(new Error(), {\n        code: 'InvalidConfiguration',\n        message: 'Configured region conflicts with access point region'\n      });\n    } else if (\n      useArnRegion &&\n      regionUtil.getEndpointSuffix(regionFromArn) !== regionUtil.getEndpointSuffix(clientRegion)\n    ) {\n      throw AWS.util.error(new Error(), {\n        code: 'InvalidConfiguration',\n        message: 'Configured region and access point region not in same partition'\n      });\n    }\n\n    if (req.service.config.useAccelerateEndpoint) {\n      throw AWS.util.error(new Error(), {\n        code: 'InvalidConfiguration',\n        message: 'useAccelerateEndpoint config is not supported with access point ARN'\n      });\n    }\n\n    if (req._parsedArn.service === 's3-outposts' && req.service.config.useDualstackEndpoint) {\n      throw AWS.util.error(new Error(), {\n        code: 'InvalidConfiguration',\n        message: 'Dualstack is not supported with outposts access point ARN'\n      });\n    }\n  },\n\n  loadUseArnRegionConfig: function loadUseArnRegionConfig(req) {\n    var envName = 'AWS_S3_USE_ARN_REGION';\n    var configName = 's3_use_arn_region';\n    var useArnRegion = true;\n    var originalConfig = req.service._originalConfig || {};\n    if (req.service.config.s3UseArnRegion !== undefined) {\n      return req.service.config.s3UseArnRegion;\n    } else if (originalConfig.s3UseArnRegion !== undefined) {\n      useArnRegion = originalConfig.s3UseArnRegion === true;\n    } else if (AWS.util.isNode()) {\n      //load from environmental variable AWS_USE_ARN_REGION\n      if (process.env[envName]) {\n        var value = process.env[envName].trim().toLowerCase();\n        if (['false', 'true'].indexOf(value) < 0) {\n          throw AWS.util.error(new Error(), {\n            code: 'InvalidConfiguration',\n            message: envName + ' only accepts true or false. Got ' + process.env[envName],\n            retryable: false\n          });\n        }\n        useArnRegion = value === 'true';\n      } else {  //load from shared config property use_arn_region\n        var profiles = {};\n        var profile = {};\n        try {\n          profiles = AWS.util.getProfilesFromSharedConfig(AWS.util.iniLoader);\n          profile = profiles[process.env.AWS_PROFILE || AWS.util.defaultProfile];\n        } catch (e) {}\n        if (profile[configName]) {\n          if (['false', 'true'].indexOf(profile[configName].trim().toLowerCase()) < 0) {\n            throw AWS.util.error(new Error(), {\n              code: 'InvalidConfiguration',\n              message: configName + ' only accepts true or false. Got ' + profile[configName],\n              retryable: false\n            });\n          }\n          useArnRegion = profile[configName].trim().toLowerCase() === 'true';\n        }\n      }\n    }\n    req.service.config.s3UseArnRegion = useArnRegion;\n    return useArnRegion;\n  },\n\n  /**\n   * Validations before URI can be populated\n   */\n  validatePopulateUriFromArn: function validatePopulateUriFromArn(req) {\n    if (req.service._originalConfig && req.service._originalConfig.endpoint) {\n      throw AWS.util.error(new Error(), {\n        code: 'InvalidConfiguration',\n        message: 'Custom endpoint is not compatible with access point ARN'\n      });\n    }\n\n    if (req.service.config.s3ForcePathStyle) {\n      throw AWS.util.error(new Error(), {\n        code: 'InvalidConfiguration',\n        message: 'Cannot construct path-style endpoint with access point'\n      });\n    }\n  },\n\n  /**\n   * Returns true if the bucket name is DNS compatible.  Buckets created\n   * outside of the classic region MUST be DNS compatible.\n   *\n   * @api private\n   */\n  dnsCompatibleBucketName: function dnsCompatibleBucketName(bucketName) {\n    var b = bucketName;\n    var domain = new RegExp(/^[a-z0-9][a-z0-9\\.\\-]{1,61}[a-z0-9]$/);\n    var ipAddress = new RegExp(/(\\d+\\.){3}\\d+/);\n    var dots = new RegExp(/\\.\\./);\n    return (b.match(domain) && !b.match(ipAddress) && !b.match(dots)) ? true : false;\n  },\n};\n\n/**\n * @api private\n */\nmodule.exports = s3util;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}