{"ast":null,"code":"var util = require('../util');\n\nvar JsonBuilder = require('../json/builder');\n\nvar JsonParser = require('../json/parser');\n\nvar populateHostPrefix = require('./helpers').populateHostPrefix;\n\nfunction buildRequest(req) {\n  var httpRequest = req.httpRequest;\n  var api = req.service.api;\n  var target = api.targetPrefix + '.' + api.operations[req.operation].name;\n  var version = api.jsonVersion || '1.0';\n  var input = api.operations[req.operation].input;\n  var builder = new JsonBuilder();\n  if (version === 1) version = '1.0';\n  httpRequest.body = builder.build(req.params || {}, input);\n  httpRequest.headers['Content-Type'] = 'application/x-amz-json-' + version;\n  httpRequest.headers['X-Amz-Target'] = target;\n  populateHostPrefix(req);\n}\n\nfunction extractError(resp) {\n  var error = {};\n  var httpResponse = resp.httpResponse;\n  error.code = httpResponse.headers['x-amzn-errortype'] || 'UnknownError';\n\n  if (typeof error.code === 'string') {\n    error.code = error.code.split(':')[0];\n  }\n\n  if (httpResponse.body.length > 0) {\n    try {\n      var e = JSON.parse(httpResponse.body.toString());\n      var code = e.__type || e.code || e.Code;\n\n      if (code) {\n        error.code = code.split('#').pop();\n      }\n\n      if (error.code === 'RequestEntityTooLarge') {\n        error.message = 'Request body must be less than 1 MB';\n      } else {\n        error.message = e.message || e.Message || null;\n      }\n    } catch (e) {\n      error.statusCode = httpResponse.statusCode;\n      error.message = httpResponse.statusMessage;\n    }\n  } else {\n    error.statusCode = httpResponse.statusCode;\n    error.message = httpResponse.statusCode.toString();\n  }\n\n  resp.error = util.error(new Error(), error);\n}\n\nfunction extractData(resp) {\n  var body = resp.httpResponse.body.toString() || '{}';\n\n  if (resp.request.service.config.convertResponseTypes === false) {\n    resp.data = JSON.parse(body);\n  } else {\n    var operation = resp.request.service.api.operations[resp.request.operation];\n    var shape = operation.output || {};\n    var parser = new JsonParser();\n    resp.data = parser.parse(body, shape);\n  }\n}\n/**\n * @api private\n */\n\n\nmodule.exports = {\n  buildRequest: buildRequest,\n  extractError: extractError,\n  extractData: extractData\n};","map":{"version":3,"names":["util","require","JsonBuilder","JsonParser","populateHostPrefix","buildRequest","req","httpRequest","api","service","target","targetPrefix","operations","operation","name","version","jsonVersion","input","builder","body","build","params","headers","extractError","resp","error","httpResponse","code","split","length","e","JSON","parse","toString","__type","Code","pop","message","Message","statusCode","statusMessage","Error","extractData","request","config","convertResponseTypes","data","shape","output","parser","module","exports"],"sources":["/Users/lazarbogdan/test/medicacasa-frontend/medicacasa-frontend/node_modules/aws-sdk/lib/protocol/json.js"],"sourcesContent":["var util = require('../util');\nvar JsonBuilder = require('../json/builder');\nvar JsonParser = require('../json/parser');\nvar populateHostPrefix = require('./helpers').populateHostPrefix;\n\nfunction buildRequest(req) {\n  var httpRequest = req.httpRequest;\n  var api = req.service.api;\n  var target = api.targetPrefix + '.' + api.operations[req.operation].name;\n  var version = api.jsonVersion || '1.0';\n  var input = api.operations[req.operation].input;\n  var builder = new JsonBuilder();\n\n  if (version === 1) version = '1.0';\n  httpRequest.body = builder.build(req.params || {}, input);\n  httpRequest.headers['Content-Type'] = 'application/x-amz-json-' + version;\n  httpRequest.headers['X-Amz-Target'] = target;\n\n  populateHostPrefix(req);\n}\n\nfunction extractError(resp) {\n  var error = {};\n  var httpResponse = resp.httpResponse;\n\n  error.code = httpResponse.headers['x-amzn-errortype'] || 'UnknownError';\n  if (typeof error.code === 'string') {\n    error.code = error.code.split(':')[0];\n  }\n\n  if (httpResponse.body.length > 0) {\n    try {\n      var e = JSON.parse(httpResponse.body.toString());\n      var code = e.__type || e.code || e.Code;\n      if (code) {\n        error.code = code.split('#').pop();\n      }\n      if (error.code === 'RequestEntityTooLarge') {\n        error.message = 'Request body must be less than 1 MB';\n      } else {\n        error.message = (e.message || e.Message || null);\n      }\n    } catch (e) {\n      error.statusCode = httpResponse.statusCode;\n      error.message = httpResponse.statusMessage;\n    }\n  } else {\n    error.statusCode = httpResponse.statusCode;\n    error.message = httpResponse.statusCode.toString();\n  }\n\n  resp.error = util.error(new Error(), error);\n}\n\nfunction extractData(resp) {\n  var body = resp.httpResponse.body.toString() || '{}';\n  if (resp.request.service.config.convertResponseTypes === false) {\n    resp.data = JSON.parse(body);\n  } else {\n    var operation = resp.request.service.api.operations[resp.request.operation];\n    var shape = operation.output || {};\n    var parser = new JsonParser();\n    resp.data = parser.parse(body, shape);\n  }\n}\n\n/**\n * @api private\n */\nmodule.exports = {\n  buildRequest: buildRequest,\n  extractError: extractError,\n  extractData: extractData\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}