{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { hashPropsWithAliases } from '../constants/dict';\nimport { PropInfoCollisionError } from './errors';\nvar configuration = {\n  useValidate: process.env === 'development'\n};\nexport var configure = function configure(override) {\n  configuration = _extends(_extends({}, configuration), override);\n};\n\nvar validateNodes = function validateNodes(nodes) {\n  return nodes.reduce(function (acc, _ref) {\n    var key = _ref[0],\n        nodeInfo = _ref[1];\n    validateNode(acc, nodeInfo, key);\n    acc[key] = nodeInfo;\n    return acc;\n  }, {});\n};\n\nvar validateNode = function validateNode(tree, node, key) {\n  if (!configuration.useValidate) {\n    return;\n  }\n\n  if (hashPropsWithAliases[key]) {\n    throw new PropInfoCollisionError(\"key \" + key + \" in propInfo must be unque, found in style name\");\n  }\n};\n\nexport default (function (propInfo) {\n  return validateNodes(Object.entries(propInfo));\n});","map":{"version":3,"names":["_extends","hashPropsWithAliases","PropInfoCollisionError","configuration","useValidate","process","env","configure","override","validateNodes","nodes","reduce","acc","_ref","key","nodeInfo","validateNode","tree","node","propInfo","Object","entries"],"sources":["/Users/lazarbogdan/test/medicacasa-frontend/node_modules/@quarkly/atomize/build/esm/prop-info/index.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { hashPropsWithAliases } from '../constants/dict';\nimport { PropInfoCollisionError } from './errors';\nvar configuration = {\n  useValidate: process.env === 'development'\n};\nexport var configure = function configure(override) {\n  configuration = _extends(_extends({}, configuration), override);\n};\n\nvar validateNodes = function validateNodes(nodes) {\n  return nodes.reduce(function (acc, _ref) {\n    var key = _ref[0],\n        nodeInfo = _ref[1];\n    validateNode(acc, nodeInfo, key);\n    acc[key] = nodeInfo;\n    return acc;\n  }, {});\n};\n\nvar validateNode = function validateNode(tree, node, key) {\n  if (!configuration.useValidate) {\n    return;\n  }\n\n  if (hashPropsWithAliases[key]) {\n    throw new PropInfoCollisionError(\"key \" + key + \" in propInfo must be unque, found in style name\");\n  }\n};\n\nexport default (function (propInfo) {\n  return validateNodes(Object.entries(propInfo));\n});"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,oCAArB;AACA,SAASC,oBAAT,QAAqC,mBAArC;AACA,SAASC,sBAAT,QAAuC,UAAvC;AACA,IAAIC,aAAa,GAAG;EAClBC,WAAW,EAAEC,OAAO,CAACC,GAAR,KAAgB;AADX,CAApB;AAGA,OAAO,IAAIC,SAAS,GAAG,SAASA,SAAT,CAAmBC,QAAnB,EAA6B;EAClDL,aAAa,GAAGH,QAAQ,CAACA,QAAQ,CAAC,EAAD,EAAKG,aAAL,CAAT,EAA8BK,QAA9B,CAAxB;AACD,CAFM;;AAIP,IAAIC,aAAa,GAAG,SAASA,aAAT,CAAuBC,KAAvB,EAA8B;EAChD,OAAOA,KAAK,CAACC,MAAN,CAAa,UAAUC,GAAV,EAAeC,IAAf,EAAqB;IACvC,IAAIC,GAAG,GAAGD,IAAI,CAAC,CAAD,CAAd;IAAA,IACIE,QAAQ,GAAGF,IAAI,CAAC,CAAD,CADnB;IAEAG,YAAY,CAACJ,GAAD,EAAMG,QAAN,EAAgBD,GAAhB,CAAZ;IACAF,GAAG,CAACE,GAAD,CAAH,GAAWC,QAAX;IACA,OAAOH,GAAP;EACD,CANM,EAMJ,EANI,CAAP;AAOD,CARD;;AAUA,IAAII,YAAY,GAAG,SAASA,YAAT,CAAsBC,IAAtB,EAA4BC,IAA5B,EAAkCJ,GAAlC,EAAuC;EACxD,IAAI,CAACX,aAAa,CAACC,WAAnB,EAAgC;IAC9B;EACD;;EAED,IAAIH,oBAAoB,CAACa,GAAD,CAAxB,EAA+B;IAC7B,MAAM,IAAIZ,sBAAJ,CAA2B,SAASY,GAAT,GAAe,iDAA1C,CAAN;EACD;AACF,CARD;;AAUA,gBAAgB,UAAUK,QAAV,EAAoB;EAClC,OAAOV,aAAa,CAACW,MAAM,CAACC,OAAP,CAAeF,QAAf,CAAD,CAApB;AACD,CAFD"},"metadata":{},"sourceType":"module"}