{"ast":null,"code":"var AWS = require('../core');\n\nvar util = AWS.util;\n\nvar typeOf = require('./types').typeOf;\n\nvar DynamoDBSet = require('./set');\n\nvar NumberValue = require('./numberValue');\n\nAWS.DynamoDB.Converter = {\n  /**\n   * Convert a JavaScript value to its equivalent DynamoDB AttributeValue type\n   *\n   * @param data [any] The data to convert to a DynamoDB AttributeValue\n   * @param options [map]\n   * @option options convertEmptyValues [Boolean] Whether to automatically\n   *                                              convert empty strings, blobs,\n   *                                              and sets to `null`\n   * @option options wrapNumbers [Boolean]  Whether to return numbers as a\n   *                                        NumberValue object instead of\n   *                                        converting them to native JavaScript\n   *                                        numbers. This allows for the safe\n   *                                        round-trip transport of numbers of\n   *                                        arbitrary size.\n   * @return [map] An object in the Amazon DynamoDB AttributeValue format\n   *\n   * @see AWS.DynamoDB.Converter.marshall AWS.DynamoDB.Converter.marshall to\n   *    convert entire records (rather than individual attributes)\n   */\n  input: function convertInput(data, options) {\n    options = options || {};\n    var type = typeOf(data);\n\n    if (type === 'Object') {\n      return formatMap(data, options);\n    } else if (type === 'Array') {\n      return formatList(data, options);\n    } else if (type === 'Set') {\n      return formatSet(data, options);\n    } else if (type === 'String') {\n      if (data.length === 0 && options.convertEmptyValues) {\n        return convertInput(null);\n      }\n\n      return {\n        S: data\n      };\n    } else if (type === 'Number' || type === 'NumberValue') {\n      return {\n        N: data.toString()\n      };\n    } else if (type === 'Binary') {\n      if (data.length === 0 && options.convertEmptyValues) {\n        return convertInput(null);\n      }\n\n      return {\n        B: data\n      };\n    } else if (type === 'Boolean') {\n      return {\n        BOOL: data\n      };\n    } else if (type === 'null') {\n      return {\n        NULL: true\n      };\n    } else if (type !== 'undefined' && type !== 'Function') {\n      // this value has a custom constructor\n      return formatMap(data, options);\n    }\n  },\n\n  /**\n   * Convert a JavaScript object into a DynamoDB record.\n   *\n   * @param data [any] The data to convert to a DynamoDB record\n   * @param options [map]\n   * @option options convertEmptyValues [Boolean] Whether to automatically\n   *                                              convert empty strings, blobs,\n   *                                              and sets to `null`\n   * @option options wrapNumbers [Boolean]  Whether to return numbers as a\n   *                                        NumberValue object instead of\n   *                                        converting them to native JavaScript\n   *                                        numbers. This allows for the safe\n   *                                        round-trip transport of numbers of\n   *                                        arbitrary size.\n   *\n   * @return [map] An object in the DynamoDB record format.\n   *\n   * @example Convert a JavaScript object into a DynamoDB record\n   *  var marshalled = AWS.DynamoDB.Converter.marshall({\n   *    string: 'foo',\n   *    list: ['fizz', 'buzz', 'pop'],\n   *    map: {\n   *      nestedMap: {\n   *        key: 'value',\n   *      }\n   *    },\n   *    number: 123,\n   *    nullValue: null,\n   *    boolValue: true,\n   *    stringSet: new DynamoDBSet(['foo', 'bar', 'baz'])\n   *  });\n   */\n  marshall: function marshallItem(data, options) {\n    return AWS.DynamoDB.Converter.input(data, options).M;\n  },\n\n  /**\n   * Convert a DynamoDB AttributeValue object to its equivalent JavaScript type.\n   *\n   * @param data [map] An object in the Amazon DynamoDB AttributeValue format\n   * @param options [map]\n   * @option options convertEmptyValues [Boolean] Whether to automatically\n   *                                              convert empty strings, blobs,\n   *                                              and sets to `null`\n   * @option options wrapNumbers [Boolean]  Whether to return numbers as a\n   *                                        NumberValue object instead of\n   *                                        converting them to native JavaScript\n   *                                        numbers. This allows for the safe\n   *                                        round-trip transport of numbers of\n   *                                        arbitrary size.\n   *\n   * @return [Object|Array|String|Number|Boolean|null]\n   *\n   * @see AWS.DynamoDB.Converter.unmarshall AWS.DynamoDB.Converter.unmarshall to\n   *    convert entire records (rather than individual attributes)\n   */\n  output: function convertOutput(data, options) {\n    options = options || {};\n    var list, map, i;\n\n    for (var type in data) {\n      var values = data[type];\n\n      if (type === 'M') {\n        map = {};\n\n        for (var key in values) {\n          map[key] = convertOutput(values[key], options);\n        }\n\n        return map;\n      } else if (type === 'L') {\n        list = [];\n\n        for (i = 0; i < values.length; i++) {\n          list.push(convertOutput(values[i], options));\n        }\n\n        return list;\n      } else if (type === 'SS') {\n        list = [];\n\n        for (i = 0; i < values.length; i++) {\n          list.push(values[i] + '');\n        }\n\n        return new DynamoDBSet(list);\n      } else if (type === 'NS') {\n        list = [];\n\n        for (i = 0; i < values.length; i++) {\n          list.push(convertNumber(values[i], options.wrapNumbers));\n        }\n\n        return new DynamoDBSet(list);\n      } else if (type === 'BS') {\n        list = [];\n\n        for (i = 0; i < values.length; i++) {\n          list.push(AWS.util.buffer.toBuffer(values[i]));\n        }\n\n        return new DynamoDBSet(list);\n      } else if (type === 'S') {\n        return values + '';\n      } else if (type === 'N') {\n        return convertNumber(values, options.wrapNumbers);\n      } else if (type === 'B') {\n        return util.buffer.toBuffer(values);\n      } else if (type === 'BOOL') {\n        return values === 'true' || values === 'TRUE' || values === true;\n      } else if (type === 'NULL') {\n        return null;\n      }\n    }\n  },\n\n  /**\n   * Convert a DynamoDB record into a JavaScript object.\n   *\n   * @param data [any] The DynamoDB record\n   * @param options [map]\n   * @option options convertEmptyValues [Boolean] Whether to automatically\n   *                                              convert empty strings, blobs,\n   *                                              and sets to `null`\n   * @option options wrapNumbers [Boolean]  Whether to return numbers as a\n   *                                        NumberValue object instead of\n   *                                        converting them to native JavaScript\n   *                                        numbers. This allows for the safe\n   *                                        round-trip transport of numbers of\n   *                                        arbitrary size.\n   *\n   * @return [map] An object whose properties have been converted from\n   *    DynamoDB's AttributeValue format into their corresponding native\n   *    JavaScript types.\n   *\n   * @example Convert a record received from a DynamoDB stream\n   *  var unmarshalled = AWS.DynamoDB.Converter.unmarshall({\n   *    string: {S: 'foo'},\n   *    list: {L: [{S: 'fizz'}, {S: 'buzz'}, {S: 'pop'}]},\n   *    map: {\n   *      M: {\n   *        nestedMap: {\n   *          M: {\n   *            key: {S: 'value'}\n   *          }\n   *        }\n   *      }\n   *    },\n   *    number: {N: '123'},\n   *    nullValue: {NULL: true},\n   *    boolValue: {BOOL: true}\n   *  });\n   */\n  unmarshall: function unmarshall(data, options) {\n    return AWS.DynamoDB.Converter.output({\n      M: data\n    }, options);\n  }\n};\n/**\n * @api private\n * @param data [Array]\n * @param options [map]\n */\n\nfunction formatList(data, options) {\n  var list = {\n    L: []\n  };\n\n  for (var i = 0; i < data.length; i++) {\n    list['L'].push(AWS.DynamoDB.Converter.input(data[i], options));\n  }\n\n  return list;\n}\n/**\n * @api private\n * @param value [String]\n * @param wrapNumbers [Boolean]\n */\n\n\nfunction convertNumber(value, wrapNumbers) {\n  return wrapNumbers ? new NumberValue(value) : Number(value);\n}\n/**\n * @api private\n * @param data [map]\n * @param options [map]\n */\n\n\nfunction formatMap(data, options) {\n  var map = {\n    M: {}\n  };\n\n  for (var key in data) {\n    var formatted = AWS.DynamoDB.Converter.input(data[key], options);\n\n    if (formatted !== void 0) {\n      map['M'][key] = formatted;\n    }\n  }\n\n  return map;\n}\n/**\n * @api private\n */\n\n\nfunction formatSet(data, options) {\n  options = options || {};\n  var values = data.values;\n\n  if (options.convertEmptyValues) {\n    values = filterEmptySetValues(data);\n\n    if (values.length === 0) {\n      return AWS.DynamoDB.Converter.input(null);\n    }\n  }\n\n  var map = {};\n\n  switch (data.type) {\n    case 'String':\n      map['SS'] = values;\n      break;\n\n    case 'Binary':\n      map['BS'] = values;\n      break;\n\n    case 'Number':\n      map['NS'] = values.map(function (value) {\n        return value.toString();\n      });\n  }\n\n  return map;\n}\n/**\n * @api private\n */\n\n\nfunction filterEmptySetValues(set) {\n  var nonEmptyValues = [];\n  var potentiallyEmptyTypes = {\n    String: true,\n    Binary: true,\n    Number: false\n  };\n\n  if (potentiallyEmptyTypes[set.type]) {\n    for (var i = 0; i < set.values.length; i++) {\n      if (set.values[i].length === 0) {\n        continue;\n      }\n\n      nonEmptyValues.push(set.values[i]);\n    }\n\n    return nonEmptyValues;\n  }\n\n  return set.values;\n}\n/**\n * @api private\n */\n\n\nmodule.exports = AWS.DynamoDB.Converter;","map":{"version":3,"names":["AWS","require","util","typeOf","DynamoDBSet","NumberValue","DynamoDB","Converter","input","convertInput","data","options","type","formatMap","formatList","formatSet","length","convertEmptyValues","S","N","toString","B","BOOL","NULL","marshall","marshallItem","M","output","convertOutput","list","map","i","values","key","push","convertNumber","wrapNumbers","buffer","toBuffer","unmarshall","L","value","Number","formatted","filterEmptySetValues","set","nonEmptyValues","potentiallyEmptyTypes","String","Binary","module","exports"],"sources":["/Users/lazarbogdan/test/medicacasa-frontend/medicacasa-frontend/node_modules/aws-sdk/lib/dynamodb/converter.js"],"sourcesContent":["var AWS = require('../core');\nvar util = AWS.util;\nvar typeOf = require('./types').typeOf;\nvar DynamoDBSet = require('./set');\nvar NumberValue = require('./numberValue');\n\nAWS.DynamoDB.Converter = {\n  /**\n   * Convert a JavaScript value to its equivalent DynamoDB AttributeValue type\n   *\n   * @param data [any] The data to convert to a DynamoDB AttributeValue\n   * @param options [map]\n   * @option options convertEmptyValues [Boolean] Whether to automatically\n   *                                              convert empty strings, blobs,\n   *                                              and sets to `null`\n   * @option options wrapNumbers [Boolean]  Whether to return numbers as a\n   *                                        NumberValue object instead of\n   *                                        converting them to native JavaScript\n   *                                        numbers. This allows for the safe\n   *                                        round-trip transport of numbers of\n   *                                        arbitrary size.\n   * @return [map] An object in the Amazon DynamoDB AttributeValue format\n   *\n   * @see AWS.DynamoDB.Converter.marshall AWS.DynamoDB.Converter.marshall to\n   *    convert entire records (rather than individual attributes)\n   */\n  input: function convertInput(data, options) {\n    options = options || {};\n    var type = typeOf(data);\n    if (type === 'Object') {\n      return formatMap(data, options);\n    } else if (type === 'Array') {\n      return formatList(data, options);\n    } else if (type === 'Set') {\n      return formatSet(data, options);\n    } else if (type === 'String') {\n      if (data.length === 0 && options.convertEmptyValues) {\n        return convertInput(null);\n      }\n      return { S: data };\n    } else if (type === 'Number' || type === 'NumberValue') {\n      return { N: data.toString() };\n    } else if (type === 'Binary') {\n      if (data.length === 0 && options.convertEmptyValues) {\n        return convertInput(null);\n      }\n      return { B: data };\n    } else if (type === 'Boolean') {\n      return { BOOL: data };\n    } else if (type === 'null') {\n      return { NULL: true };\n    } else if (type !== 'undefined' && type !== 'Function') {\n      // this value has a custom constructor\n      return formatMap(data, options);\n    }\n  },\n\n  /**\n   * Convert a JavaScript object into a DynamoDB record.\n   *\n   * @param data [any] The data to convert to a DynamoDB record\n   * @param options [map]\n   * @option options convertEmptyValues [Boolean] Whether to automatically\n   *                                              convert empty strings, blobs,\n   *                                              and sets to `null`\n   * @option options wrapNumbers [Boolean]  Whether to return numbers as a\n   *                                        NumberValue object instead of\n   *                                        converting them to native JavaScript\n   *                                        numbers. This allows for the safe\n   *                                        round-trip transport of numbers of\n   *                                        arbitrary size.\n   *\n   * @return [map] An object in the DynamoDB record format.\n   *\n   * @example Convert a JavaScript object into a DynamoDB record\n   *  var marshalled = AWS.DynamoDB.Converter.marshall({\n   *    string: 'foo',\n   *    list: ['fizz', 'buzz', 'pop'],\n   *    map: {\n   *      nestedMap: {\n   *        key: 'value',\n   *      }\n   *    },\n   *    number: 123,\n   *    nullValue: null,\n   *    boolValue: true,\n   *    stringSet: new DynamoDBSet(['foo', 'bar', 'baz'])\n   *  });\n   */\n  marshall: function marshallItem(data, options) {\n    return AWS.DynamoDB.Converter.input(data, options).M;\n  },\n\n  /**\n   * Convert a DynamoDB AttributeValue object to its equivalent JavaScript type.\n   *\n   * @param data [map] An object in the Amazon DynamoDB AttributeValue format\n   * @param options [map]\n   * @option options convertEmptyValues [Boolean] Whether to automatically\n   *                                              convert empty strings, blobs,\n   *                                              and sets to `null`\n   * @option options wrapNumbers [Boolean]  Whether to return numbers as a\n   *                                        NumberValue object instead of\n   *                                        converting them to native JavaScript\n   *                                        numbers. This allows for the safe\n   *                                        round-trip transport of numbers of\n   *                                        arbitrary size.\n   *\n   * @return [Object|Array|String|Number|Boolean|null]\n   *\n   * @see AWS.DynamoDB.Converter.unmarshall AWS.DynamoDB.Converter.unmarshall to\n   *    convert entire records (rather than individual attributes)\n   */\n  output: function convertOutput(data, options) {\n    options = options || {};\n    var list, map, i;\n    for (var type in data) {\n      var values = data[type];\n      if (type === 'M') {\n        map = {};\n        for (var key in values) {\n          map[key] = convertOutput(values[key], options);\n        }\n        return map;\n      } else if (type === 'L') {\n        list = [];\n        for (i = 0; i < values.length; i++) {\n          list.push(convertOutput(values[i], options));\n        }\n        return list;\n      } else if (type === 'SS') {\n        list = [];\n        for (i = 0; i < values.length; i++) {\n          list.push(values[i] + '');\n        }\n        return new DynamoDBSet(list);\n      } else if (type === 'NS') {\n        list = [];\n        for (i = 0; i < values.length; i++) {\n          list.push(convertNumber(values[i], options.wrapNumbers));\n        }\n        return new DynamoDBSet(list);\n      } else if (type === 'BS') {\n        list = [];\n        for (i = 0; i < values.length; i++) {\n          list.push(AWS.util.buffer.toBuffer(values[i]));\n        }\n        return new DynamoDBSet(list);\n      } else if (type === 'S') {\n        return values + '';\n      } else if (type === 'N') {\n        return convertNumber(values, options.wrapNumbers);\n      } else if (type === 'B') {\n        return util.buffer.toBuffer(values);\n      } else if (type === 'BOOL') {\n        return (values === 'true' || values === 'TRUE' || values === true);\n      } else if (type === 'NULL') {\n        return null;\n      }\n    }\n  },\n\n  /**\n   * Convert a DynamoDB record into a JavaScript object.\n   *\n   * @param data [any] The DynamoDB record\n   * @param options [map]\n   * @option options convertEmptyValues [Boolean] Whether to automatically\n   *                                              convert empty strings, blobs,\n   *                                              and sets to `null`\n   * @option options wrapNumbers [Boolean]  Whether to return numbers as a\n   *                                        NumberValue object instead of\n   *                                        converting them to native JavaScript\n   *                                        numbers. This allows for the safe\n   *                                        round-trip transport of numbers of\n   *                                        arbitrary size.\n   *\n   * @return [map] An object whose properties have been converted from\n   *    DynamoDB's AttributeValue format into their corresponding native\n   *    JavaScript types.\n   *\n   * @example Convert a record received from a DynamoDB stream\n   *  var unmarshalled = AWS.DynamoDB.Converter.unmarshall({\n   *    string: {S: 'foo'},\n   *    list: {L: [{S: 'fizz'}, {S: 'buzz'}, {S: 'pop'}]},\n   *    map: {\n   *      M: {\n   *        nestedMap: {\n   *          M: {\n   *            key: {S: 'value'}\n   *          }\n   *        }\n   *      }\n   *    },\n   *    number: {N: '123'},\n   *    nullValue: {NULL: true},\n   *    boolValue: {BOOL: true}\n   *  });\n   */\n  unmarshall: function unmarshall(data, options) {\n    return AWS.DynamoDB.Converter.output({M: data}, options);\n  }\n};\n\n/**\n * @api private\n * @param data [Array]\n * @param options [map]\n */\nfunction formatList(data, options) {\n  var list = {L: []};\n  for (var i = 0; i < data.length; i++) {\n    list['L'].push(AWS.DynamoDB.Converter.input(data[i], options));\n  }\n  return list;\n}\n\n/**\n * @api private\n * @param value [String]\n * @param wrapNumbers [Boolean]\n */\nfunction convertNumber(value, wrapNumbers) {\n  return wrapNumbers ? new NumberValue(value) : Number(value);\n}\n\n/**\n * @api private\n * @param data [map]\n * @param options [map]\n */\nfunction formatMap(data, options) {\n  var map = {M: {}};\n  for (var key in data) {\n    var formatted = AWS.DynamoDB.Converter.input(data[key], options);\n    if (formatted !== void 0) {\n      map['M'][key] = formatted;\n    }\n  }\n  return map;\n}\n\n/**\n * @api private\n */\nfunction formatSet(data, options) {\n  options = options || {};\n  var values = data.values;\n  if (options.convertEmptyValues) {\n    values = filterEmptySetValues(data);\n    if (values.length === 0) {\n      return AWS.DynamoDB.Converter.input(null);\n    }\n  }\n\n  var map = {};\n  switch (data.type) {\n    case 'String': map['SS'] = values; break;\n    case 'Binary': map['BS'] = values; break;\n    case 'Number': map['NS'] = values.map(function (value) {\n      return value.toString();\n    });\n  }\n  return map;\n}\n\n/**\n * @api private\n */\nfunction filterEmptySetValues(set) {\n    var nonEmptyValues = [];\n    var potentiallyEmptyTypes = {\n        String: true,\n        Binary: true,\n        Number: false\n    };\n    if (potentiallyEmptyTypes[set.type]) {\n        for (var i = 0; i < set.values.length; i++) {\n            if (set.values[i].length === 0) {\n                continue;\n            }\n            nonEmptyValues.push(set.values[i]);\n        }\n\n        return nonEmptyValues;\n    }\n\n    return set.values;\n}\n\n/**\n * @api private\n */\nmodule.exports = AWS.DynamoDB.Converter;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}