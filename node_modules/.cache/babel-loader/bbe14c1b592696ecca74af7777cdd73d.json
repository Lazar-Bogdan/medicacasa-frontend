{"ast":null,"code":"var AWS = require('../core');\n\nvar util = require('../util');\n\nvar QueryParamSerializer = require('../query/query_param_serializer');\n\nvar Shape = require('../model/shape');\n\nvar populateHostPrefix = require('./helpers').populateHostPrefix;\n\nfunction buildRequest(req) {\n  var operation = req.service.api.operations[req.operation];\n  var httpRequest = req.httpRequest;\n  httpRequest.headers['Content-Type'] = 'application/x-www-form-urlencoded; charset=utf-8';\n  httpRequest.params = {\n    Version: req.service.api.apiVersion,\n    Action: operation.name\n  }; // convert the request parameters into a list of query params,\n  // e.g. Deeply.NestedParam.0.Name=value\n\n  var builder = new QueryParamSerializer();\n  builder.serialize(req.params, operation.input, function (name, value) {\n    httpRequest.params[name] = value;\n  });\n  httpRequest.body = util.queryParamsToString(httpRequest.params);\n  populateHostPrefix(req);\n}\n\nfunction extractError(resp) {\n  var data,\n      body = resp.httpResponse.body.toString();\n\n  if (body.match('<UnknownOperationException')) {\n    data = {\n      Code: 'UnknownOperation',\n      Message: 'Unknown operation ' + resp.request.operation\n    };\n  } else {\n    try {\n      data = new AWS.XML.Parser().parse(body);\n    } catch (e) {\n      data = {\n        Code: resp.httpResponse.statusCode,\n        Message: resp.httpResponse.statusMessage\n      };\n    }\n  }\n\n  if (data.requestId && !resp.requestId) resp.requestId = data.requestId;\n  if (data.Errors) data = data.Errors;\n  if (data.Error) data = data.Error;\n\n  if (data.Code) {\n    resp.error = util.error(new Error(), {\n      code: data.Code,\n      message: data.Message\n    });\n  } else {\n    resp.error = util.error(new Error(), {\n      code: resp.httpResponse.statusCode,\n      message: null\n    });\n  }\n}\n\nfunction extractData(resp) {\n  var req = resp.request;\n  var operation = req.service.api.operations[req.operation];\n  var shape = operation.output || {};\n  var origRules = shape;\n\n  if (origRules.resultWrapper) {\n    var tmp = Shape.create({\n      type: 'structure'\n    });\n    tmp.members[origRules.resultWrapper] = shape;\n    tmp.memberNames = [origRules.resultWrapper];\n    util.property(shape, 'name', shape.resultWrapper);\n    shape = tmp;\n  }\n\n  var parser = new AWS.XML.Parser(); // TODO: Refactor XML Parser to parse RequestId from response.\n\n  if (shape && shape.members && !shape.members._XAMZRequestId) {\n    var requestIdShape = Shape.create({\n      type: 'string'\n    }, {\n      api: {\n        protocol: 'query'\n      }\n    }, 'requestId');\n    shape.members._XAMZRequestId = requestIdShape;\n  }\n\n  var data = parser.parse(resp.httpResponse.body.toString(), shape);\n  resp.requestId = data._XAMZRequestId || data.requestId;\n  if (data._XAMZRequestId) delete data._XAMZRequestId;\n\n  if (origRules.resultWrapper) {\n    if (data[origRules.resultWrapper]) {\n      util.update(data, data[origRules.resultWrapper]);\n      delete data[origRules.resultWrapper];\n    }\n  }\n\n  resp.data = data;\n}\n/**\n * @api private\n */\n\n\nmodule.exports = {\n  buildRequest: buildRequest,\n  extractError: extractError,\n  extractData: extractData\n};","map":{"version":3,"names":["AWS","require","util","QueryParamSerializer","Shape","populateHostPrefix","buildRequest","req","operation","service","api","operations","httpRequest","headers","params","Version","apiVersion","Action","name","builder","serialize","input","value","body","queryParamsToString","extractError","resp","data","httpResponse","toString","match","Code","Message","request","XML","Parser","parse","e","statusCode","statusMessage","requestId","Errors","Error","error","code","message","extractData","shape","output","origRules","resultWrapper","tmp","create","type","members","memberNames","property","parser","_XAMZRequestId","requestIdShape","protocol","update","module","exports"],"sources":["/Users/lazarbogdan/test/medicacasa-frontend/medicacasa-frontend/node_modules/aws-sdk/lib/protocol/query.js"],"sourcesContent":["var AWS = require('../core');\nvar util = require('../util');\nvar QueryParamSerializer = require('../query/query_param_serializer');\nvar Shape = require('../model/shape');\nvar populateHostPrefix = require('./helpers').populateHostPrefix;\n\nfunction buildRequest(req) {\n  var operation = req.service.api.operations[req.operation];\n  var httpRequest = req.httpRequest;\n  httpRequest.headers['Content-Type'] =\n    'application/x-www-form-urlencoded; charset=utf-8';\n  httpRequest.params = {\n    Version: req.service.api.apiVersion,\n    Action: operation.name\n  };\n\n  // convert the request parameters into a list of query params,\n  // e.g. Deeply.NestedParam.0.Name=value\n  var builder = new QueryParamSerializer();\n  builder.serialize(req.params, operation.input, function(name, value) {\n    httpRequest.params[name] = value;\n  });\n  httpRequest.body = util.queryParamsToString(httpRequest.params);\n\n  populateHostPrefix(req);\n}\n\nfunction extractError(resp) {\n  var data, body = resp.httpResponse.body.toString();\n  if (body.match('<UnknownOperationException')) {\n    data = {\n      Code: 'UnknownOperation',\n      Message: 'Unknown operation ' + resp.request.operation\n    };\n  } else {\n    try {\n      data = new AWS.XML.Parser().parse(body);\n    } catch (e) {\n      data = {\n        Code: resp.httpResponse.statusCode,\n        Message: resp.httpResponse.statusMessage\n      };\n    }\n  }\n\n  if (data.requestId && !resp.requestId) resp.requestId = data.requestId;\n  if (data.Errors) data = data.Errors;\n  if (data.Error) data = data.Error;\n  if (data.Code) {\n    resp.error = util.error(new Error(), {\n      code: data.Code,\n      message: data.Message\n    });\n  } else {\n    resp.error = util.error(new Error(), {\n      code: resp.httpResponse.statusCode,\n      message: null\n    });\n  }\n}\n\nfunction extractData(resp) {\n  var req = resp.request;\n  var operation = req.service.api.operations[req.operation];\n  var shape = operation.output || {};\n  var origRules = shape;\n\n  if (origRules.resultWrapper) {\n    var tmp = Shape.create({type: 'structure'});\n    tmp.members[origRules.resultWrapper] = shape;\n    tmp.memberNames = [origRules.resultWrapper];\n    util.property(shape, 'name', shape.resultWrapper);\n    shape = tmp;\n  }\n\n  var parser = new AWS.XML.Parser();\n\n  // TODO: Refactor XML Parser to parse RequestId from response.\n  if (shape && shape.members && !shape.members._XAMZRequestId) {\n    var requestIdShape = Shape.create(\n      { type: 'string' },\n      { api: { protocol: 'query' } },\n      'requestId'\n    );\n    shape.members._XAMZRequestId = requestIdShape;\n  }\n\n  var data = parser.parse(resp.httpResponse.body.toString(), shape);\n  resp.requestId = data._XAMZRequestId || data.requestId;\n\n  if (data._XAMZRequestId) delete data._XAMZRequestId;\n\n  if (origRules.resultWrapper) {\n    if (data[origRules.resultWrapper]) {\n      util.update(data, data[origRules.resultWrapper]);\n      delete data[origRules.resultWrapper];\n    }\n  }\n\n  resp.data = data;\n}\n\n/**\n * @api private\n */\nmodule.exports = {\n  buildRequest: buildRequest,\n  extractError: extractError,\n  extractData: extractData\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}