{"ast":null,"code":"import { __rest, __assign, __spreadArray, __read } from 'tslib';\nimport { invariant } from 'hey-listen';\nimport { PanSession } from '../PanSession.js';\nimport { getGlobalLock } from './utils/lock.js';\nimport { isRefObject } from '../../utils/is-ref-object.js';\nimport { addPointerEvent } from '../../events/use-pointer-event.js';\nimport { addDomEvent } from '../../events/use-dom-event.js';\nimport { getViewportPointFromEvent } from '../../events/event-info.js';\nimport { axisBox, convertAxisBoxToBoundingBox, convertBoundingBoxToAxisBox } from '../../utils/geometry/index.js';\nimport { eachAxis } from '../../utils/each-axis.js';\nimport { calcRelativeConstraints, resolveDragElastic, rebaseAxisConstraints, calcViewportConstraints, applyConstraints, calcConstrainedMinPoint, calcPositionFromProgress, defaultElastic } from './utils/constraints.js';\nimport { getBoundingBox } from '../../render/dom/projection/measure.js';\nimport { calcOrigin } from '../../utils/geometry/delta-calc.js';\nimport { startAnimation } from '../../animation/utils/transitions.js';\nimport { AnimationType } from '../../render/utils/types.js';\nimport { collectProjectingAncestors, updateLayoutMeasurement, collectProjectingChildren } from '../../render/dom/projection/utils.js';\nimport { progress } from 'popmotion';\nimport { convertToRelativeProjection } from '../../render/dom/projection/convert-to-relative.js';\nimport { calcRelativeOffset } from '../../motion/features/layout/utils.js';\nimport { flushLayout, batchLayout } from '../../render/dom/utils/batch-layout.js';\nimport { flushSync } from 'framesync';\nvar elementDragControls = new WeakMap();\n/**\n *\n */\n\nvar lastPointerEvent;\n\nvar VisualElementDragControls =\n/** @class */\nfunction () {\n  function VisualElementDragControls(_a) {\n    var visualElement = _a.visualElement;\n    /**\n     * Track whether we're currently dragging.\n     *\n     * @internal\n     */\n\n    this.isDragging = false;\n    /**\n     * The current direction of drag, or `null` if both.\n     *\n     * @internal\n     */\n\n    this.currentDirection = null;\n    /**\n     * The permitted boundaries of travel, in pixels.\n     *\n     * @internal\n     */\n\n    this.constraints = false;\n    /**\n     * The per-axis resolved elastic values.\n     *\n     * @internal\n     */\n\n    this.elastic = axisBox();\n    /**\n     * A reference to the host component's latest props.\n     *\n     * @internal\n     */\n\n    this.props = {};\n    /**\n     * @internal\n     */\n\n    this.hasMutatedConstraints = false;\n    /**\n     * Track the initial position of the cursor relative to the dragging element\n     * when dragging starts as a value of 0-1 on each axis. We then use this to calculate\n     * an ideal bounding box for the VisualElement renderer to project into every frame.\n     *\n     * @internal\n     */\n\n    this.cursorProgress = {\n      x: 0.5,\n      y: 0.5\n    }; // When updating _dragX, or _dragY instead of the VisualElement,\n    // persist their values between drag gestures.\n\n    this.originPoint = {}; // This is a reference to the global drag gesture lock, ensuring only one component\n    // can \"capture\" the drag of one or both axes.\n    // TODO: Look into moving this into pansession?\n\n    this.openGlobalLock = null;\n    /**\n     * @internal\n     */\n\n    this.panSession = null;\n    this.visualElement = visualElement;\n    this.visualElement.enableLayoutProjection();\n    elementDragControls.set(visualElement, this);\n  }\n  /**\n   * Instantiate a PanSession for the drag gesture\n   *\n   * @public\n   */\n\n\n  VisualElementDragControls.prototype.start = function (originEvent, _a) {\n    var _this = this;\n\n    var _b = _a === void 0 ? {} : _a,\n        _c = _b.snapToCursor,\n        snapToCursor = _c === void 0 ? false : _c,\n        cursorProgress = _b.cursorProgress;\n\n    var onSessionStart = function onSessionStart(event) {\n      var _a; // Stop any animations on both axis values immediately. This allows the user to throw and catch\n      // the component.\n\n\n      _this.stopMotion();\n      /**\n       * Save the initial point. We'll use this to calculate the pointer's position rather\n       * than the one we receive when the gesture actually starts. By then, the pointer will\n       * have already moved, and the perception will be of the pointer \"slipping\" across the element\n       */\n\n\n      var initialPoint = getViewportPointFromEvent(event).point;\n      (_a = _this.cancelLayout) === null || _a === void 0 ? void 0 : _a.call(_this);\n      _this.cancelLayout = batchLayout(function (read, write) {\n        var ancestors = collectProjectingAncestors(_this.visualElement);\n        var children = collectProjectingChildren(_this.visualElement);\n\n        var tree = __spreadArray(__spreadArray([], __read(ancestors)), __read(children));\n\n        var hasManuallySetCursorOrigin = false;\n        /**\n         * Apply a simple lock to the projection target. This ensures no animations\n         * can run on the projection box while this lock is active.\n         */\n\n        _this.isLayoutDrag() && _this.visualElement.lockProjectionTarget();\n        write(function () {\n          tree.forEach(function (element) {\n            return element.resetTransform();\n          });\n        });\n        read(function () {\n          updateLayoutMeasurement(_this.visualElement);\n          children.forEach(updateLayoutMeasurement);\n        });\n        write(function () {\n          tree.forEach(function (element) {\n            return element.restoreTransform();\n          });\n\n          if (snapToCursor) {\n            hasManuallySetCursorOrigin = _this.snapToCursor(initialPoint);\n          }\n        });\n        read(function () {\n          var isRelativeDrag = Boolean(_this.getAxisMotionValue(\"x\") && !_this.isExternalDrag());\n\n          if (!isRelativeDrag) {\n            _this.visualElement.rebaseProjectionTarget(true, _this.visualElement.measureViewportBox(false));\n          }\n\n          _this.visualElement.scheduleUpdateLayoutProjection();\n          /**\n           * When dragging starts, we want to find where the cursor is relative to the bounding box\n           * of the element. Every frame, we calculate a new bounding box using this relative position\n           * and let the visualElement renderer figure out how to reproject the element into this bounding\n           * box.\n           *\n           * By doing it this way, rather than applying an x/y transform directly to the element,\n           * we can ensure the component always visually sticks to the cursor as we'd expect, even\n           * if the DOM element itself changes layout as a result of React updates the user might\n           * make based on the drag position.\n           */\n\n\n          var projection = _this.visualElement.projection;\n          eachAxis(function (axis) {\n            if (!hasManuallySetCursorOrigin) {\n              var _a = projection.target[axis],\n                  min = _a.min,\n                  max = _a.max;\n              _this.cursorProgress[axis] = cursorProgress ? cursorProgress[axis] : progress(min, max, initialPoint[axis]);\n            }\n            /**\n             * If we have external drag MotionValues, record their origin point. On pointermove\n             * we'll apply the pan gesture offset directly to this value.\n             */\n\n\n            var axisValue = _this.getAxisMotionValue(axis);\n\n            if (axisValue) {\n              _this.originPoint[axis] = axisValue.get();\n            }\n          });\n        });\n        write(function () {\n          flushSync.update();\n          flushSync.preRender();\n          flushSync.render();\n          flushSync.postRender();\n        });\n        read(function () {\n          return _this.resolveDragConstraints();\n        });\n      });\n    };\n\n    var onStart = function onStart(event, info) {\n      var _a, _b, _c; // Attempt to grab the global drag gesture lock - maybe make this part of PanSession\n\n\n      var _d = _this.props,\n          drag = _d.drag,\n          dragPropagation = _d.dragPropagation;\n\n      if (drag && !dragPropagation) {\n        if (_this.openGlobalLock) _this.openGlobalLock();\n        _this.openGlobalLock = getGlobalLock(drag); // If we don 't have the lock, don't start dragging\n\n        if (!_this.openGlobalLock) return;\n      }\n\n      flushLayout(); // Set current drag status\n\n      _this.isDragging = true;\n      _this.currentDirection = null; // Fire onDragStart event\n\n      (_b = (_a = _this.props).onDragStart) === null || _b === void 0 ? void 0 : _b.call(_a, event, info);\n      (_c = _this.visualElement.animationState) === null || _c === void 0 ? void 0 : _c.setActive(AnimationType.Drag, true);\n    };\n\n    var onMove = function onMove(event, info) {\n      var _a, _b, _c, _d;\n\n      var _e = _this.props,\n          dragPropagation = _e.dragPropagation,\n          dragDirectionLock = _e.dragDirectionLock; // If we didn't successfully receive the gesture lock, early return.\n\n      if (!dragPropagation && !_this.openGlobalLock) return;\n      var offset = info.offset; // Attempt to detect drag direction if directionLock is true\n\n      if (dragDirectionLock && _this.currentDirection === null) {\n        _this.currentDirection = getCurrentDirection(offset); // If we've successfully set a direction, notify listener\n\n        if (_this.currentDirection !== null) {\n          (_b = (_a = _this.props).onDirectionLock) === null || _b === void 0 ? void 0 : _b.call(_a, _this.currentDirection);\n        }\n\n        return;\n      } // Update each point with the latest position\n\n\n      _this.updateAxis(\"x\", info.point, offset);\n\n      _this.updateAxis(\"y\", info.point, offset); // Fire onDrag event\n\n\n      (_d = (_c = _this.props).onDrag) === null || _d === void 0 ? void 0 : _d.call(_c, event, info); // Update the last pointer event\n\n      lastPointerEvent = event;\n    };\n\n    var onSessionEnd = function onSessionEnd(event, info) {\n      return _this.stop(event, info);\n    };\n\n    var transformPagePoint = this.props.transformPagePoint;\n    this.panSession = new PanSession(originEvent, {\n      onSessionStart: onSessionStart,\n      onStart: onStart,\n      onMove: onMove,\n      onSessionEnd: onSessionEnd\n    }, {\n      transformPagePoint: transformPagePoint\n    });\n  };\n\n  VisualElementDragControls.prototype.resolveDragConstraints = function () {\n    var _this = this;\n\n    var _a = this.props,\n        dragConstraints = _a.dragConstraints,\n        dragElastic = _a.dragElastic;\n    var layout = this.visualElement.getLayoutState().layoutCorrected;\n\n    if (dragConstraints) {\n      this.constraints = isRefObject(dragConstraints) ? this.resolveRefConstraints(layout, dragConstraints) : calcRelativeConstraints(layout, dragConstraints);\n    } else {\n      this.constraints = false;\n    }\n\n    this.elastic = resolveDragElastic(dragElastic);\n    /**\n     * If we're outputting to external MotionValues, we want to rebase the measured constraints\n     * from viewport-relative to component-relative.\n     */\n\n    if (this.constraints && !this.hasMutatedConstraints) {\n      eachAxis(function (axis) {\n        if (_this.getAxisMotionValue(axis)) {\n          _this.constraints[axis] = rebaseAxisConstraints(layout[axis], _this.constraints[axis]);\n        }\n      });\n    }\n  };\n\n  VisualElementDragControls.prototype.resolveRefConstraints = function (layoutBox, constraints) {\n    var _a = this.props,\n        onMeasureDragConstraints = _a.onMeasureDragConstraints,\n        transformPagePoint = _a.transformPagePoint;\n    var constraintsElement = constraints.current;\n    invariant(constraintsElement !== null, \"If `dragConstraints` is set as a React ref, that ref must be passed to another component's `ref` prop.\");\n    this.constraintsBox = getBoundingBox(constraintsElement, transformPagePoint);\n    var measuredConstraints = calcViewportConstraints(layoutBox, this.constraintsBox);\n    /**\n     * If there's an onMeasureDragConstraints listener we call it and\n     * if different constraints are returned, set constraints to that\n     */\n\n    if (onMeasureDragConstraints) {\n      var userConstraints = onMeasureDragConstraints(convertAxisBoxToBoundingBox(measuredConstraints));\n      this.hasMutatedConstraints = !!userConstraints;\n\n      if (userConstraints) {\n        measuredConstraints = convertBoundingBoxToAxisBox(userConstraints);\n      }\n    }\n\n    return measuredConstraints;\n  };\n\n  VisualElementDragControls.prototype.cancelDrag = function () {\n    var _a, _b;\n\n    this.visualElement.unlockProjectionTarget();\n    (_a = this.cancelLayout) === null || _a === void 0 ? void 0 : _a.call(this);\n    this.isDragging = false;\n    this.panSession && this.panSession.end();\n    this.panSession = null;\n\n    if (!this.props.dragPropagation && this.openGlobalLock) {\n      this.openGlobalLock();\n      this.openGlobalLock = null;\n    }\n\n    (_b = this.visualElement.animationState) === null || _b === void 0 ? void 0 : _b.setActive(AnimationType.Drag, false);\n  };\n\n  VisualElementDragControls.prototype.stop = function (event, info) {\n    var _a, _b, _c;\n\n    (_a = this.panSession) === null || _a === void 0 ? void 0 : _a.end();\n    this.panSession = null;\n    var isDragging = this.isDragging;\n    this.cancelDrag();\n    if (!isDragging) return;\n    var velocity = info.velocity;\n    this.animateDragEnd(velocity);\n    (_c = (_b = this.props).onDragEnd) === null || _c === void 0 ? void 0 : _c.call(_b, event, info);\n  };\n\n  VisualElementDragControls.prototype.snapToCursor = function (point) {\n    var _this = this;\n\n    return eachAxis(function (axis) {\n      var drag = _this.props.drag; // If we're not dragging this axis, do an early return.\n\n      if (!shouldDrag(axis, drag, _this.currentDirection)) return;\n\n      var axisValue = _this.getAxisMotionValue(axis);\n\n      if (axisValue) {\n        var box = _this.visualElement.getLayoutState().layout;\n\n        var length_1 = box[axis].max - box[axis].min;\n        var center = box[axis].min + length_1 / 2;\n        var offset = point[axis] - center;\n        _this.originPoint[axis] = point[axis];\n        axisValue.set(offset);\n      } else {\n        _this.cursorProgress[axis] = 0.5;\n        return true;\n      }\n    }).includes(true);\n  };\n  /**\n   * Update the specified axis with the latest pointer information.\n   */\n\n\n  VisualElementDragControls.prototype.updateAxis = function (axis, point, offset) {\n    var drag = this.props.drag; // If we're not dragging this axis, do an early return.\n\n    if (!shouldDrag(axis, drag, this.currentDirection)) return;\n    return this.getAxisMotionValue(axis) ? this.updateAxisMotionValue(axis, offset) : this.updateVisualElementAxis(axis, point);\n  };\n\n  VisualElementDragControls.prototype.updateAxisMotionValue = function (axis, offset) {\n    var axisValue = this.getAxisMotionValue(axis);\n    if (!offset || !axisValue) return;\n    var nextValue = this.originPoint[axis] + offset[axis];\n    var update = this.constraints ? applyConstraints(nextValue, this.constraints[axis], this.elastic[axis]) : nextValue;\n    axisValue.set(update);\n  };\n\n  VisualElementDragControls.prototype.updateVisualElementAxis = function (axis, point) {\n    var _a; // Get the actual layout bounding box of the element\n\n\n    var axisLayout = this.visualElement.getLayoutState().layout[axis]; // Calculate its current length. In the future we might want to lerp this to animate\n    // between lengths if the layout changes as we change the DOM\n\n    var axisLength = axisLayout.max - axisLayout.min; // Get the initial progress that the pointer sat on this axis on gesture start.\n\n    var axisProgress = this.cursorProgress[axis]; // Calculate a new min point based on the latest pointer position, constraints and elastic\n\n    var min = calcConstrainedMinPoint(point[axis], axisLength, axisProgress, (_a = this.constraints) === null || _a === void 0 ? void 0 : _a[axis], this.elastic[axis]); // Update the axis viewport target with this new min and the length\n\n    this.visualElement.setProjectionTargetAxis(axis, min, min + axisLength);\n  };\n\n  VisualElementDragControls.prototype.setProps = function (_a) {\n    var _b = _a.drag,\n        drag = _b === void 0 ? false : _b,\n        _c = _a.dragDirectionLock,\n        dragDirectionLock = _c === void 0 ? false : _c,\n        _d = _a.dragPropagation,\n        dragPropagation = _d === void 0 ? false : _d,\n        _e = _a.dragConstraints,\n        dragConstraints = _e === void 0 ? false : _e,\n        _f = _a.dragElastic,\n        dragElastic = _f === void 0 ? defaultElastic : _f,\n        _g = _a.dragMomentum,\n        dragMomentum = _g === void 0 ? true : _g,\n        remainingProps = __rest(_a, [\"drag\", \"dragDirectionLock\", \"dragPropagation\", \"dragConstraints\", \"dragElastic\", \"dragMomentum\"]);\n\n    this.props = __assign({\n      drag: drag,\n      dragDirectionLock: dragDirectionLock,\n      dragPropagation: dragPropagation,\n      dragConstraints: dragConstraints,\n      dragElastic: dragElastic,\n      dragMomentum: dragMomentum\n    }, remainingProps);\n  };\n  /**\n   * Drag works differently depending on which props are provided.\n   *\n   * - If _dragX and _dragY are provided, we output the gesture delta directly to those motion values.\n   * - If the component will perform layout animations, we output the gesture to the component's\n   *      visual bounding box\n   * - Otherwise, we apply the delta to the x/y motion values.\n   */\n\n\n  VisualElementDragControls.prototype.getAxisMotionValue = function (axis) {\n    var _a = this.props,\n        layout = _a.layout,\n        layoutId = _a.layoutId;\n    var dragKey = \"_drag\" + axis.toUpperCase();\n\n    if (this.props[dragKey]) {\n      return this.props[dragKey];\n    } else if (!layout && layoutId === undefined) {\n      return this.visualElement.getValue(axis, 0);\n    }\n  };\n\n  VisualElementDragControls.prototype.isLayoutDrag = function () {\n    return !this.getAxisMotionValue(\"x\");\n  };\n\n  VisualElementDragControls.prototype.isExternalDrag = function () {\n    var _a = this.props,\n        _dragX = _a._dragX,\n        _dragY = _a._dragY;\n    return _dragX || _dragY;\n  };\n\n  VisualElementDragControls.prototype.animateDragEnd = function (velocity) {\n    var _this = this;\n\n    var _a = this.props,\n        drag = _a.drag,\n        dragMomentum = _a.dragMomentum,\n        dragElastic = _a.dragElastic,\n        dragTransition = _a.dragTransition;\n    /**\n     * Everything beyond the drag gesture should be performed with\n     * relative projection so children stay in sync with their parent element.\n     */\n\n    var isRelative = convertToRelativeProjection(this.visualElement, this.isLayoutDrag() && !this.isExternalDrag());\n    /**\n     * If we had previously resolved constraints relative to the viewport,\n     * we need to also convert those to a relative coordinate space for the animation\n     */\n\n    var constraints = this.constraints || {};\n\n    if (isRelative && Object.keys(constraints).length && this.isLayoutDrag()) {\n      var projectionParent = this.visualElement.getProjectionParent();\n\n      if (projectionParent) {\n        var relativeConstraints_1 = calcRelativeOffset(projectionParent.projection.targetFinal, constraints);\n        eachAxis(function (axis) {\n          var _a = relativeConstraints_1[axis],\n              min = _a.min,\n              max = _a.max;\n          constraints[axis] = {\n            min: isNaN(min) ? undefined : min,\n            max: isNaN(max) ? undefined : max\n          };\n        });\n      }\n    }\n\n    var momentumAnimations = eachAxis(function (axis) {\n      var _a;\n\n      if (!shouldDrag(axis, drag, _this.currentDirection)) {\n        return;\n      }\n\n      var transition = (_a = constraints === null || constraints === void 0 ? void 0 : constraints[axis]) !== null && _a !== void 0 ? _a : {};\n      /**\n       * Overdamp the boundary spring if `dragElastic` is disabled. There's still a frame\n       * of spring animations so we should look into adding a disable spring option to `inertia`.\n       * We could do something here where we affect the `bounceStiffness` and `bounceDamping`\n       * using the value of `dragElastic`.\n       */\n\n      var bounceStiffness = dragElastic ? 200 : 1000000;\n      var bounceDamping = dragElastic ? 40 : 10000000;\n\n      var inertia = __assign(__assign({\n        type: \"inertia\",\n        velocity: dragMomentum ? velocity[axis] : 0,\n        bounceStiffness: bounceStiffness,\n        bounceDamping: bounceDamping,\n        timeConstant: 750,\n        restDelta: 1,\n        restSpeed: 10\n      }, dragTransition), transition); // If we're not animating on an externally-provided `MotionValue` we can use the\n      // component's animation controls which will handle interactions with whileHover (etc),\n      // otherwise we just have to animate the `MotionValue` itself.\n\n\n      return _this.getAxisMotionValue(axis) ? _this.startAxisValueAnimation(axis, inertia) : _this.visualElement.startLayoutAnimation(axis, inertia, isRelative);\n    }); // Run all animations and then resolve the new drag constraints.\n\n    return Promise.all(momentumAnimations).then(function () {\n      var _a, _b;\n\n      (_b = (_a = _this.props).onDragTransitionEnd) === null || _b === void 0 ? void 0 : _b.call(_a);\n    });\n  };\n\n  VisualElementDragControls.prototype.stopMotion = function () {\n    var _this = this;\n\n    eachAxis(function (axis) {\n      var axisValue = _this.getAxisMotionValue(axis);\n\n      axisValue ? axisValue.stop() : _this.visualElement.stopLayoutAnimation();\n    });\n  };\n\n  VisualElementDragControls.prototype.startAxisValueAnimation = function (axis, transition) {\n    var axisValue = this.getAxisMotionValue(axis);\n    if (!axisValue) return;\n    var currentValue = axisValue.get();\n    axisValue.set(currentValue);\n    axisValue.set(currentValue); // Set twice to hard-reset velocity\n\n    return startAnimation(axis, axisValue, 0, transition);\n  };\n\n  VisualElementDragControls.prototype.scalePoint = function () {\n    var _this = this;\n\n    var _a = this.props,\n        drag = _a.drag,\n        dragConstraints = _a.dragConstraints;\n    if (!isRefObject(dragConstraints) || !this.constraintsBox) return; // Stop any current animations as there can be some visual glitching if we resize mid animation\n\n    this.stopMotion(); // Record the relative progress of the targetBox relative to the constraintsBox\n\n    var boxProgress = {\n      x: 0,\n      y: 0\n    };\n    eachAxis(function (axis) {\n      boxProgress[axis] = calcOrigin(_this.visualElement.projection.target[axis], _this.constraintsBox[axis]);\n    });\n    /**\n     * For each axis, calculate the current progress of the layout axis within the constraints.\n     * Then, using the latest layout and constraints measurements, reposition the new layout axis\n     * proportionally within the constraints.\n     */\n\n    this.updateConstraints(function () {\n      eachAxis(function (axis) {\n        if (!shouldDrag(axis, drag, null)) return; // Calculate the position of the targetBox relative to the constraintsBox using the\n        // previously calculated progress\n\n        var _a = calcPositionFromProgress(_this.visualElement.projection.target[axis], _this.constraintsBox[axis], boxProgress[axis]),\n            min = _a.min,\n            max = _a.max;\n\n        _this.visualElement.setProjectionTargetAxis(axis, min, max);\n      });\n    });\n    /**\n     * If any other draggable components are queuing the same tasks synchronously\n     * this will wait until they've all been scheduled before flushing.\n     */\n\n    setTimeout(flushLayout, 1);\n  };\n\n  VisualElementDragControls.prototype.updateConstraints = function (onReady) {\n    var _this = this;\n\n    this.cancelLayout = batchLayout(function (read, write) {\n      var ancestors = collectProjectingAncestors(_this.visualElement);\n      write(function () {\n        return ancestors.forEach(function (element) {\n          return element.resetTransform();\n        });\n      });\n      read(function () {\n        return updateLayoutMeasurement(_this.visualElement);\n      });\n      write(function () {\n        return ancestors.forEach(function (element) {\n          return element.restoreTransform();\n        });\n      });\n      read(function () {\n        _this.resolveDragConstraints();\n      });\n      if (onReady) write(onReady);\n    });\n  };\n\n  VisualElementDragControls.prototype.mount = function (visualElement) {\n    var _this = this;\n\n    var element = visualElement.getInstance();\n    /**\n     * Attach a pointerdown event listener on this DOM element to initiate drag tracking.\n     */\n\n    var stopPointerListener = addPointerEvent(element, \"pointerdown\", function (event) {\n      var _a = _this.props,\n          drag = _a.drag,\n          _b = _a.dragListener,\n          dragListener = _b === void 0 ? true : _b;\n      drag && dragListener && _this.start(event);\n    });\n    /**\n     * Attach a window resize listener to scale the draggable target within its defined\n     * constraints as the window resizes.\n     */\n\n    var stopResizeListener = addDomEvent(window, \"resize\", function () {\n      _this.scalePoint();\n    });\n    /**\n     * Ensure drag constraints are resolved correctly relative to the dragging element\n     * whenever its layout changes.\n     */\n\n    var stopLayoutUpdateListener = visualElement.onLayoutUpdate(function () {\n      if (_this.isDragging) {\n        _this.resolveDragConstraints();\n      }\n    });\n    /**\n     * If the previous component with this same layoutId was dragging at the time\n     * it was unmounted, we want to continue the same gesture on this component.\n     */\n\n    var prevDragCursor = visualElement.prevDragCursor;\n\n    if (prevDragCursor) {\n      this.start(lastPointerEvent, {\n        cursorProgress: prevDragCursor\n      });\n    }\n    /**\n     * Return a function that will teardown the drag gesture\n     */\n\n\n    return function () {\n      stopPointerListener === null || stopPointerListener === void 0 ? void 0 : stopPointerListener();\n      stopResizeListener === null || stopResizeListener === void 0 ? void 0 : stopResizeListener();\n      stopLayoutUpdateListener === null || stopLayoutUpdateListener === void 0 ? void 0 : stopLayoutUpdateListener();\n\n      _this.cancelDrag();\n    };\n  };\n\n  return VisualElementDragControls;\n}();\n\nfunction shouldDrag(direction, drag, currentDirection) {\n  return (drag === true || drag === direction) && (currentDirection === null || currentDirection === direction);\n}\n/**\n * Based on an x/y offset determine the current drag direction. If both axis' offsets are lower\n * than the provided threshold, return `null`.\n *\n * @param offset - The x/y offset from origin.\n * @param lockThreshold - (Optional) - the minimum absolute offset before we can determine a drag direction.\n */\n\n\nfunction getCurrentDirection(offset, lockThreshold) {\n  if (lockThreshold === void 0) {\n    lockThreshold = 10;\n  }\n\n  var direction = null;\n\n  if (Math.abs(offset.y) > lockThreshold) {\n    direction = \"y\";\n  } else if (Math.abs(offset.x) > lockThreshold) {\n    direction = \"x\";\n  }\n\n  return direction;\n}\n\nexport { VisualElementDragControls, elementDragControls };","map":{"version":3,"names":["__rest","__assign","__spreadArray","__read","invariant","PanSession","getGlobalLock","isRefObject","addPointerEvent","addDomEvent","getViewportPointFromEvent","axisBox","convertAxisBoxToBoundingBox","convertBoundingBoxToAxisBox","eachAxis","calcRelativeConstraints","resolveDragElastic","rebaseAxisConstraints","calcViewportConstraints","applyConstraints","calcConstrainedMinPoint","calcPositionFromProgress","defaultElastic","getBoundingBox","calcOrigin","startAnimation","AnimationType","collectProjectingAncestors","updateLayoutMeasurement","collectProjectingChildren","progress","convertToRelativeProjection","calcRelativeOffset","flushLayout","batchLayout","flushSync","elementDragControls","WeakMap","lastPointerEvent","VisualElementDragControls","_a","visualElement","isDragging","currentDirection","constraints","elastic","props","hasMutatedConstraints","cursorProgress","x","y","originPoint","openGlobalLock","panSession","enableLayoutProjection","set","prototype","start","originEvent","_this","_b","_c","snapToCursor","onSessionStart","event","stopMotion","initialPoint","point","cancelLayout","call","read","write","ancestors","children","tree","hasManuallySetCursorOrigin","isLayoutDrag","lockProjectionTarget","forEach","element","resetTransform","restoreTransform","isRelativeDrag","Boolean","getAxisMotionValue","isExternalDrag","rebaseProjectionTarget","measureViewportBox","scheduleUpdateLayoutProjection","projection","axis","target","min","max","axisValue","get","update","preRender","render","postRender","resolveDragConstraints","onStart","info","_d","drag","dragPropagation","onDragStart","animationState","setActive","Drag","onMove","_e","dragDirectionLock","offset","getCurrentDirection","onDirectionLock","updateAxis","onDrag","onSessionEnd","stop","transformPagePoint","dragConstraints","dragElastic","layout","getLayoutState","layoutCorrected","resolveRefConstraints","layoutBox","onMeasureDragConstraints","constraintsElement","current","constraintsBox","measuredConstraints","userConstraints","cancelDrag","unlockProjectionTarget","end","velocity","animateDragEnd","onDragEnd","shouldDrag","box","length_1","center","includes","updateAxisMotionValue","updateVisualElementAxis","nextValue","axisLayout","axisLength","axisProgress","setProjectionTargetAxis","setProps","_f","_g","dragMomentum","remainingProps","layoutId","dragKey","toUpperCase","undefined","getValue","_dragX","_dragY","dragTransition","isRelative","Object","keys","length","projectionParent","getProjectionParent","relativeConstraints_1","targetFinal","isNaN","momentumAnimations","transition","bounceStiffness","bounceDamping","inertia","type","timeConstant","restDelta","restSpeed","startAxisValueAnimation","startLayoutAnimation","Promise","all","then","onDragTransitionEnd","stopLayoutAnimation","currentValue","scalePoint","boxProgress","updateConstraints","setTimeout","onReady","mount","getInstance","stopPointerListener","dragListener","stopResizeListener","window","stopLayoutUpdateListener","onLayoutUpdate","prevDragCursor","direction","lockThreshold","Math","abs"],"sources":["/Users/lazarbogdan/test/medicacasa-frontend/medicacasa-frontend/node_modules/framer-motion/dist/es/gestures/drag/VisualElementDragControls.js"],"sourcesContent":["import { __rest, __assign, __spreadArray, __read } from 'tslib';\nimport { invariant } from 'hey-listen';\nimport { PanSession } from '../PanSession.js';\nimport { getGlobalLock } from './utils/lock.js';\nimport { isRefObject } from '../../utils/is-ref-object.js';\nimport { addPointerEvent } from '../../events/use-pointer-event.js';\nimport { addDomEvent } from '../../events/use-dom-event.js';\nimport { getViewportPointFromEvent } from '../../events/event-info.js';\nimport { axisBox, convertAxisBoxToBoundingBox, convertBoundingBoxToAxisBox } from '../../utils/geometry/index.js';\nimport { eachAxis } from '../../utils/each-axis.js';\nimport { calcRelativeConstraints, resolveDragElastic, rebaseAxisConstraints, calcViewportConstraints, applyConstraints, calcConstrainedMinPoint, calcPositionFromProgress, defaultElastic } from './utils/constraints.js';\nimport { getBoundingBox } from '../../render/dom/projection/measure.js';\nimport { calcOrigin } from '../../utils/geometry/delta-calc.js';\nimport { startAnimation } from '../../animation/utils/transitions.js';\nimport { AnimationType } from '../../render/utils/types.js';\nimport { collectProjectingAncestors, updateLayoutMeasurement, collectProjectingChildren } from '../../render/dom/projection/utils.js';\nimport { progress } from 'popmotion';\nimport { convertToRelativeProjection } from '../../render/dom/projection/convert-to-relative.js';\nimport { calcRelativeOffset } from '../../motion/features/layout/utils.js';\nimport { flushLayout, batchLayout } from '../../render/dom/utils/batch-layout.js';\nimport { flushSync } from 'framesync';\n\nvar elementDragControls = new WeakMap();\n/**\n *\n */\nvar lastPointerEvent;\nvar VisualElementDragControls = /** @class */ (function () {\n    function VisualElementDragControls(_a) {\n        var visualElement = _a.visualElement;\n        /**\n         * Track whether we're currently dragging.\n         *\n         * @internal\n         */\n        this.isDragging = false;\n        /**\n         * The current direction of drag, or `null` if both.\n         *\n         * @internal\n         */\n        this.currentDirection = null;\n        /**\n         * The permitted boundaries of travel, in pixels.\n         *\n         * @internal\n         */\n        this.constraints = false;\n        /**\n         * The per-axis resolved elastic values.\n         *\n         * @internal\n         */\n        this.elastic = axisBox();\n        /**\n         * A reference to the host component's latest props.\n         *\n         * @internal\n         */\n        this.props = {};\n        /**\n         * @internal\n         */\n        this.hasMutatedConstraints = false;\n        /**\n         * Track the initial position of the cursor relative to the dragging element\n         * when dragging starts as a value of 0-1 on each axis. We then use this to calculate\n         * an ideal bounding box for the VisualElement renderer to project into every frame.\n         *\n         * @internal\n         */\n        this.cursorProgress = {\n            x: 0.5,\n            y: 0.5,\n        };\n        // When updating _dragX, or _dragY instead of the VisualElement,\n        // persist their values between drag gestures.\n        this.originPoint = {};\n        // This is a reference to the global drag gesture lock, ensuring only one component\n        // can \"capture\" the drag of one or both axes.\n        // TODO: Look into moving this into pansession?\n        this.openGlobalLock = null;\n        /**\n         * @internal\n         */\n        this.panSession = null;\n        this.visualElement = visualElement;\n        this.visualElement.enableLayoutProjection();\n        elementDragControls.set(visualElement, this);\n    }\n    /**\n     * Instantiate a PanSession for the drag gesture\n     *\n     * @public\n     */\n    VisualElementDragControls.prototype.start = function (originEvent, _a) {\n        var _this = this;\n        var _b = _a === void 0 ? {} : _a, _c = _b.snapToCursor, snapToCursor = _c === void 0 ? false : _c, cursorProgress = _b.cursorProgress;\n        var onSessionStart = function (event) {\n            var _a;\n            // Stop any animations on both axis values immediately. This allows the user to throw and catch\n            // the component.\n            _this.stopMotion();\n            /**\n             * Save the initial point. We'll use this to calculate the pointer's position rather\n             * than the one we receive when the gesture actually starts. By then, the pointer will\n             * have already moved, and the perception will be of the pointer \"slipping\" across the element\n             */\n            var initialPoint = getViewportPointFromEvent(event).point;\n            (_a = _this.cancelLayout) === null || _a === void 0 ? void 0 : _a.call(_this);\n            _this.cancelLayout = batchLayout(function (read, write) {\n                var ancestors = collectProjectingAncestors(_this.visualElement);\n                var children = collectProjectingChildren(_this.visualElement);\n                var tree = __spreadArray(__spreadArray([], __read(ancestors)), __read(children));\n                var hasManuallySetCursorOrigin = false;\n                /**\n                 * Apply a simple lock to the projection target. This ensures no animations\n                 * can run on the projection box while this lock is active.\n                 */\n                _this.isLayoutDrag() && _this.visualElement.lockProjectionTarget();\n                write(function () {\n                    tree.forEach(function (element) { return element.resetTransform(); });\n                });\n                read(function () {\n                    updateLayoutMeasurement(_this.visualElement);\n                    children.forEach(updateLayoutMeasurement);\n                });\n                write(function () {\n                    tree.forEach(function (element) { return element.restoreTransform(); });\n                    if (snapToCursor) {\n                        hasManuallySetCursorOrigin = _this.snapToCursor(initialPoint);\n                    }\n                });\n                read(function () {\n                    var isRelativeDrag = Boolean(_this.getAxisMotionValue(\"x\") && !_this.isExternalDrag());\n                    if (!isRelativeDrag) {\n                        _this.visualElement.rebaseProjectionTarget(true, _this.visualElement.measureViewportBox(false));\n                    }\n                    _this.visualElement.scheduleUpdateLayoutProjection();\n                    /**\n                     * When dragging starts, we want to find where the cursor is relative to the bounding box\n                     * of the element. Every frame, we calculate a new bounding box using this relative position\n                     * and let the visualElement renderer figure out how to reproject the element into this bounding\n                     * box.\n                     *\n                     * By doing it this way, rather than applying an x/y transform directly to the element,\n                     * we can ensure the component always visually sticks to the cursor as we'd expect, even\n                     * if the DOM element itself changes layout as a result of React updates the user might\n                     * make based on the drag position.\n                     */\n                    var projection = _this.visualElement.projection;\n                    eachAxis(function (axis) {\n                        if (!hasManuallySetCursorOrigin) {\n                            var _a = projection.target[axis], min = _a.min, max = _a.max;\n                            _this.cursorProgress[axis] = cursorProgress\n                                ? cursorProgress[axis]\n                                : progress(min, max, initialPoint[axis]);\n                        }\n                        /**\n                         * If we have external drag MotionValues, record their origin point. On pointermove\n                         * we'll apply the pan gesture offset directly to this value.\n                         */\n                        var axisValue = _this.getAxisMotionValue(axis);\n                        if (axisValue) {\n                            _this.originPoint[axis] = axisValue.get();\n                        }\n                    });\n                });\n                write(function () {\n                    flushSync.update();\n                    flushSync.preRender();\n                    flushSync.render();\n                    flushSync.postRender();\n                });\n                read(function () { return _this.resolveDragConstraints(); });\n            });\n        };\n        var onStart = function (event, info) {\n            var _a, _b, _c;\n            // Attempt to grab the global drag gesture lock - maybe make this part of PanSession\n            var _d = _this.props, drag = _d.drag, dragPropagation = _d.dragPropagation;\n            if (drag && !dragPropagation) {\n                if (_this.openGlobalLock)\n                    _this.openGlobalLock();\n                _this.openGlobalLock = getGlobalLock(drag);\n                // If we don 't have the lock, don't start dragging\n                if (!_this.openGlobalLock)\n                    return;\n            }\n            flushLayout();\n            // Set current drag status\n            _this.isDragging = true;\n            _this.currentDirection = null;\n            // Fire onDragStart event\n            (_b = (_a = _this.props).onDragStart) === null || _b === void 0 ? void 0 : _b.call(_a, event, info);\n            (_c = _this.visualElement.animationState) === null || _c === void 0 ? void 0 : _c.setActive(AnimationType.Drag, true);\n        };\n        var onMove = function (event, info) {\n            var _a, _b, _c, _d;\n            var _e = _this.props, dragPropagation = _e.dragPropagation, dragDirectionLock = _e.dragDirectionLock;\n            // If we didn't successfully receive the gesture lock, early return.\n            if (!dragPropagation && !_this.openGlobalLock)\n                return;\n            var offset = info.offset;\n            // Attempt to detect drag direction if directionLock is true\n            if (dragDirectionLock && _this.currentDirection === null) {\n                _this.currentDirection = getCurrentDirection(offset);\n                // If we've successfully set a direction, notify listener\n                if (_this.currentDirection !== null) {\n                    (_b = (_a = _this.props).onDirectionLock) === null || _b === void 0 ? void 0 : _b.call(_a, _this.currentDirection);\n                }\n                return;\n            }\n            // Update each point with the latest position\n            _this.updateAxis(\"x\", info.point, offset);\n            _this.updateAxis(\"y\", info.point, offset);\n            // Fire onDrag event\n            (_d = (_c = _this.props).onDrag) === null || _d === void 0 ? void 0 : _d.call(_c, event, info);\n            // Update the last pointer event\n            lastPointerEvent = event;\n        };\n        var onSessionEnd = function (event, info) {\n            return _this.stop(event, info);\n        };\n        var transformPagePoint = this.props.transformPagePoint;\n        this.panSession = new PanSession(originEvent, {\n            onSessionStart: onSessionStart,\n            onStart: onStart,\n            onMove: onMove,\n            onSessionEnd: onSessionEnd,\n        }, { transformPagePoint: transformPagePoint });\n    };\n    VisualElementDragControls.prototype.resolveDragConstraints = function () {\n        var _this = this;\n        var _a = this.props, dragConstraints = _a.dragConstraints, dragElastic = _a.dragElastic;\n        var layout = this.visualElement.getLayoutState().layoutCorrected;\n        if (dragConstraints) {\n            this.constraints = isRefObject(dragConstraints)\n                ? this.resolveRefConstraints(layout, dragConstraints)\n                : calcRelativeConstraints(layout, dragConstraints);\n        }\n        else {\n            this.constraints = false;\n        }\n        this.elastic = resolveDragElastic(dragElastic);\n        /**\n         * If we're outputting to external MotionValues, we want to rebase the measured constraints\n         * from viewport-relative to component-relative.\n         */\n        if (this.constraints && !this.hasMutatedConstraints) {\n            eachAxis(function (axis) {\n                if (_this.getAxisMotionValue(axis)) {\n                    _this.constraints[axis] = rebaseAxisConstraints(layout[axis], _this.constraints[axis]);\n                }\n            });\n        }\n    };\n    VisualElementDragControls.prototype.resolveRefConstraints = function (layoutBox, constraints) {\n        var _a = this.props, onMeasureDragConstraints = _a.onMeasureDragConstraints, transformPagePoint = _a.transformPagePoint;\n        var constraintsElement = constraints.current;\n        invariant(constraintsElement !== null, \"If `dragConstraints` is set as a React ref, that ref must be passed to another component's `ref` prop.\");\n        this.constraintsBox = getBoundingBox(constraintsElement, transformPagePoint);\n        var measuredConstraints = calcViewportConstraints(layoutBox, this.constraintsBox);\n        /**\n         * If there's an onMeasureDragConstraints listener we call it and\n         * if different constraints are returned, set constraints to that\n         */\n        if (onMeasureDragConstraints) {\n            var userConstraints = onMeasureDragConstraints(convertAxisBoxToBoundingBox(measuredConstraints));\n            this.hasMutatedConstraints = !!userConstraints;\n            if (userConstraints) {\n                measuredConstraints = convertBoundingBoxToAxisBox(userConstraints);\n            }\n        }\n        return measuredConstraints;\n    };\n    VisualElementDragControls.prototype.cancelDrag = function () {\n        var _a, _b;\n        this.visualElement.unlockProjectionTarget();\n        (_a = this.cancelLayout) === null || _a === void 0 ? void 0 : _a.call(this);\n        this.isDragging = false;\n        this.panSession && this.panSession.end();\n        this.panSession = null;\n        if (!this.props.dragPropagation && this.openGlobalLock) {\n            this.openGlobalLock();\n            this.openGlobalLock = null;\n        }\n        (_b = this.visualElement.animationState) === null || _b === void 0 ? void 0 : _b.setActive(AnimationType.Drag, false);\n    };\n    VisualElementDragControls.prototype.stop = function (event, info) {\n        var _a, _b, _c;\n        (_a = this.panSession) === null || _a === void 0 ? void 0 : _a.end();\n        this.panSession = null;\n        var isDragging = this.isDragging;\n        this.cancelDrag();\n        if (!isDragging)\n            return;\n        var velocity = info.velocity;\n        this.animateDragEnd(velocity);\n        (_c = (_b = this.props).onDragEnd) === null || _c === void 0 ? void 0 : _c.call(_b, event, info);\n    };\n    VisualElementDragControls.prototype.snapToCursor = function (point) {\n        var _this = this;\n        return eachAxis(function (axis) {\n            var drag = _this.props.drag;\n            // If we're not dragging this axis, do an early return.\n            if (!shouldDrag(axis, drag, _this.currentDirection))\n                return;\n            var axisValue = _this.getAxisMotionValue(axis);\n            if (axisValue) {\n                var box = _this.visualElement.getLayoutState().layout;\n                var length_1 = box[axis].max - box[axis].min;\n                var center = box[axis].min + length_1 / 2;\n                var offset = point[axis] - center;\n                _this.originPoint[axis] = point[axis];\n                axisValue.set(offset);\n            }\n            else {\n                _this.cursorProgress[axis] = 0.5;\n                return true;\n            }\n        }).includes(true);\n    };\n    /**\n     * Update the specified axis with the latest pointer information.\n     */\n    VisualElementDragControls.prototype.updateAxis = function (axis, point, offset) {\n        var drag = this.props.drag;\n        // If we're not dragging this axis, do an early return.\n        if (!shouldDrag(axis, drag, this.currentDirection))\n            return;\n        return this.getAxisMotionValue(axis)\n            ? this.updateAxisMotionValue(axis, offset)\n            : this.updateVisualElementAxis(axis, point);\n    };\n    VisualElementDragControls.prototype.updateAxisMotionValue = function (axis, offset) {\n        var axisValue = this.getAxisMotionValue(axis);\n        if (!offset || !axisValue)\n            return;\n        var nextValue = this.originPoint[axis] + offset[axis];\n        var update = this.constraints\n            ? applyConstraints(nextValue, this.constraints[axis], this.elastic[axis])\n            : nextValue;\n        axisValue.set(update);\n    };\n    VisualElementDragControls.prototype.updateVisualElementAxis = function (axis, point) {\n        var _a;\n        // Get the actual layout bounding box of the element\n        var axisLayout = this.visualElement.getLayoutState().layout[axis];\n        // Calculate its current length. In the future we might want to lerp this to animate\n        // between lengths if the layout changes as we change the DOM\n        var axisLength = axisLayout.max - axisLayout.min;\n        // Get the initial progress that the pointer sat on this axis on gesture start.\n        var axisProgress = this.cursorProgress[axis];\n        // Calculate a new min point based on the latest pointer position, constraints and elastic\n        var min = calcConstrainedMinPoint(point[axis], axisLength, axisProgress, (_a = this.constraints) === null || _a === void 0 ? void 0 : _a[axis], this.elastic[axis]);\n        // Update the axis viewport target with this new min and the length\n        this.visualElement.setProjectionTargetAxis(axis, min, min + axisLength);\n    };\n    VisualElementDragControls.prototype.setProps = function (_a) {\n        var _b = _a.drag, drag = _b === void 0 ? false : _b, _c = _a.dragDirectionLock, dragDirectionLock = _c === void 0 ? false : _c, _d = _a.dragPropagation, dragPropagation = _d === void 0 ? false : _d, _e = _a.dragConstraints, dragConstraints = _e === void 0 ? false : _e, _f = _a.dragElastic, dragElastic = _f === void 0 ? defaultElastic : _f, _g = _a.dragMomentum, dragMomentum = _g === void 0 ? true : _g, remainingProps = __rest(_a, [\"drag\", \"dragDirectionLock\", \"dragPropagation\", \"dragConstraints\", \"dragElastic\", \"dragMomentum\"]);\n        this.props = __assign({ drag: drag,\n            dragDirectionLock: dragDirectionLock,\n            dragPropagation: dragPropagation,\n            dragConstraints: dragConstraints,\n            dragElastic: dragElastic,\n            dragMomentum: dragMomentum }, remainingProps);\n    };\n    /**\n     * Drag works differently depending on which props are provided.\n     *\n     * - If _dragX and _dragY are provided, we output the gesture delta directly to those motion values.\n     * - If the component will perform layout animations, we output the gesture to the component's\n     *      visual bounding box\n     * - Otherwise, we apply the delta to the x/y motion values.\n     */\n    VisualElementDragControls.prototype.getAxisMotionValue = function (axis) {\n        var _a = this.props, layout = _a.layout, layoutId = _a.layoutId;\n        var dragKey = \"_drag\" + axis.toUpperCase();\n        if (this.props[dragKey]) {\n            return this.props[dragKey];\n        }\n        else if (!layout && layoutId === undefined) {\n            return this.visualElement.getValue(axis, 0);\n        }\n    };\n    VisualElementDragControls.prototype.isLayoutDrag = function () {\n        return !this.getAxisMotionValue(\"x\");\n    };\n    VisualElementDragControls.prototype.isExternalDrag = function () {\n        var _a = this.props, _dragX = _a._dragX, _dragY = _a._dragY;\n        return _dragX || _dragY;\n    };\n    VisualElementDragControls.prototype.animateDragEnd = function (velocity) {\n        var _this = this;\n        var _a = this.props, drag = _a.drag, dragMomentum = _a.dragMomentum, dragElastic = _a.dragElastic, dragTransition = _a.dragTransition;\n        /**\n         * Everything beyond the drag gesture should be performed with\n         * relative projection so children stay in sync with their parent element.\n         */\n        var isRelative = convertToRelativeProjection(this.visualElement, this.isLayoutDrag() && !this.isExternalDrag());\n        /**\n         * If we had previously resolved constraints relative to the viewport,\n         * we need to also convert those to a relative coordinate space for the animation\n         */\n        var constraints = this.constraints || {};\n        if (isRelative &&\n            Object.keys(constraints).length &&\n            this.isLayoutDrag()) {\n            var projectionParent = this.visualElement.getProjectionParent();\n            if (projectionParent) {\n                var relativeConstraints_1 = calcRelativeOffset(projectionParent.projection.targetFinal, constraints);\n                eachAxis(function (axis) {\n                    var _a = relativeConstraints_1[axis], min = _a.min, max = _a.max;\n                    constraints[axis] = {\n                        min: isNaN(min) ? undefined : min,\n                        max: isNaN(max) ? undefined : max,\n                    };\n                });\n            }\n        }\n        var momentumAnimations = eachAxis(function (axis) {\n            var _a;\n            if (!shouldDrag(axis, drag, _this.currentDirection)) {\n                return;\n            }\n            var transition = (_a = constraints === null || constraints === void 0 ? void 0 : constraints[axis]) !== null && _a !== void 0 ? _a : {};\n            /**\n             * Overdamp the boundary spring if `dragElastic` is disabled. There's still a frame\n             * of spring animations so we should look into adding a disable spring option to `inertia`.\n             * We could do something here where we affect the `bounceStiffness` and `bounceDamping`\n             * using the value of `dragElastic`.\n             */\n            var bounceStiffness = dragElastic ? 200 : 1000000;\n            var bounceDamping = dragElastic ? 40 : 10000000;\n            var inertia = __assign(__assign({ type: \"inertia\", velocity: dragMomentum ? velocity[axis] : 0, bounceStiffness: bounceStiffness,\n                bounceDamping: bounceDamping, timeConstant: 750, restDelta: 1, restSpeed: 10 }, dragTransition), transition);\n            // If we're not animating on an externally-provided `MotionValue` we can use the\n            // component's animation controls which will handle interactions with whileHover (etc),\n            // otherwise we just have to animate the `MotionValue` itself.\n            return _this.getAxisMotionValue(axis)\n                ? _this.startAxisValueAnimation(axis, inertia)\n                : _this.visualElement.startLayoutAnimation(axis, inertia, isRelative);\n        });\n        // Run all animations and then resolve the new drag constraints.\n        return Promise.all(momentumAnimations).then(function () {\n            var _a, _b;\n            (_b = (_a = _this.props).onDragTransitionEnd) === null || _b === void 0 ? void 0 : _b.call(_a);\n        });\n    };\n    VisualElementDragControls.prototype.stopMotion = function () {\n        var _this = this;\n        eachAxis(function (axis) {\n            var axisValue = _this.getAxisMotionValue(axis);\n            axisValue\n                ? axisValue.stop()\n                : _this.visualElement.stopLayoutAnimation();\n        });\n    };\n    VisualElementDragControls.prototype.startAxisValueAnimation = function (axis, transition) {\n        var axisValue = this.getAxisMotionValue(axis);\n        if (!axisValue)\n            return;\n        var currentValue = axisValue.get();\n        axisValue.set(currentValue);\n        axisValue.set(currentValue); // Set twice to hard-reset velocity\n        return startAnimation(axis, axisValue, 0, transition);\n    };\n    VisualElementDragControls.prototype.scalePoint = function () {\n        var _this = this;\n        var _a = this.props, drag = _a.drag, dragConstraints = _a.dragConstraints;\n        if (!isRefObject(dragConstraints) || !this.constraintsBox)\n            return;\n        // Stop any current animations as there can be some visual glitching if we resize mid animation\n        this.stopMotion();\n        // Record the relative progress of the targetBox relative to the constraintsBox\n        var boxProgress = { x: 0, y: 0 };\n        eachAxis(function (axis) {\n            boxProgress[axis] = calcOrigin(_this.visualElement.projection.target[axis], _this.constraintsBox[axis]);\n        });\n        /**\n         * For each axis, calculate the current progress of the layout axis within the constraints.\n         * Then, using the latest layout and constraints measurements, reposition the new layout axis\n         * proportionally within the constraints.\n         */\n        this.updateConstraints(function () {\n            eachAxis(function (axis) {\n                if (!shouldDrag(axis, drag, null))\n                    return;\n                // Calculate the position of the targetBox relative to the constraintsBox using the\n                // previously calculated progress\n                var _a = calcPositionFromProgress(_this.visualElement.projection.target[axis], _this.constraintsBox[axis], boxProgress[axis]), min = _a.min, max = _a.max;\n                _this.visualElement.setProjectionTargetAxis(axis, min, max);\n            });\n        });\n        /**\n         * If any other draggable components are queuing the same tasks synchronously\n         * this will wait until they've all been scheduled before flushing.\n         */\n        setTimeout(flushLayout, 1);\n    };\n    VisualElementDragControls.prototype.updateConstraints = function (onReady) {\n        var _this = this;\n        this.cancelLayout = batchLayout(function (read, write) {\n            var ancestors = collectProjectingAncestors(_this.visualElement);\n            write(function () {\n                return ancestors.forEach(function (element) { return element.resetTransform(); });\n            });\n            read(function () { return updateLayoutMeasurement(_this.visualElement); });\n            write(function () {\n                return ancestors.forEach(function (element) { return element.restoreTransform(); });\n            });\n            read(function () {\n                _this.resolveDragConstraints();\n            });\n            if (onReady)\n                write(onReady);\n        });\n    };\n    VisualElementDragControls.prototype.mount = function (visualElement) {\n        var _this = this;\n        var element = visualElement.getInstance();\n        /**\n         * Attach a pointerdown event listener on this DOM element to initiate drag tracking.\n         */\n        var stopPointerListener = addPointerEvent(element, \"pointerdown\", function (event) {\n            var _a = _this.props, drag = _a.drag, _b = _a.dragListener, dragListener = _b === void 0 ? true : _b;\n            drag && dragListener && _this.start(event);\n        });\n        /**\n         * Attach a window resize listener to scale the draggable target within its defined\n         * constraints as the window resizes.\n         */\n        var stopResizeListener = addDomEvent(window, \"resize\", function () {\n            _this.scalePoint();\n        });\n        /**\n         * Ensure drag constraints are resolved correctly relative to the dragging element\n         * whenever its layout changes.\n         */\n        var stopLayoutUpdateListener = visualElement.onLayoutUpdate(function () {\n            if (_this.isDragging) {\n                _this.resolveDragConstraints();\n            }\n        });\n        /**\n         * If the previous component with this same layoutId was dragging at the time\n         * it was unmounted, we want to continue the same gesture on this component.\n         */\n        var prevDragCursor = visualElement.prevDragCursor;\n        if (prevDragCursor) {\n            this.start(lastPointerEvent, { cursorProgress: prevDragCursor });\n        }\n        /**\n         * Return a function that will teardown the drag gesture\n         */\n        return function () {\n            stopPointerListener === null || stopPointerListener === void 0 ? void 0 : stopPointerListener();\n            stopResizeListener === null || stopResizeListener === void 0 ? void 0 : stopResizeListener();\n            stopLayoutUpdateListener === null || stopLayoutUpdateListener === void 0 ? void 0 : stopLayoutUpdateListener();\n            _this.cancelDrag();\n        };\n    };\n    return VisualElementDragControls;\n}());\nfunction shouldDrag(direction, drag, currentDirection) {\n    return ((drag === true || drag === direction) &&\n        (currentDirection === null || currentDirection === direction));\n}\n/**\n * Based on an x/y offset determine the current drag direction. If both axis' offsets are lower\n * than the provided threshold, return `null`.\n *\n * @param offset - The x/y offset from origin.\n * @param lockThreshold - (Optional) - the minimum absolute offset before we can determine a drag direction.\n */\nfunction getCurrentDirection(offset, lockThreshold) {\n    if (lockThreshold === void 0) { lockThreshold = 10; }\n    var direction = null;\n    if (Math.abs(offset.y) > lockThreshold) {\n        direction = \"y\";\n    }\n    else if (Math.abs(offset.x) > lockThreshold) {\n        direction = \"x\";\n    }\n    return direction;\n}\n\nexport { VisualElementDragControls, elementDragControls };\n"],"mappings":"AAAA,SAASA,MAAT,EAAiBC,QAAjB,EAA2BC,aAA3B,EAA0CC,MAA1C,QAAwD,OAAxD;AACA,SAASC,SAAT,QAA0B,YAA1B;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,SAASC,aAAT,QAA8B,iBAA9B;AACA,SAASC,WAAT,QAA4B,8BAA5B;AACA,SAASC,eAAT,QAAgC,mCAAhC;AACA,SAASC,WAAT,QAA4B,+BAA5B;AACA,SAASC,yBAAT,QAA0C,4BAA1C;AACA,SAASC,OAAT,EAAkBC,2BAAlB,EAA+CC,2BAA/C,QAAkF,+BAAlF;AACA,SAASC,QAAT,QAAyB,0BAAzB;AACA,SAASC,uBAAT,EAAkCC,kBAAlC,EAAsDC,qBAAtD,EAA6EC,uBAA7E,EAAsGC,gBAAtG,EAAwHC,uBAAxH,EAAiJC,wBAAjJ,EAA2KC,cAA3K,QAAiM,wBAAjM;AACA,SAASC,cAAT,QAA+B,wCAA/B;AACA,SAASC,UAAT,QAA2B,oCAA3B;AACA,SAASC,cAAT,QAA+B,sCAA/B;AACA,SAASC,aAAT,QAA8B,6BAA9B;AACA,SAASC,0BAAT,EAAqCC,uBAArC,EAA8DC,yBAA9D,QAA+F,sCAA/F;AACA,SAASC,QAAT,QAAyB,WAAzB;AACA,SAASC,2BAAT,QAA4C,oDAA5C;AACA,SAASC,kBAAT,QAAmC,uCAAnC;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,wCAAzC;AACA,SAASC,SAAT,QAA0B,WAA1B;AAEA,IAAIC,mBAAmB,GAAG,IAAIC,OAAJ,EAA1B;AACA;AACA;AACA;;AACA,IAAIC,gBAAJ;;AACA,IAAIC,yBAAyB;AAAG;AAAe,YAAY;EACvD,SAASA,yBAAT,CAAmCC,EAAnC,EAAuC;IACnC,IAAIC,aAAa,GAAGD,EAAE,CAACC,aAAvB;IACA;AACR;AACA;AACA;AACA;;IACQ,KAAKC,UAAL,GAAkB,KAAlB;IACA;AACR;AACA;AACA;AACA;;IACQ,KAAKC,gBAAL,GAAwB,IAAxB;IACA;AACR;AACA;AACA;AACA;;IACQ,KAAKC,WAAL,GAAmB,KAAnB;IACA;AACR;AACA;AACA;AACA;;IACQ,KAAKC,OAAL,GAAelC,OAAO,EAAtB;IACA;AACR;AACA;AACA;AACA;;IACQ,KAAKmC,KAAL,GAAa,EAAb;IACA;AACR;AACA;;IACQ,KAAKC,qBAAL,GAA6B,KAA7B;IACA;AACR;AACA;AACA;AACA;AACA;AACA;;IACQ,KAAKC,cAAL,GAAsB;MAClBC,CAAC,EAAE,GADe;MAElBC,CAAC,EAAE;IAFe,CAAtB,CA3CmC,CA+CnC;IACA;;IACA,KAAKC,WAAL,GAAmB,EAAnB,CAjDmC,CAkDnC;IACA;IACA;;IACA,KAAKC,cAAL,GAAsB,IAAtB;IACA;AACR;AACA;;IACQ,KAAKC,UAAL,GAAkB,IAAlB;IACA,KAAKZ,aAAL,GAAqBA,aAArB;IACA,KAAKA,aAAL,CAAmBa,sBAAnB;IACAlB,mBAAmB,CAACmB,GAApB,CAAwBd,aAAxB,EAAuC,IAAvC;EACH;EACD;AACJ;AACA;AACA;AACA;;;EACIF,yBAAyB,CAACiB,SAA1B,CAAoCC,KAApC,GAA4C,UAAUC,WAAV,EAAuBlB,EAAvB,EAA2B;IACnE,IAAImB,KAAK,GAAG,IAAZ;;IACA,IAAIC,EAAE,GAAGpB,EAAE,KAAK,KAAK,CAAZ,GAAgB,EAAhB,GAAqBA,EAA9B;IAAA,IAAkCqB,EAAE,GAAGD,EAAE,CAACE,YAA1C;IAAA,IAAwDA,YAAY,GAAGD,EAAE,KAAK,KAAK,CAAZ,GAAgB,KAAhB,GAAwBA,EAA/F;IAAA,IAAmGb,cAAc,GAAGY,EAAE,CAACZ,cAAvH;;IACA,IAAIe,cAAc,GAAG,SAAjBA,cAAiB,CAAUC,KAAV,EAAiB;MAClC,IAAIxB,EAAJ,CADkC,CAElC;MACA;;;MACAmB,KAAK,CAACM,UAAN;MACA;AACZ;AACA;AACA;AACA;;;MACY,IAAIC,YAAY,GAAGxD,yBAAyB,CAACsD,KAAD,CAAzB,CAAiCG,KAApD;MACA,CAAC3B,EAAE,GAAGmB,KAAK,CAACS,YAAZ,MAA8B,IAA9B,IAAsC5B,EAAE,KAAK,KAAK,CAAlD,GAAsD,KAAK,CAA3D,GAA+DA,EAAE,CAAC6B,IAAH,CAAQV,KAAR,CAA/D;MACAA,KAAK,CAACS,YAAN,GAAqBlC,WAAW,CAAC,UAAUoC,IAAV,EAAgBC,KAAhB,EAAuB;QACpD,IAAIC,SAAS,GAAG7C,0BAA0B,CAACgC,KAAK,CAAClB,aAAP,CAA1C;QACA,IAAIgC,QAAQ,GAAG5C,yBAAyB,CAAC8B,KAAK,CAAClB,aAAP,CAAxC;;QACA,IAAIiC,IAAI,GAAGxE,aAAa,CAACA,aAAa,CAAC,EAAD,EAAKC,MAAM,CAACqE,SAAD,CAAX,CAAd,EAAuCrE,MAAM,CAACsE,QAAD,CAA7C,CAAxB;;QACA,IAAIE,0BAA0B,GAAG,KAAjC;QACA;AAChB;AACA;AACA;;QACgBhB,KAAK,CAACiB,YAAN,MAAwBjB,KAAK,CAAClB,aAAN,CAAoBoC,oBAApB,EAAxB;QACAN,KAAK,CAAC,YAAY;UACdG,IAAI,CAACI,OAAL,CAAa,UAAUC,OAAV,EAAmB;YAAE,OAAOA,OAAO,CAACC,cAAR,EAAP;UAAkC,CAApE;QACH,CAFI,CAAL;QAGAV,IAAI,CAAC,YAAY;UACb1C,uBAAuB,CAAC+B,KAAK,CAAClB,aAAP,CAAvB;UACAgC,QAAQ,CAACK,OAAT,CAAiBlD,uBAAjB;QACH,CAHG,CAAJ;QAIA2C,KAAK,CAAC,YAAY;UACdG,IAAI,CAACI,OAAL,CAAa,UAAUC,OAAV,EAAmB;YAAE,OAAOA,OAAO,CAACE,gBAAR,EAAP;UAAoC,CAAtE;;UACA,IAAInB,YAAJ,EAAkB;YACda,0BAA0B,GAAGhB,KAAK,CAACG,YAAN,CAAmBI,YAAnB,CAA7B;UACH;QACJ,CALI,CAAL;QAMAI,IAAI,CAAC,YAAY;UACb,IAAIY,cAAc,GAAGC,OAAO,CAACxB,KAAK,CAACyB,kBAAN,CAAyB,GAAzB,KAAiC,CAACzB,KAAK,CAAC0B,cAAN,EAAnC,CAA5B;;UACA,IAAI,CAACH,cAAL,EAAqB;YACjBvB,KAAK,CAAClB,aAAN,CAAoB6C,sBAApB,CAA2C,IAA3C,EAAiD3B,KAAK,CAAClB,aAAN,CAAoB8C,kBAApB,CAAuC,KAAvC,CAAjD;UACH;;UACD5B,KAAK,CAAClB,aAAN,CAAoB+C,8BAApB;UACA;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;UACoB,IAAIC,UAAU,GAAG9B,KAAK,CAAClB,aAAN,CAAoBgD,UAArC;UACA3E,QAAQ,CAAC,UAAU4E,IAAV,EAAgB;YACrB,IAAI,CAACf,0BAAL,EAAiC;cAC7B,IAAInC,EAAE,GAAGiD,UAAU,CAACE,MAAX,CAAkBD,IAAlB,CAAT;cAAA,IAAkCE,GAAG,GAAGpD,EAAE,CAACoD,GAA3C;cAAA,IAAgDC,GAAG,GAAGrD,EAAE,CAACqD,GAAzD;cACAlC,KAAK,CAACX,cAAN,CAAqB0C,IAArB,IAA6B1C,cAAc,GACrCA,cAAc,CAAC0C,IAAD,CADuB,GAErC5D,QAAQ,CAAC8D,GAAD,EAAMC,GAAN,EAAW3B,YAAY,CAACwB,IAAD,CAAvB,CAFd;YAGH;YACD;AACxB;AACA;AACA;;;YACwB,IAAII,SAAS,GAAGnC,KAAK,CAACyB,kBAAN,CAAyBM,IAAzB,CAAhB;;YACA,IAAII,SAAJ,EAAe;cACXnC,KAAK,CAACR,WAAN,CAAkBuC,IAAlB,IAA0BI,SAAS,CAACC,GAAV,EAA1B;YACH;UACJ,CAfO,CAAR;QAgBH,CAlCG,CAAJ;QAmCAxB,KAAK,CAAC,YAAY;UACdpC,SAAS,CAAC6D,MAAV;UACA7D,SAAS,CAAC8D,SAAV;UACA9D,SAAS,CAAC+D,MAAV;UACA/D,SAAS,CAACgE,UAAV;QACH,CALI,CAAL;QAMA7B,IAAI,CAAC,YAAY;UAAE,OAAOX,KAAK,CAACyC,sBAAN,EAAP;QAAwC,CAAvD,CAAJ;MACH,CAjE+B,CAAhC;IAkEH,CA9ED;;IA+EA,IAAIC,OAAO,GAAG,SAAVA,OAAU,CAAUrC,KAAV,EAAiBsC,IAAjB,EAAuB;MACjC,IAAI9D,EAAJ,EAAQoB,EAAR,EAAYC,EAAZ,CADiC,CAEjC;;;MACA,IAAI0C,EAAE,GAAG5C,KAAK,CAACb,KAAf;MAAA,IAAsB0D,IAAI,GAAGD,EAAE,CAACC,IAAhC;MAAA,IAAsCC,eAAe,GAAGF,EAAE,CAACE,eAA3D;;MACA,IAAID,IAAI,IAAI,CAACC,eAAb,EAA8B;QAC1B,IAAI9C,KAAK,CAACP,cAAV,EACIO,KAAK,CAACP,cAAN;QACJO,KAAK,CAACP,cAAN,GAAuB9C,aAAa,CAACkG,IAAD,CAApC,CAH0B,CAI1B;;QACA,IAAI,CAAC7C,KAAK,CAACP,cAAX,EACI;MACP;;MACDnB,WAAW,GAZsB,CAajC;;MACA0B,KAAK,CAACjB,UAAN,GAAmB,IAAnB;MACAiB,KAAK,CAAChB,gBAAN,GAAyB,IAAzB,CAfiC,CAgBjC;;MACA,CAACiB,EAAE,GAAG,CAACpB,EAAE,GAAGmB,KAAK,CAACb,KAAZ,EAAmB4D,WAAzB,MAA0C,IAA1C,IAAkD9C,EAAE,KAAK,KAAK,CAA9D,GAAkE,KAAK,CAAvE,GAA2EA,EAAE,CAACS,IAAH,CAAQ7B,EAAR,EAAYwB,KAAZ,EAAmBsC,IAAnB,CAA3E;MACA,CAACzC,EAAE,GAAGF,KAAK,CAAClB,aAAN,CAAoBkE,cAA1B,MAA8C,IAA9C,IAAsD9C,EAAE,KAAK,KAAK,CAAlE,GAAsE,KAAK,CAA3E,GAA+EA,EAAE,CAAC+C,SAAH,CAAalF,aAAa,CAACmF,IAA3B,EAAiC,IAAjC,CAA/E;IACH,CAnBD;;IAoBA,IAAIC,MAAM,GAAG,SAATA,MAAS,CAAU9C,KAAV,EAAiBsC,IAAjB,EAAuB;MAChC,IAAI9D,EAAJ,EAAQoB,EAAR,EAAYC,EAAZ,EAAgB0C,EAAhB;;MACA,IAAIQ,EAAE,GAAGpD,KAAK,CAACb,KAAf;MAAA,IAAsB2D,eAAe,GAAGM,EAAE,CAACN,eAA3C;MAAA,IAA4DO,iBAAiB,GAAGD,EAAE,CAACC,iBAAnF,CAFgC,CAGhC;;MACA,IAAI,CAACP,eAAD,IAAoB,CAAC9C,KAAK,CAACP,cAA/B,EACI;MACJ,IAAI6D,MAAM,GAAGX,IAAI,CAACW,MAAlB,CANgC,CAOhC;;MACA,IAAID,iBAAiB,IAAIrD,KAAK,CAAChB,gBAAN,KAA2B,IAApD,EAA0D;QACtDgB,KAAK,CAAChB,gBAAN,GAAyBuE,mBAAmB,CAACD,MAAD,CAA5C,CADsD,CAEtD;;QACA,IAAItD,KAAK,CAAChB,gBAAN,KAA2B,IAA/B,EAAqC;UACjC,CAACiB,EAAE,GAAG,CAACpB,EAAE,GAAGmB,KAAK,CAACb,KAAZ,EAAmBqE,eAAzB,MAA8C,IAA9C,IAAsDvD,EAAE,KAAK,KAAK,CAAlE,GAAsE,KAAK,CAA3E,GAA+EA,EAAE,CAACS,IAAH,CAAQ7B,EAAR,EAAYmB,KAAK,CAAChB,gBAAlB,CAA/E;QACH;;QACD;MACH,CAf+B,CAgBhC;;;MACAgB,KAAK,CAACyD,UAAN,CAAiB,GAAjB,EAAsBd,IAAI,CAACnC,KAA3B,EAAkC8C,MAAlC;;MACAtD,KAAK,CAACyD,UAAN,CAAiB,GAAjB,EAAsBd,IAAI,CAACnC,KAA3B,EAAkC8C,MAAlC,EAlBgC,CAmBhC;;;MACA,CAACV,EAAE,GAAG,CAAC1C,EAAE,GAAGF,KAAK,CAACb,KAAZ,EAAmBuE,MAAzB,MAAqC,IAArC,IAA6Cd,EAAE,KAAK,KAAK,CAAzD,GAA6D,KAAK,CAAlE,GAAsEA,EAAE,CAAClC,IAAH,CAAQR,EAAR,EAAYG,KAAZ,EAAmBsC,IAAnB,CAAtE,CApBgC,CAqBhC;;MACAhE,gBAAgB,GAAG0B,KAAnB;IACH,CAvBD;;IAwBA,IAAIsD,YAAY,GAAG,SAAfA,YAAe,CAAUtD,KAAV,EAAiBsC,IAAjB,EAAuB;MACtC,OAAO3C,KAAK,CAAC4D,IAAN,CAAWvD,KAAX,EAAkBsC,IAAlB,CAAP;IACH,CAFD;;IAGA,IAAIkB,kBAAkB,GAAG,KAAK1E,KAAL,CAAW0E,kBAApC;IACA,KAAKnE,UAAL,GAAkB,IAAIhD,UAAJ,CAAeqD,WAAf,EAA4B;MAC1CK,cAAc,EAAEA,cAD0B;MAE1CsC,OAAO,EAAEA,OAFiC;MAG1CS,MAAM,EAAEA,MAHkC;MAI1CQ,YAAY,EAAEA;IAJ4B,CAA5B,EAKf;MAAEE,kBAAkB,EAAEA;IAAtB,CALe,CAAlB;EAMH,CAxID;;EAyIAjF,yBAAyB,CAACiB,SAA1B,CAAoC4C,sBAApC,GAA6D,YAAY;IACrE,IAAIzC,KAAK,GAAG,IAAZ;;IACA,IAAInB,EAAE,GAAG,KAAKM,KAAd;IAAA,IAAqB2E,eAAe,GAAGjF,EAAE,CAACiF,eAA1C;IAAA,IAA2DC,WAAW,GAAGlF,EAAE,CAACkF,WAA5E;IACA,IAAIC,MAAM,GAAG,KAAKlF,aAAL,CAAmBmF,cAAnB,GAAoCC,eAAjD;;IACA,IAAIJ,eAAJ,EAAqB;MACjB,KAAK7E,WAAL,GAAmBrC,WAAW,CAACkH,eAAD,CAAX,GACb,KAAKK,qBAAL,CAA2BH,MAA3B,EAAmCF,eAAnC,CADa,GAEb1G,uBAAuB,CAAC4G,MAAD,EAASF,eAAT,CAF7B;IAGH,CAJD,MAKK;MACD,KAAK7E,WAAL,GAAmB,KAAnB;IACH;;IACD,KAAKC,OAAL,GAAe7B,kBAAkB,CAAC0G,WAAD,CAAjC;IACA;AACR;AACA;AACA;;IACQ,IAAI,KAAK9E,WAAL,IAAoB,CAAC,KAAKG,qBAA9B,EAAqD;MACjDjC,QAAQ,CAAC,UAAU4E,IAAV,EAAgB;QACrB,IAAI/B,KAAK,CAACyB,kBAAN,CAAyBM,IAAzB,CAAJ,EAAoC;UAChC/B,KAAK,CAACf,WAAN,CAAkB8C,IAAlB,IAA0BzE,qBAAqB,CAAC0G,MAAM,CAACjC,IAAD,CAAP,EAAe/B,KAAK,CAACf,WAAN,CAAkB8C,IAAlB,CAAf,CAA/C;QACH;MACJ,CAJO,CAAR;IAKH;EACJ,CAxBD;;EAyBAnD,yBAAyB,CAACiB,SAA1B,CAAoCsE,qBAApC,GAA4D,UAAUC,SAAV,EAAqBnF,WAArB,EAAkC;IAC1F,IAAIJ,EAAE,GAAG,KAAKM,KAAd;IAAA,IAAqBkF,wBAAwB,GAAGxF,EAAE,CAACwF,wBAAnD;IAAA,IAA6ER,kBAAkB,GAAGhF,EAAE,CAACgF,kBAArG;IACA,IAAIS,kBAAkB,GAAGrF,WAAW,CAACsF,OAArC;IACA9H,SAAS,CAAC6H,kBAAkB,KAAK,IAAxB,EAA8B,wGAA9B,CAAT;IACA,KAAKE,cAAL,GAAsB5G,cAAc,CAAC0G,kBAAD,EAAqBT,kBAArB,CAApC;IACA,IAAIY,mBAAmB,GAAGlH,uBAAuB,CAAC6G,SAAD,EAAY,KAAKI,cAAjB,CAAjD;IACA;AACR;AACA;AACA;;IACQ,IAAIH,wBAAJ,EAA8B;MAC1B,IAAIK,eAAe,GAAGL,wBAAwB,CAACpH,2BAA2B,CAACwH,mBAAD,CAA5B,CAA9C;MACA,KAAKrF,qBAAL,GAA6B,CAAC,CAACsF,eAA/B;;MACA,IAAIA,eAAJ,EAAqB;QACjBD,mBAAmB,GAAGvH,2BAA2B,CAACwH,eAAD,CAAjD;MACH;IACJ;;IACD,OAAOD,mBAAP;EACH,CAlBD;;EAmBA7F,yBAAyB,CAACiB,SAA1B,CAAoC8E,UAApC,GAAiD,YAAY;IACzD,IAAI9F,EAAJ,EAAQoB,EAAR;;IACA,KAAKnB,aAAL,CAAmB8F,sBAAnB;IACA,CAAC/F,EAAE,GAAG,KAAK4B,YAAX,MAA6B,IAA7B,IAAqC5B,EAAE,KAAK,KAAK,CAAjD,GAAqD,KAAK,CAA1D,GAA8DA,EAAE,CAAC6B,IAAH,CAAQ,IAAR,CAA9D;IACA,KAAK3B,UAAL,GAAkB,KAAlB;IACA,KAAKW,UAAL,IAAmB,KAAKA,UAAL,CAAgBmF,GAAhB,EAAnB;IACA,KAAKnF,UAAL,GAAkB,IAAlB;;IACA,IAAI,CAAC,KAAKP,KAAL,CAAW2D,eAAZ,IAA+B,KAAKrD,cAAxC,EAAwD;MACpD,KAAKA,cAAL;MACA,KAAKA,cAAL,GAAsB,IAAtB;IACH;;IACD,CAACQ,EAAE,GAAG,KAAKnB,aAAL,CAAmBkE,cAAzB,MAA6C,IAA7C,IAAqD/C,EAAE,KAAK,KAAK,CAAjE,GAAqE,KAAK,CAA1E,GAA8EA,EAAE,CAACgD,SAAH,CAAalF,aAAa,CAACmF,IAA3B,EAAiC,KAAjC,CAA9E;EACH,CAZD;;EAaAtE,yBAAyB,CAACiB,SAA1B,CAAoC+D,IAApC,GAA2C,UAAUvD,KAAV,EAAiBsC,IAAjB,EAAuB;IAC9D,IAAI9D,EAAJ,EAAQoB,EAAR,EAAYC,EAAZ;;IACA,CAACrB,EAAE,GAAG,KAAKa,UAAX,MAA2B,IAA3B,IAAmCb,EAAE,KAAK,KAAK,CAA/C,GAAmD,KAAK,CAAxD,GAA4DA,EAAE,CAACgG,GAAH,EAA5D;IACA,KAAKnF,UAAL,GAAkB,IAAlB;IACA,IAAIX,UAAU,GAAG,KAAKA,UAAtB;IACA,KAAK4F,UAAL;IACA,IAAI,CAAC5F,UAAL,EACI;IACJ,IAAI+F,QAAQ,GAAGnC,IAAI,CAACmC,QAApB;IACA,KAAKC,cAAL,CAAoBD,QAApB;IACA,CAAC5E,EAAE,GAAG,CAACD,EAAE,GAAG,KAAKd,KAAX,EAAkB6F,SAAxB,MAAuC,IAAvC,IAA+C9E,EAAE,KAAK,KAAK,CAA3D,GAA+D,KAAK,CAApE,GAAwEA,EAAE,CAACQ,IAAH,CAAQT,EAAR,EAAYI,KAAZ,EAAmBsC,IAAnB,CAAxE;EACH,CAXD;;EAYA/D,yBAAyB,CAACiB,SAA1B,CAAoCM,YAApC,GAAmD,UAAUK,KAAV,EAAiB;IAChE,IAAIR,KAAK,GAAG,IAAZ;;IACA,OAAO7C,QAAQ,CAAC,UAAU4E,IAAV,EAAgB;MAC5B,IAAIc,IAAI,GAAG7C,KAAK,CAACb,KAAN,CAAY0D,IAAvB,CAD4B,CAE5B;;MACA,IAAI,CAACoC,UAAU,CAAClD,IAAD,EAAOc,IAAP,EAAa7C,KAAK,CAAChB,gBAAnB,CAAf,EACI;;MACJ,IAAImD,SAAS,GAAGnC,KAAK,CAACyB,kBAAN,CAAyBM,IAAzB,CAAhB;;MACA,IAAII,SAAJ,EAAe;QACX,IAAI+C,GAAG,GAAGlF,KAAK,CAAClB,aAAN,CAAoBmF,cAApB,GAAqCD,MAA/C;;QACA,IAAImB,QAAQ,GAAGD,GAAG,CAACnD,IAAD,CAAH,CAAUG,GAAV,GAAgBgD,GAAG,CAACnD,IAAD,CAAH,CAAUE,GAAzC;QACA,IAAImD,MAAM,GAAGF,GAAG,CAACnD,IAAD,CAAH,CAAUE,GAAV,GAAgBkD,QAAQ,GAAG,CAAxC;QACA,IAAI7B,MAAM,GAAG9C,KAAK,CAACuB,IAAD,CAAL,GAAcqD,MAA3B;QACApF,KAAK,CAACR,WAAN,CAAkBuC,IAAlB,IAA0BvB,KAAK,CAACuB,IAAD,CAA/B;QACAI,SAAS,CAACvC,GAAV,CAAc0D,MAAd;MACH,CAPD,MAQK;QACDtD,KAAK,CAACX,cAAN,CAAqB0C,IAArB,IAA6B,GAA7B;QACA,OAAO,IAAP;MACH;IACJ,CAlBc,CAAR,CAkBJsD,QAlBI,CAkBK,IAlBL,CAAP;EAmBH,CArBD;EAsBA;AACJ;AACA;;;EACIzG,yBAAyB,CAACiB,SAA1B,CAAoC4D,UAApC,GAAiD,UAAU1B,IAAV,EAAgBvB,KAAhB,EAAuB8C,MAAvB,EAA+B;IAC5E,IAAIT,IAAI,GAAG,KAAK1D,KAAL,CAAW0D,IAAtB,CAD4E,CAE5E;;IACA,IAAI,CAACoC,UAAU,CAAClD,IAAD,EAAOc,IAAP,EAAa,KAAK7D,gBAAlB,CAAf,EACI;IACJ,OAAO,KAAKyC,kBAAL,CAAwBM,IAAxB,IACD,KAAKuD,qBAAL,CAA2BvD,IAA3B,EAAiCuB,MAAjC,CADC,GAED,KAAKiC,uBAAL,CAA6BxD,IAA7B,EAAmCvB,KAAnC,CAFN;EAGH,CARD;;EASA5B,yBAAyB,CAACiB,SAA1B,CAAoCyF,qBAApC,GAA4D,UAAUvD,IAAV,EAAgBuB,MAAhB,EAAwB;IAChF,IAAInB,SAAS,GAAG,KAAKV,kBAAL,CAAwBM,IAAxB,CAAhB;IACA,IAAI,CAACuB,MAAD,IAAW,CAACnB,SAAhB,EACI;IACJ,IAAIqD,SAAS,GAAG,KAAKhG,WAAL,CAAiBuC,IAAjB,IAAyBuB,MAAM,CAACvB,IAAD,CAA/C;IACA,IAAIM,MAAM,GAAG,KAAKpD,WAAL,GACPzB,gBAAgB,CAACgI,SAAD,EAAY,KAAKvG,WAAL,CAAiB8C,IAAjB,CAAZ,EAAoC,KAAK7C,OAAL,CAAa6C,IAAb,CAApC,CADT,GAEPyD,SAFN;IAGArD,SAAS,CAACvC,GAAV,CAAcyC,MAAd;EACH,CATD;;EAUAzD,yBAAyB,CAACiB,SAA1B,CAAoC0F,uBAApC,GAA8D,UAAUxD,IAAV,EAAgBvB,KAAhB,EAAuB;IACjF,IAAI3B,EAAJ,CADiF,CAEjF;;;IACA,IAAI4G,UAAU,GAAG,KAAK3G,aAAL,CAAmBmF,cAAnB,GAAoCD,MAApC,CAA2CjC,IAA3C,CAAjB,CAHiF,CAIjF;IACA;;IACA,IAAI2D,UAAU,GAAGD,UAAU,CAACvD,GAAX,GAAiBuD,UAAU,CAACxD,GAA7C,CANiF,CAOjF;;IACA,IAAI0D,YAAY,GAAG,KAAKtG,cAAL,CAAoB0C,IAApB,CAAnB,CARiF,CASjF;;IACA,IAAIE,GAAG,GAAGxE,uBAAuB,CAAC+C,KAAK,CAACuB,IAAD,CAAN,EAAc2D,UAAd,EAA0BC,YAA1B,EAAwC,CAAC9G,EAAE,GAAG,KAAKI,WAAX,MAA4B,IAA5B,IAAoCJ,EAAE,KAAK,KAAK,CAAhD,GAAoD,KAAK,CAAzD,GAA6DA,EAAE,CAACkD,IAAD,CAAvG,EAA+G,KAAK7C,OAAL,CAAa6C,IAAb,CAA/G,CAAjC,CAViF,CAWjF;;IACA,KAAKjD,aAAL,CAAmB8G,uBAAnB,CAA2C7D,IAA3C,EAAiDE,GAAjD,EAAsDA,GAAG,GAAGyD,UAA5D;EACH,CAbD;;EAcA9G,yBAAyB,CAACiB,SAA1B,CAAoCgG,QAApC,GAA+C,UAAUhH,EAAV,EAAc;IACzD,IAAIoB,EAAE,GAAGpB,EAAE,CAACgE,IAAZ;IAAA,IAAkBA,IAAI,GAAG5C,EAAE,KAAK,KAAK,CAAZ,GAAgB,KAAhB,GAAwBA,EAAjD;IAAA,IAAqDC,EAAE,GAAGrB,EAAE,CAACwE,iBAA7D;IAAA,IAAgFA,iBAAiB,GAAGnD,EAAE,KAAK,KAAK,CAAZ,GAAgB,KAAhB,GAAwBA,EAA5H;IAAA,IAAgI0C,EAAE,GAAG/D,EAAE,CAACiE,eAAxI;IAAA,IAAyJA,eAAe,GAAGF,EAAE,KAAK,KAAK,CAAZ,GAAgB,KAAhB,GAAwBA,EAAnM;IAAA,IAAuMQ,EAAE,GAAGvE,EAAE,CAACiF,eAA/M;IAAA,IAAgOA,eAAe,GAAGV,EAAE,KAAK,KAAK,CAAZ,GAAgB,KAAhB,GAAwBA,EAA1Q;IAAA,IAA8Q0C,EAAE,GAAGjH,EAAE,CAACkF,WAAtR;IAAA,IAAmSA,WAAW,GAAG+B,EAAE,KAAK,KAAK,CAAZ,GAAgBnI,cAAhB,GAAiCmI,EAAlV;IAAA,IAAsVC,EAAE,GAAGlH,EAAE,CAACmH,YAA9V;IAAA,IAA4WA,YAAY,GAAGD,EAAE,KAAK,KAAK,CAAZ,GAAgB,IAAhB,GAAuBA,EAAlZ;IAAA,IAAsZE,cAAc,GAAG5J,MAAM,CAACwC,EAAD,EAAK,CAAC,MAAD,EAAS,mBAAT,EAA8B,iBAA9B,EAAiD,iBAAjD,EAAoE,aAApE,EAAmF,cAAnF,CAAL,CAA7a;;IACA,KAAKM,KAAL,GAAa7C,QAAQ,CAAC;MAAEuG,IAAI,EAAEA,IAAR;MAClBQ,iBAAiB,EAAEA,iBADD;MAElBP,eAAe,EAAEA,eAFC;MAGlBgB,eAAe,EAAEA,eAHC;MAIlBC,WAAW,EAAEA,WAJK;MAKlBiC,YAAY,EAAEA;IALI,CAAD,EAKaC,cALb,CAArB;EAMH,CARD;EASA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;EACIrH,yBAAyB,CAACiB,SAA1B,CAAoC4B,kBAApC,GAAyD,UAAUM,IAAV,EAAgB;IACrE,IAAIlD,EAAE,GAAG,KAAKM,KAAd;IAAA,IAAqB6E,MAAM,GAAGnF,EAAE,CAACmF,MAAjC;IAAA,IAAyCkC,QAAQ,GAAGrH,EAAE,CAACqH,QAAvD;IACA,IAAIC,OAAO,GAAG,UAAUpE,IAAI,CAACqE,WAAL,EAAxB;;IACA,IAAI,KAAKjH,KAAL,CAAWgH,OAAX,CAAJ,EAAyB;MACrB,OAAO,KAAKhH,KAAL,CAAWgH,OAAX,CAAP;IACH,CAFD,MAGK,IAAI,CAACnC,MAAD,IAAWkC,QAAQ,KAAKG,SAA5B,EAAuC;MACxC,OAAO,KAAKvH,aAAL,CAAmBwH,QAAnB,CAA4BvE,IAA5B,EAAkC,CAAlC,CAAP;IACH;EACJ,CATD;;EAUAnD,yBAAyB,CAACiB,SAA1B,CAAoCoB,YAApC,GAAmD,YAAY;IAC3D,OAAO,CAAC,KAAKQ,kBAAL,CAAwB,GAAxB,CAAR;EACH,CAFD;;EAGA7C,yBAAyB,CAACiB,SAA1B,CAAoC6B,cAApC,GAAqD,YAAY;IAC7D,IAAI7C,EAAE,GAAG,KAAKM,KAAd;IAAA,IAAqBoH,MAAM,GAAG1H,EAAE,CAAC0H,MAAjC;IAAA,IAAyCC,MAAM,GAAG3H,EAAE,CAAC2H,MAArD;IACA,OAAOD,MAAM,IAAIC,MAAjB;EACH,CAHD;;EAIA5H,yBAAyB,CAACiB,SAA1B,CAAoCkF,cAApC,GAAqD,UAAUD,QAAV,EAAoB;IACrE,IAAI9E,KAAK,GAAG,IAAZ;;IACA,IAAInB,EAAE,GAAG,KAAKM,KAAd;IAAA,IAAqB0D,IAAI,GAAGhE,EAAE,CAACgE,IAA/B;IAAA,IAAqCmD,YAAY,GAAGnH,EAAE,CAACmH,YAAvD;IAAA,IAAqEjC,WAAW,GAAGlF,EAAE,CAACkF,WAAtF;IAAA,IAAmG0C,cAAc,GAAG5H,EAAE,CAAC4H,cAAvH;IACA;AACR;AACA;AACA;;IACQ,IAAIC,UAAU,GAAGtI,2BAA2B,CAAC,KAAKU,aAAN,EAAqB,KAAKmC,YAAL,MAAuB,CAAC,KAAKS,cAAL,EAA7C,CAA5C;IACA;AACR;AACA;AACA;;IACQ,IAAIzC,WAAW,GAAG,KAAKA,WAAL,IAAoB,EAAtC;;IACA,IAAIyH,UAAU,IACVC,MAAM,CAACC,IAAP,CAAY3H,WAAZ,EAAyB4H,MADzB,IAEA,KAAK5F,YAAL,EAFJ,EAEyB;MACrB,IAAI6F,gBAAgB,GAAG,KAAKhI,aAAL,CAAmBiI,mBAAnB,EAAvB;;MACA,IAAID,gBAAJ,EAAsB;QAClB,IAAIE,qBAAqB,GAAG3I,kBAAkB,CAACyI,gBAAgB,CAAChF,UAAjB,CAA4BmF,WAA7B,EAA0ChI,WAA1C,CAA9C;QACA9B,QAAQ,CAAC,UAAU4E,IAAV,EAAgB;UACrB,IAAIlD,EAAE,GAAGmI,qBAAqB,CAACjF,IAAD,CAA9B;UAAA,IAAsCE,GAAG,GAAGpD,EAAE,CAACoD,GAA/C;UAAA,IAAoDC,GAAG,GAAGrD,EAAE,CAACqD,GAA7D;UACAjD,WAAW,CAAC8C,IAAD,CAAX,GAAoB;YAChBE,GAAG,EAAEiF,KAAK,CAACjF,GAAD,CAAL,GAAaoE,SAAb,GAAyBpE,GADd;YAEhBC,GAAG,EAAEgF,KAAK,CAAChF,GAAD,CAAL,GAAamE,SAAb,GAAyBnE;UAFd,CAApB;QAIH,CANO,CAAR;MAOH;IACJ;;IACD,IAAIiF,kBAAkB,GAAGhK,QAAQ,CAAC,UAAU4E,IAAV,EAAgB;MAC9C,IAAIlD,EAAJ;;MACA,IAAI,CAACoG,UAAU,CAAClD,IAAD,EAAOc,IAAP,EAAa7C,KAAK,CAAChB,gBAAnB,CAAf,EAAqD;QACjD;MACH;;MACD,IAAIoI,UAAU,GAAG,CAACvI,EAAE,GAAGI,WAAW,KAAK,IAAhB,IAAwBA,WAAW,KAAK,KAAK,CAA7C,GAAiD,KAAK,CAAtD,GAA0DA,WAAW,CAAC8C,IAAD,CAA3E,MAAuF,IAAvF,IAA+FlD,EAAE,KAAK,KAAK,CAA3G,GAA+GA,EAA/G,GAAoH,EAArI;MACA;AACZ;AACA;AACA;AACA;AACA;;MACY,IAAIwI,eAAe,GAAGtD,WAAW,GAAG,GAAH,GAAS,OAA1C;MACA,IAAIuD,aAAa,GAAGvD,WAAW,GAAG,EAAH,GAAQ,QAAvC;;MACA,IAAIwD,OAAO,GAAGjL,QAAQ,CAACA,QAAQ,CAAC;QAAEkL,IAAI,EAAE,SAAR;QAAmB1C,QAAQ,EAAEkB,YAAY,GAAGlB,QAAQ,CAAC/C,IAAD,CAAX,GAAoB,CAA7D;QAAgEsF,eAAe,EAAEA,eAAjF;QAC5BC,aAAa,EAAEA,aADa;QACEG,YAAY,EAAE,GADhB;QACqBC,SAAS,EAAE,CADhC;QACmCC,SAAS,EAAE;MAD9C,CAAD,EACqDlB,cADrD,CAAT,EAC+EW,UAD/E,CAAtB,CAd8C,CAgB9C;MACA;MACA;;;MACA,OAAOpH,KAAK,CAACyB,kBAAN,CAAyBM,IAAzB,IACD/B,KAAK,CAAC4H,uBAAN,CAA8B7F,IAA9B,EAAoCwF,OAApC,CADC,GAEDvH,KAAK,CAAClB,aAAN,CAAoB+I,oBAApB,CAAyC9F,IAAzC,EAA+CwF,OAA/C,EAAwDb,UAAxD,CAFN;IAGH,CAtBgC,CAAjC,CA5BqE,CAmDrE;;IACA,OAAOoB,OAAO,CAACC,GAAR,CAAYZ,kBAAZ,EAAgCa,IAAhC,CAAqC,YAAY;MACpD,IAAInJ,EAAJ,EAAQoB,EAAR;;MACA,CAACA,EAAE,GAAG,CAACpB,EAAE,GAAGmB,KAAK,CAACb,KAAZ,EAAmB8I,mBAAzB,MAAkD,IAAlD,IAA0DhI,EAAE,KAAK,KAAK,CAAtE,GAA0E,KAAK,CAA/E,GAAmFA,EAAE,CAACS,IAAH,CAAQ7B,EAAR,CAAnF;IACH,CAHM,CAAP;EAIH,CAxDD;;EAyDAD,yBAAyB,CAACiB,SAA1B,CAAoCS,UAApC,GAAiD,YAAY;IACzD,IAAIN,KAAK,GAAG,IAAZ;;IACA7C,QAAQ,CAAC,UAAU4E,IAAV,EAAgB;MACrB,IAAII,SAAS,GAAGnC,KAAK,CAACyB,kBAAN,CAAyBM,IAAzB,CAAhB;;MACAI,SAAS,GACHA,SAAS,CAACyB,IAAV,EADG,GAEH5D,KAAK,CAAClB,aAAN,CAAoBoJ,mBAApB,EAFN;IAGH,CALO,CAAR;EAMH,CARD;;EASAtJ,yBAAyB,CAACiB,SAA1B,CAAoC+H,uBAApC,GAA8D,UAAU7F,IAAV,EAAgBqF,UAAhB,EAA4B;IACtF,IAAIjF,SAAS,GAAG,KAAKV,kBAAL,CAAwBM,IAAxB,CAAhB;IACA,IAAI,CAACI,SAAL,EACI;IACJ,IAAIgG,YAAY,GAAGhG,SAAS,CAACC,GAAV,EAAnB;IACAD,SAAS,CAACvC,GAAV,CAAcuI,YAAd;IACAhG,SAAS,CAACvC,GAAV,CAAcuI,YAAd,EANsF,CAMzD;;IAC7B,OAAOrK,cAAc,CAACiE,IAAD,EAAOI,SAAP,EAAkB,CAAlB,EAAqBiF,UAArB,CAArB;EACH,CARD;;EASAxI,yBAAyB,CAACiB,SAA1B,CAAoCuI,UAApC,GAAiD,YAAY;IACzD,IAAIpI,KAAK,GAAG,IAAZ;;IACA,IAAInB,EAAE,GAAG,KAAKM,KAAd;IAAA,IAAqB0D,IAAI,GAAGhE,EAAE,CAACgE,IAA/B;IAAA,IAAqCiB,eAAe,GAAGjF,EAAE,CAACiF,eAA1D;IACA,IAAI,CAAClH,WAAW,CAACkH,eAAD,CAAZ,IAAiC,CAAC,KAAKU,cAA3C,EACI,OAJqD,CAKzD;;IACA,KAAKlE,UAAL,GANyD,CAOzD;;IACA,IAAI+H,WAAW,GAAG;MAAE/I,CAAC,EAAE,CAAL;MAAQC,CAAC,EAAE;IAAX,CAAlB;IACApC,QAAQ,CAAC,UAAU4E,IAAV,EAAgB;MACrBsG,WAAW,CAACtG,IAAD,CAAX,GAAoBlE,UAAU,CAACmC,KAAK,CAAClB,aAAN,CAAoBgD,UAApB,CAA+BE,MAA/B,CAAsCD,IAAtC,CAAD,EAA8C/B,KAAK,CAACwE,cAAN,CAAqBzC,IAArB,CAA9C,CAA9B;IACH,CAFO,CAAR;IAGA;AACR;AACA;AACA;AACA;;IACQ,KAAKuG,iBAAL,CAAuB,YAAY;MAC/BnL,QAAQ,CAAC,UAAU4E,IAAV,EAAgB;QACrB,IAAI,CAACkD,UAAU,CAAClD,IAAD,EAAOc,IAAP,EAAa,IAAb,CAAf,EACI,OAFiB,CAGrB;QACA;;QACA,IAAIhE,EAAE,GAAGnB,wBAAwB,CAACsC,KAAK,CAAClB,aAAN,CAAoBgD,UAApB,CAA+BE,MAA/B,CAAsCD,IAAtC,CAAD,EAA8C/B,KAAK,CAACwE,cAAN,CAAqBzC,IAArB,CAA9C,EAA0EsG,WAAW,CAACtG,IAAD,CAArF,CAAjC;QAAA,IAA+HE,GAAG,GAAGpD,EAAE,CAACoD,GAAxI;QAAA,IAA6IC,GAAG,GAAGrD,EAAE,CAACqD,GAAtJ;;QACAlC,KAAK,CAAClB,aAAN,CAAoB8G,uBAApB,CAA4C7D,IAA5C,EAAkDE,GAAlD,EAAuDC,GAAvD;MACH,CAPO,CAAR;IAQH,CATD;IAUA;AACR;AACA;AACA;;IACQqG,UAAU,CAACjK,WAAD,EAAc,CAAd,CAAV;EACH,CAhCD;;EAiCAM,yBAAyB,CAACiB,SAA1B,CAAoCyI,iBAApC,GAAwD,UAAUE,OAAV,EAAmB;IACvE,IAAIxI,KAAK,GAAG,IAAZ;;IACA,KAAKS,YAAL,GAAoBlC,WAAW,CAAC,UAAUoC,IAAV,EAAgBC,KAAhB,EAAuB;MACnD,IAAIC,SAAS,GAAG7C,0BAA0B,CAACgC,KAAK,CAAClB,aAAP,CAA1C;MACA8B,KAAK,CAAC,YAAY;QACd,OAAOC,SAAS,CAACM,OAAV,CAAkB,UAAUC,OAAV,EAAmB;UAAE,OAAOA,OAAO,CAACC,cAAR,EAAP;QAAkC,CAAzE,CAAP;MACH,CAFI,CAAL;MAGAV,IAAI,CAAC,YAAY;QAAE,OAAO1C,uBAAuB,CAAC+B,KAAK,CAAClB,aAAP,CAA9B;MAAsD,CAArE,CAAJ;MACA8B,KAAK,CAAC,YAAY;QACd,OAAOC,SAAS,CAACM,OAAV,CAAkB,UAAUC,OAAV,EAAmB;UAAE,OAAOA,OAAO,CAACE,gBAAR,EAAP;QAAoC,CAA3E,CAAP;MACH,CAFI,CAAL;MAGAX,IAAI,CAAC,YAAY;QACbX,KAAK,CAACyC,sBAAN;MACH,CAFG,CAAJ;MAGA,IAAI+F,OAAJ,EACI5H,KAAK,CAAC4H,OAAD,CAAL;IACP,CAd8B,CAA/B;EAeH,CAjBD;;EAkBA5J,yBAAyB,CAACiB,SAA1B,CAAoC4I,KAApC,GAA4C,UAAU3J,aAAV,EAAyB;IACjE,IAAIkB,KAAK,GAAG,IAAZ;;IACA,IAAIoB,OAAO,GAAGtC,aAAa,CAAC4J,WAAd,EAAd;IACA;AACR;AACA;;IACQ,IAAIC,mBAAmB,GAAG9L,eAAe,CAACuE,OAAD,EAAU,aAAV,EAAyB,UAAUf,KAAV,EAAiB;MAC/E,IAAIxB,EAAE,GAAGmB,KAAK,CAACb,KAAf;MAAA,IAAsB0D,IAAI,GAAGhE,EAAE,CAACgE,IAAhC;MAAA,IAAsC5C,EAAE,GAAGpB,EAAE,CAAC+J,YAA9C;MAAA,IAA4DA,YAAY,GAAG3I,EAAE,KAAK,KAAK,CAAZ,GAAgB,IAAhB,GAAuBA,EAAlG;MACA4C,IAAI,IAAI+F,YAAR,IAAwB5I,KAAK,CAACF,KAAN,CAAYO,KAAZ,CAAxB;IACH,CAHwC,CAAzC;IAIA;AACR;AACA;AACA;;IACQ,IAAIwI,kBAAkB,GAAG/L,WAAW,CAACgM,MAAD,EAAS,QAAT,EAAmB,YAAY;MAC/D9I,KAAK,CAACoI,UAAN;IACH,CAFmC,CAApC;IAGA;AACR;AACA;AACA;;IACQ,IAAIW,wBAAwB,GAAGjK,aAAa,CAACkK,cAAd,CAA6B,YAAY;MACpE,IAAIhJ,KAAK,CAACjB,UAAV,EAAsB;QAClBiB,KAAK,CAACyC,sBAAN;MACH;IACJ,CAJ8B,CAA/B;IAKA;AACR;AACA;AACA;;IACQ,IAAIwG,cAAc,GAAGnK,aAAa,CAACmK,cAAnC;;IACA,IAAIA,cAAJ,EAAoB;MAChB,KAAKnJ,KAAL,CAAWnB,gBAAX,EAA6B;QAAEU,cAAc,EAAE4J;MAAlB,CAA7B;IACH;IACD;AACR;AACA;;;IACQ,OAAO,YAAY;MACfN,mBAAmB,KAAK,IAAxB,IAAgCA,mBAAmB,KAAK,KAAK,CAA7D,GAAiE,KAAK,CAAtE,GAA0EA,mBAAmB,EAA7F;MACAE,kBAAkB,KAAK,IAAvB,IAA+BA,kBAAkB,KAAK,KAAK,CAA3D,GAA+D,KAAK,CAApE,GAAwEA,kBAAkB,EAA1F;MACAE,wBAAwB,KAAK,IAA7B,IAAqCA,wBAAwB,KAAK,KAAK,CAAvE,GAA2E,KAAK,CAAhF,GAAoFA,wBAAwB,EAA5G;;MACA/I,KAAK,CAAC2E,UAAN;IACH,CALD;EAMH,CA3CD;;EA4CA,OAAO/F,yBAAP;AACH,CAzhB8C,EAA/C;;AA0hBA,SAASqG,UAAT,CAAoBiE,SAApB,EAA+BrG,IAA/B,EAAqC7D,gBAArC,EAAuD;EACnD,OAAQ,CAAC6D,IAAI,KAAK,IAAT,IAAiBA,IAAI,KAAKqG,SAA3B,MACHlK,gBAAgB,KAAK,IAArB,IAA6BA,gBAAgB,KAAKkK,SAD/C,CAAR;AAEH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAAS3F,mBAAT,CAA6BD,MAA7B,EAAqC6F,aAArC,EAAoD;EAChD,IAAIA,aAAa,KAAK,KAAK,CAA3B,EAA8B;IAAEA,aAAa,GAAG,EAAhB;EAAqB;;EACrD,IAAID,SAAS,GAAG,IAAhB;;EACA,IAAIE,IAAI,CAACC,GAAL,CAAS/F,MAAM,CAAC/D,CAAhB,IAAqB4J,aAAzB,EAAwC;IACpCD,SAAS,GAAG,GAAZ;EACH,CAFD,MAGK,IAAIE,IAAI,CAACC,GAAL,CAAS/F,MAAM,CAAChE,CAAhB,IAAqB6J,aAAzB,EAAwC;IACzCD,SAAS,GAAG,GAAZ;EACH;;EACD,OAAOA,SAAP;AACH;;AAED,SAAStK,yBAAT,EAAoCH,mBAApC"},"metadata":{},"sourceType":"module"}